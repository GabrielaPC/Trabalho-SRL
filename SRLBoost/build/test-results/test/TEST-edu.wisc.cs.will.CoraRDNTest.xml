<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="edu.wisc.cs.will.CoraRDNTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2022-10-20T17:10:19" hostname="Ubuntu" time="15.685">
  <properties/>
  <testcase name="testCoraRDNLearnInfer()" classname="edu.wisc.cs.will.CoraRDNTest" time="15.685"/>
  <system-out><![CDATA[
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/cora/fold1/train/train_pos.txt, data/cora/fold1/train/train_neg.txt, data/cora/fold1/train/train_bk.txt, data/cora/fold1/train/train_facts.txt]
%  for N=0: args[N]=data/cora/fold1/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/train/train_pos.txt, data/cora/fold1/train/train_neg.txt, data/cora/fold1/train/train_bk.txt, data/cora/fold1/train/train_facts.txt]
%  for N=1: args[N]=data/cora/fold1/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/train/train_pos.txt, data/cora/fold1/train/train_neg.txt, data/cora/fold1/train/train_bk.txt, data/cora/fold1/train/train_facts.txt]
%  for N=2: args[N]=data/cora/fold1/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/train/train_pos.txt, data/cora/fold1/train/train_neg.txt, data/cora/fold1/train/train_bk.txt, data/cora/fold1/train/train_facts.txt]
%  for N=3: args[N]=data/cora/fold1/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 5.567 facts.
% Have read 29.528 examples from 'data/cora/fold1/train' [data/cora/fold1/train/train*].
% Have read 22.786 examples from 'data/cora/fold1/train' [data/cora/fold1/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% ***** Severe Warning: No target modes were provided for 'samebib/2'. *****


% NEW target:                 sameauthor(A, B)
%  targetPred:                sameauthor/2
%  targetArgTypes:            signature = [const, const], types = [-auth, +auth]
%  targets:                   [sameauthor(A, B)]
%  targetPredicates:          [samebib/2, sameauthor/2, sametitle/2, samevenue/2]
%  targetArgSpecs:            [[A[-auth], B[+auth]]]
%  variablesInTargets:        [[A, B]]

% ***** Severe Warning: No target modes were provided for 'sametitle/2'. *****


% ***** Severe Warning: No target modes were provided for 'samevenue/2'. *****


% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 85 milliseconds

% Read 29.528 pos examples and 22.786 neg examples.
% Time to init learnOneClause: 128 milliseconds
% Old dirnull
Setting model dir

% Have 29.528 'raw' positive examples and kept 603.
% Have 22.786 'raw' negative examples and kept 58.

% processing backup's for sameauthor
%  POS EX = 603
%  NEG EX = 58

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/cora/fold1/train/models/
% Learning 10 trees in this iteration for sameauthor

% Learn model for: sameauthor
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08004650726332674
Set score:0.0025
% Dataset size: 661
Computing probabilities
prob time:2 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08004650726333695
Set score:0.0025

% Have these 10 positive seeds: 30 44 102 111 129 271 295 306 337 516

% LearnOneClause Parameters:
%   Targets (3):
%    sameauthor(-auth, +auth),
%    sameauthor(+auth, -auth),
%    sameauthor(+auth, +auth)
%  Modes (12):
%    author(-paper, +auth),
%    author(+paper, -auth),
%    haswordauthor(-auth, +word),
%    haswordauthor(+auth, -word),
%    haswordtitle(-title, +word),
%    haswordtitle(+title, -word),
%    haswordvenue(-venue, +word),
%    haswordvenue(+venue, -word),
%    title(-paper, +title),
%    title(+paper, -title),
%    venue(-paper, +venue),
%    venue(+paper, -venue)

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for author/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for haswordauthor/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% [ LazyGroundClauseIndex ]  Building full index for author/2 with 1.036 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for author/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for title/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for venue/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% [ LazyGroundClauseIndex ]  Building full index for haswordauthor/2 with 312 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for haswordauthor/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for haswordtitle/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for haswordvenue/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,387404 (regressionFit = 30,387402, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,387404): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -52,468231 (regressionFit = 52,468228, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -52,591861 (regressionFit = 52,591859, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,387404 (regressionFit = 30,387402, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -52,468231 (regressionFit = 52,468228, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -52,591861 (regressionFit = 52,591859, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.047854175708362985 to score=0.0025 #egs=635.0
Comparing variance: 1.708035422500241E-17 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,047854)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,047854) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 754 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -30,387404 (regressionFit = 30,387402, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 95 113 239 262 381 490 494 560 577 633
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -30,319936 (regressionFit = 30,319933, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,319936): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -30,250747 (regressionFit = 30,250744, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,250747): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,048.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03109627264076864 to score=0.0025 #egs=249.0
Comparing variance: 0.05831029020913533 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,058310)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,058310) into the LAST position (#1) in the search queue.

% Time for loop #2: 105 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -30,387404 (regressionFit = 30,387402, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 32 49 96 97 111 137 149 225 281 290
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,058.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398796272 to score=0.0025 #egs=137.0
Comparing variance: 0.0235157497459766 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 56 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -30,387404 (regressionFit = 30,387402, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 34 91 115 126 150 154 167 192 194
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -30,3874):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon835, Anon23))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 14:10:22 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.8260204210432839;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.7267620737856416;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.8340525495573401;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.8260204210432839) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.7267620737856416) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.8340525495573401) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.1418510649004877) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.8260204210432839) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar1),
   haswordauthor(b, uniqueVar1),
   haswordvenue(underscore, uniqueVar1),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.7267620737856416) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar2),
   haswordauthor(b, uniqueVar2),
   haswordtitle(underscore, uniqueVar2),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.8340525495573401) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar3),
   haswordauthor(b, uniqueVar3),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.1418510649004877) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordtitle(underscore, uniqueVar2)
%   haswordauthor(b, uniqueVar2)
%   haswordvenue(underscore, uniqueVar1)
%   haswordauthor(a, uniqueVar3)
%   haswordauthor(a, uniqueVar1)
%   haswordauthor(b, uniqueVar3)
%   haswordauthor(a, uniqueVar2)
%   haswordauthor(b, uniqueVar1)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 1 trees is 957 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02351574974597659
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:26 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 28 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0698148808140101
Set score:0.0025

% Have these 10 positive seeds: 26 98 249 308 362 438 446 452 544 624

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,981854 (regressionFit = 29,981852, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,981854): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -45,834990 (regressionFit = 45,834988, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -45,921345 (regressionFit = 45,921343, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,981854 (regressionFit = 29,981852, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -45,834990 (regressionFit = 45,834988, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -45,921345 (regressionFit = 45,921343, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04721551571232372 to score=0.0025 #egs=635.0
Comparing variance: -4.270088556250602E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,047216)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,047216) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 777 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,981854 (regressionFit = 29,981852, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 21 47 61 93 110 126 136 162 220
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,961422 (regressionFit = 29,961419, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,961422): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,892990 (regressionFit = 29,892987, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,892990): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,047.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03109627264076373 to score=0.0025 #egs=249.0
Comparing variance: 0.057383459198098 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,057383)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,057383) into the LAST position (#1) in the search queue.

% Time for loop #2: 234 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,981854 (regressionFit = 29,981852, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 16 20 75 108 148 162 163 202 222 239
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,057.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398796189 to score=0.0025 #egs=137.0
Comparing variance: 0.02351574974596992 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 111 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,981854 (regressionFit = 29,981852, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 7 20 33 54 100 106 143 151 169 181
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,9819):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon1993, Anon1181))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 14:10:23 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.6937834871988068;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.6138253307187604;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.7002146166689344;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.6937834871988068) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.6138253307187604) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.7002146166689344) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.12544463852839138) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.6937834871988068) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar4),
   haswordauthor(b, uniqueVar4),
   haswordvenue(underscore, uniqueVar4),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.6138253307187604) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar5),
   haswordauthor(b, uniqueVar5),
   haswordtitle(underscore, uniqueVar5),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.7002146166689344) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar6),
   haswordauthor(b, uniqueVar6),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.12544463852839138) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar6)
%   haswordauthor(a, uniqueVar5)
%   haswordauthor(a, uniqueVar6)
%   haswordvenue(underscore, uniqueVar4)
%   haswordauthor(a, uniqueVar4)
%   haswordtitle(underscore, uniqueVar5)
%   haswordauthor(b, uniqueVar4)
%   haswordauthor(b, uniqueVar5)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 2 trees is 2,182 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.023515749745969816
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:99 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 104 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06023244635697622
Set score:0.0025

% Have these 10 positive seeds: 45 62 125 163 214 260 386 468 483 513

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,600108 (regressionFit = 29,600106, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,600108): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -39,628519 (regressionFit = 39,628517, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -39,677874 (regressionFit = 39,677872, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,600108 (regressionFit = 29,600106, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -39,628519 (regressionFit = 39,628517, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -39,677874 (regressionFit = 39,677872, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.046614340875775165 to score=0.0025 #egs=635.0
Comparing variance: -2.135044278125301E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046614)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046614) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 1,085 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,600108 (regressionFit = 29,600106, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 83 119 128 320 371 372 384 387 466 476
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,600106 (regressionFit = 29,600103, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,600106): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,556490 (regressionFit = 29,556487, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,556490): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,047.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03109627264076299 to score=0.0025 #egs=249.0
Comparing variance: 0.05651169644666 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056512)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056512) into the LAST position (#1) in the search queue.

% Time for loop #2: 217 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,600108 (regressionFit = 29,600106, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 22 87 95 101 134 150 179 191 206 210
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,057.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795909 to score=0.0025 #egs=137.0
Comparing variance: 0.023515749745973858 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 110 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,600108 (regressionFit = 29,600106, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 46 86 90 91 106 113 148 158 179 182
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,6001):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon3151, Anon2339))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 14:10:25 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.537465783734176;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.4814879569022587;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.541948637920979;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.537465783734176) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.4814879569022587) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.541948637920979) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.11231637819360639) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.537465783734176) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar7),
   haswordauthor(b, uniqueVar7),
   haswordvenue(underscore, uniqueVar7),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.4814879569022587) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar8),
   haswordauthor(b, uniqueVar8),
   haswordtitle(underscore, uniqueVar8),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.541948637920979) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar9),
   haswordauthor(b, uniqueVar9),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.11231637819360639) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(a, uniqueVar8)
%   haswordtitle(underscore, uniqueVar8)
%   haswordauthor(b, uniqueVar9)
%   haswordauthor(a, uniqueVar9)
%   haswordauthor(b, uniqueVar8)
%   haswordauthor(a, uniqueVar7)
%   haswordauthor(b, uniqueVar7)
%   haswordvenue(underscore, uniqueVar7)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 3 trees is 3,769 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.023515749745973813
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:153 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 159 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05389405194310962
Set score:0.0025

% Have these 10 positive seeds: 143 158 190 302 320 323 369 375 436 448

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,428934 (regressionFit = 29,428932, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,428934): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -35,506051 (regressionFit = 35,506048, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -35,539135 (regressionFit = 35,539133, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,428934 (regressionFit = 29,428932, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -35,506051 (regressionFit = 35,506048, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -35,539135 (regressionFit = 35,539133, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.046344775426650865 to score=0.0025 #egs=635.0
Comparing variance: -2.135044278125301E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046345)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046345) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 1,104 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,428934 (regressionFit = 29,428932, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 116 185 432 478 480 501 561 614 633
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,420482 (regressionFit = 29,420479, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,420482): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,406016 (regressionFit = 29,406013, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,406016): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.031096272640763676 to score=0.0025 #egs=249.0
Comparing variance: 0.05612186778155874 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056122)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056122) into the LAST position (#1) in the search queue.

% Time for loop #2: 205 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,428934 (regressionFit = 29,428932, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 17 37 82 88 109 133 181 274 280 296
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795844 to score=0.0025 #egs=137.0
Comparing variance: 0.02351574974597286 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 111 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,428934 (regressionFit = 29,428932, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 54 58 68 173 177 194 232 241 247
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,4289):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon4309, Anon3497))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 14:10:26 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.40390648237861687;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.3630945224443797;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.4072853796652973;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.40390648237861687) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.3630945224443797) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.4072853796652973) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.10159632948783635) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.40390648237861687) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar10),
   haswordauthor(b, uniqueVar10),
   haswordvenue(underscore, uniqueVar10),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.3630945224443797) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar11),
   haswordauthor(b, uniqueVar11),
   haswordtitle(underscore, uniqueVar11),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.4072853796652973) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar12),
   haswordauthor(b, uniqueVar12),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.10159632948783635) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordtitle(underscore, uniqueVar11)
%   haswordauthor(a, uniqueVar11)
%   haswordauthor(a, uniqueVar12)
%   haswordvenue(underscore, uniqueVar10)
%   haswordauthor(b, uniqueVar12)
%   haswordauthor(b, uniqueVar11)
%   haswordauthor(b, uniqueVar10)
%   haswordauthor(a, uniqueVar10)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 4 trees is 5,420 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02351574974597287
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:191 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 197 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05032990958409567
Set score:0.0025

% Have these 9 positive seeds: 18 64 139 290 298 459 488 493 584

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,376716 (regressionFit = 29,376714, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,376716): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -33,176984 (regressionFit = 33,176982, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -33,205956 (regressionFit = 33,205954, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,376716 (regressionFit = 29,376714, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -33,176984 (regressionFit = 33,176982, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -33,205956 (regressionFit = 33,205954, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0462625420493195 to score=0.0025 #egs=635.0
Comparing variance: 2.135044278125301E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046263)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046263) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 1,018 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,376716 (regressionFit = 29,376714, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 26 34 142 167 200 214 224 238 262 269
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,360733 (regressionFit = 29,360730, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,360733): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,360311 (regressionFit = 29,360308, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,360311): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.031096272640764047 to score=0.0025 #egs=249.0
Comparing variance: 0.05600346180313902 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056003)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056003) into the LAST position (#1) in the search queue.

% Time for loop #2: 225 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,376716 (regressionFit = 29,376714, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 34 53 54 163 184 203 209 231 254
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795914 to score=0.0025 #egs=137.0
Comparing variance: 0.023515749745972103 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 114 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,376716 (regressionFit = 29,376714, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 10 17 67 71 103 122 133 177 181
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,3767):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon5467, Anon4655))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 14:10:28 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.30834693575136474;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.2734937302542984;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.31138393761949307;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.30834693575136474) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.2734937302542984) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.31138393761949307) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.09269127618926096) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.30834693575136474) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar13),
   haswordauthor(b, uniqueVar13),
   haswordvenue(underscore, uniqueVar13),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.2734937302542984) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar14),
   haswordauthor(b, uniqueVar14),
   haswordtitle(underscore, uniqueVar14),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.31138393761949307) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar15),
   haswordauthor(b, uniqueVar15),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.09269127618926096) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(a, uniqueVar15)
%   haswordvenue(underscore, uniqueVar13)
%   haswordauthor(a, uniqueVar14)
%   haswordauthor(b, uniqueVar14)
%   haswordauthor(a, uniqueVar13)
%   haswordtitle(underscore, uniqueVar14)
%   haswordauthor(b, uniqueVar13)
%   haswordauthor(b, uniqueVar15)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 5 trees is 7,046 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.023515749745972092
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:227 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 231 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04834255039778267
Set score:0.0025

% Have these 10 positive seeds: 32 83 98 101 153 165 186 226 285 301

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,363900 (regressionFit = 29,363898, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,363900): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,874217 (regressionFit = 31,874214, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,902948 (regressionFit = 31,902946, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,363900 (regressionFit = 29,363898, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,874217 (regressionFit = 31,874214, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,902948 (regressionFit = 31,902946, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04624235927592546 to score=0.0025 #egs=635.0
Comparing variance: 1.1742743529689156E-17 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046242)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046242) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 439 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,363900 (regressionFit = 29,363898, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 113 236 251 404 523 556
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,345574 (regressionFit = 29,345571, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,345574): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,349237 (regressionFit = 29,349234, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0537907281516589 to score=0.0025 #egs=332.0
Comparing variance: 0.0379110536392846 to score=0.0025 #egs=303.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 303,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,037911)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,037911) into the LAST position (#1) in the search queue.

% Time for loop #2: 90 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/303,0 pos, 0,0/0,0 neg]'
%     Score = -29,363900 (regressionFit = 29,363898, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 303,0/303,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 19 81 87 119 123 141 158 164 197 209
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 303,0/303,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 303,0/303,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 303,0/303,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 303,0/303,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 303,0/303,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,3639):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 303,0/303,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon6433, Anon5813))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 14:10:29 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24199607985174748;  // std dev = 4,226, 332,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=312 */
%   | else return 0.2312402513487495;  // std dev = 0,195, 303,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=291 */
%   else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.24199607985174748) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.2312402513487495) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #2.

sameauthor(A, B, -0.08518475138839682) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.24199607985174748) :-  /* #neg=20 #pos=312 */ 
   haswordauthor(a, uniqueVar16),
   haswordauthor(b, uniqueVar16),
   haswordtitle(underscore, uniqueVar16),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.2312402513487495) :-  /* #neg=12 #pos=291 */ 
   haswordauthor(a, uniqueVar17),
   haswordauthor(b, uniqueVar17),
   !. // Flattened version of clause #2.

flattened_sameauthor(underscore, underscore, -0.08518475138839682) :-  /* #neg=26 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   haswordtitle(underscore, uniqueVar16)
%   haswordauthor(b, uniqueVar16)
%   haswordauthor(b, uniqueVar17)
%   haswordauthor(a, uniqueVar16)
%   haswordauthor(a, uniqueVar17)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 6 trees is 7,848 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.037911053639284605
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:108 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 110 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.047253677572561756
Set score:0.0025

% Have these 10 positive seeds: 41 79 82 140 247 345 406 407 520 569

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,416503 (regressionFit = 29,416501, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,416503): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,133121 (regressionFit = 31,133119, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,183401 (regressionFit = 31,183399, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,416503 (regressionFit = 29,416501, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,133121 (regressionFit = 31,133119, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -31,183401 (regressionFit = 31,183399, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04632519867141186 to score=0.0025 #egs=635.0
Comparing variance: -2.135044278125301E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046325)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046325) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 586 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,416503 (regressionFit = 29,416501, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 75 101 208 251 271 277 278 551 563 580
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,411389 (regressionFit = 29,411386, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,411389): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,398161 (regressionFit = 29,398157, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,398161): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03103155822819845 to score=0.0025 #egs=249.0
Comparing variance: 0.05614326287601366 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056143)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056143) into the LAST position (#1) in the search queue.

% Time for loop #2: 218 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,416503 (regressionFit = 29,416501, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 24 47 53 67 105 124 150 187 189 280
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795864 to score=0.0025 #egs=137.0
Comparing variance: 0.023515749745971495 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 111 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,416503 (regressionFit = 29,416501, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 38 44 61 65 81 104 116 164 206
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,4165):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon7587, Anon6775))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 14:10:30 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.19771742956019678;  // std dev = 2,780, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.1575280876183187;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.20276390996713534;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.19771742956019678) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.1575280876183187) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.20276390996713534) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.07877675473109175) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.19771742956019678) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar18),
   haswordauthor(b, uniqueVar18),
   haswordvenue(underscore, uniqueVar18),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.1575280876183187) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar19),
   haswordauthor(b, uniqueVar19),
   haswordtitle(underscore, uniqueVar19),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.20276390996713534) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar20),
   haswordauthor(b, uniqueVar20),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.07877675473109175) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar18)
%   haswordauthor(b, uniqueVar19)
%   haswordauthor(a, uniqueVar19)
%   haswordauthor(a, uniqueVar18)
%   haswordauthor(b, uniqueVar20)
%   haswordauthor(a, uniqueVar20)
%   haswordvenue(underscore, uniqueVar18)
%   haswordtitle(underscore, uniqueVar19)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 7 trees is 8,950 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.023515749745971502
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:310 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 316 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04649917877751458
Set score:0.0025

% Have these 9 positive seeds: 69 81 102 207 208 350 451 476 629

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,398887 (regressionFit = 29,398885, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,398887): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,645036 (regressionFit = 30,645034, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,690217 (regressionFit = 30,690215, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,398887 (regressionFit = 29,398885, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,645036 (regressionFit = 30,645034, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,690217 (regressionFit = 30,690215, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04629745710339763 to score=0.0025 #egs=635.0
Comparing variance: -1.0675221390626506E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046297)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046297) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 1,009 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,398887 (regressionFit = 29,398885, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 99 205 330 366 375 474 525 563 564 606
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,391370 (regressionFit = 29,391367, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,391370): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,381726 (regressionFit = 29,381723, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,381726): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03103843111692199 to score=0.0025 #egs=249.0
Comparing variance: 0.05609625341378368 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056096)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056096) into the LAST position (#1) in the search queue.

% Time for loop #2: 207 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,398887 (regressionFit = 29,398885, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 28 50 69 101 108 187 246 261 295 359
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795899 to score=0.0025 #egs=137.0
Comparing variance: 0.02351574974597163 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 112 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,398887 (regressionFit = 29,398885, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 21 41 79 134 158 165 166 173 225
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,3989):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon8745, Anon7933))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 14:10:31 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.16459525908129813;  // std dev = 2,780, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.1262690629642254;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.1691754202996682;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.16459525908129813) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.1262690629642254) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.1691754202996682) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.07324622576333704) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.16459525908129813) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar21),
   haswordauthor(b, uniqueVar21),
   haswordvenue(underscore, uniqueVar21),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.1262690629642254) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar22),
   haswordauthor(b, uniqueVar22),
   haswordtitle(underscore, uniqueVar22),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.1691754202996682) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar23),
   haswordauthor(b, uniqueVar23),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.07324622576333704) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordvenue(underscore, uniqueVar21)
%   haswordauthor(b, uniqueVar23)
%   haswordauthor(a, uniqueVar21)
%   haswordauthor(a, uniqueVar23)
%   haswordauthor(a, uniqueVar22)
%   haswordauthor(b, uniqueVar21)
%   haswordtitle(underscore, uniqueVar22)
%   haswordauthor(b, uniqueVar22)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 8 trees is 10,679 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02351574974597163
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:370 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 375 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04600080941250266
Set score:0.0025

% Have these 10 positive seeds: 21 75 89 117 135 208 238 276 396 571

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,387405 (regressionFit = 29,387403, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,387405): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,322893 (regressionFit = 30,322891, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,364798 (regressionFit = 30,364796, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,387405 (regressionFit = 29,387403, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,322893 (regressionFit = 30,322891, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,364798 (regressionFit = 30,364796, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04627937474031328 to score=0.0025 #egs=635.0
Comparing variance: -4.803849625781927E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046279)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046279) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 1,015 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,387405 (regressionFit = 29,387403, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 207 232 242 299 331 376 383 425 467 543
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,377958 (regressionFit = 29,377955, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,377958): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,371115 (regressionFit = 29,371112, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,371115): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03104409145199766 to score=0.0025 #egs=249.0
Comparing variance: 0.056065113080122506 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056065)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056065) into the LAST position (#1) in the search queue.

% Time for loop #2: 210 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,387405 (regressionFit = 29,387403, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 26 83 198 292 382
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1141243539879589 to score=0.0025 #egs=137.0
Comparing variance: 0.023515749745971846 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 105 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,387405 (regressionFit = 29,387403, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 8 43 53 71 107 153 174 176 242
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,3874):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon9903, Anon9091))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 14:10:33 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.13987516538184158;  // std dev = 2,780, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.102864928882531;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.14415588759261427;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.06842697784420276;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.13987516538184158) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.102864928882531) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.14415588759261427) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.06842697784420276) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.13987516538184158) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar24),
   haswordauthor(b, uniqueVar24),
   haswordvenue(underscore, uniqueVar24),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.102864928882531) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar25),
   haswordauthor(b, uniqueVar25),
   haswordtitle(underscore, uniqueVar25),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.14415588759261427) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar26),
   haswordauthor(b, uniqueVar26),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.06842697784420276) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(a, uniqueVar26)
%   haswordauthor(b, uniqueVar26)
%   haswordauthor(a, uniqueVar24)
%   haswordtitle(underscore, uniqueVar25)
%   haswordvenue(underscore, uniqueVar24)
%   haswordauthor(a, uniqueVar25)
%   haswordauthor(b, uniqueVar25)
%   haswordauthor(b, uniqueVar24)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Time taken to learn 9 trees is 12,471 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02351574974597184
Set score:0.0025
% Kept 603 of the 603 positive examples.
% Kept 58 of the 58 negative examples.
% Dataset size: 661
Computing probabilities
prob time:395 milliseconds
No hidden examples for : sameauthor
Time to build dataset: 400 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04565504018508455
Set score:0.0025

% Have these 10 positive seeds: 80 188 221 222 262 295 348 352 377 428

% target           = sameauthor(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
% Most-general root: sameauthor(_, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, A), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, A), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- author(_, B), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(_, A), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- author(_, B), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- author(_, A), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), title(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- author(B, A), venue(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), author(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,378626 (regressionFit = 29,378625, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,378626): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, _), haswordauthor(B, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,099802 (regressionFit = 30,099799, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,139382 (regressionFit = 30,139380, penalties=2.24E-6) for clause:  sameauthor(A, _) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), author(_, A).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -29,378626 (regressionFit = 29,378625, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordauthor(_, B).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  sameauthor(A, B) :- haswordauthor(B, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, _), haswordauthor(A, _).  [covers 661,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,099802 (regressionFit = 30,099799, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordtitle(_, B).  [covers 457,0/661,0 pos, 0,0/0,0 neg]
%     Score = -30,139382 (regressionFit = 30,139380, penalties=2.24E-6) for clause:  sameauthor(_, A) :- haswordauthor(A, B), haswordvenue(_, B).  [covers 356,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04626555045008791 to score=0.0025 #egs=635.0
Comparing variance: -1.6012832085939759E-18 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 635,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046266)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,046266) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 692 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/661,0 pos, 0,0/0,0 neg]
% This clause covers 635 positive examples, of which 635 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]'
%     Score = -29,378626 (regressionFit = 29,378625, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 8 74 113 117 119 276 438 511 569
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,367530 (regressionFit = 29,367527, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,367530): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 332,0/635,0 pos, 0,0/0,0 neg]
%     Score = -29,363109 (regressionFit = 29,363106, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,363109): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
Comparing variance: 0.031048756511375484 to score=0.0025 #egs=249.0
Comparing variance: 0.05604136269080838 to score=0.0025 #egs=386.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 386,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,056041)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/635,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,056041) into the LAST position (#1) in the search queue.

% Time for loop #2: 86 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordvenue(_, C).  [covers 249,0/635,0 pos, 0,0/0,0 neg]
% This clause covers 249 positive examples, of which 249 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 635,0/386,0 pos, 0,0/0,0 neg]'
%     Score = -29,378626 (regressionFit = 29,378625, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 25 91 111 210 233 285 319 329 342
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%     Score = -21,490461 (regressionFit = 21,490458, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,490461): sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% The best node found: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,056.
% Will extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11412435398795906 to score=0.0025 #egs=137.0
Comparing variance: 0.023515749745971835 to score=0.0025 #egs=249.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 249,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023516)
%         ILP node to extend: sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/386,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023516) into the LAST position (#1) in the search queue.

% Time for loop #3: 45 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordtitle(_, C).  [covers 137,0/386,0 pos, 0,0/0,0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 386,0/249,0 pos, 0,0/0,0 neg]'
%     Score = -29,378626 (regressionFit = 29,378625, penalties=1.93E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 16 46 53 60 64 97 98 139 174 185
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, A).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), author(_, B).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(_, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(A, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C), haswordauthor(B, _).  [covers 249,0/249,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -29,3786):
%  sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).  [covers 249,0/249,0 pos, 0,0/0,0 neg]
Created a leaf under (sameauthor(A, B) :- haswordtitle(Anon11061, Anon10249))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 14:10:35 10/20/22.  %%%%%


% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.12085789767132118;  // std dev = 2,780, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.08491961211408829;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.12493471230527561;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.12085789767132118) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.08491961211408829) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.12493471230527561) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.06419184008202622) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.12085789767132118) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar27),
   haswordauthor(b, uniqueVar27),
   haswordvenue(underscore, uniqueVar27),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.08491961211408829) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar28),
   haswordauthor(b, uniqueVar28),
   haswordtitle(underscore, uniqueVar28),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.12493471230527561) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar29),
   haswordauthor(b, uniqueVar29),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.06419184008202622) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordvenue(underscore, uniqueVar27)
%   haswordauthor(b, uniqueVar28)
%   haswordauthor(a, uniqueVar28)
%   haswordauthor(a, uniqueVar29)
%   haswordauthor(b, uniqueVar29)
%   haswordtitle(underscore, uniqueVar28)
%   haswordauthor(a, uniqueVar27)
%   haswordauthor(b, uniqueVar27)

% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model.ckpt
% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for sameauthor.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
sameauthor(A, B, Total) :- // A general accessor. 
   sameauthor(A, B, 1000000, Total), !.
sameauthor(A, B, Total) :- waitHere("This should not fail", sameauthor(A, B, Total)).

sameauthor(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_sameauthor_tree1(A, B, TreesToUse, Total1),
   getScore_sameauthor_tree2(A, B, TreesToUse, Total2),
   getScore_sameauthor_tree3(A, B, TreesToUse, Total3),
   getScore_sameauthor_tree4(A, B, TreesToUse, Total4),
   getScore_sameauthor_tree5(A, B, TreesToUse, Total5),
   getScore_sameauthor_tree6(A, B, TreesToUse, Total6),
   getScore_sameauthor_tree7(A, B, TreesToUse, Total7),
   getScore_sameauthor_tree8(A, B, TreesToUse, Total8),
   getScore_sameauthor_tree9(A, B, TreesToUse, Total9),
   getScore_sameauthor_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
sameauthor(A, B, TreesToUse, Total) :- waitHere("This should not fail", sameauthor(A, B, TreesToUse, Total)).

getScore_sameauthor_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_sameauthor_tree1(A, B, TreesToUse, Total1) :- sameauthor_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_sameauthor_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_sameauthor_tree2(A, B, TreesToUse, Total2) :- sameauthor_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_sameauthor_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_sameauthor_tree3(A, B, TreesToUse, Total3) :- sameauthor_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_sameauthor_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_sameauthor_tree4(A, B, TreesToUse, Total4) :- sameauthor_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_sameauthor_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_sameauthor_tree5(A, B, TreesToUse, Total5) :- sameauthor_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_sameauthor_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_sameauthor_tree6(A, B, TreesToUse, Total6) :- sameauthor_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_sameauthor_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_sameauthor_tree7(A, B, TreesToUse, Total7) :- sameauthor_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_sameauthor_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_sameauthor_tree8(A, B, TreesToUse, Total8) :- sameauthor_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_sameauthor_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_sameauthor_tree9(A, B, TreesToUse, Total9) :- sameauthor_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_sameauthor_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_sameauthor_tree10(A, B, TreesToUse, Total10) :- sameauthor_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(sameauthor, 77, [
   haswordauthor(a, uniqueVar8),
   haswordauthor(b, uniqueVar18),
   haswordtitle(underscore, uniqueVar25),
   haswordauthor(a, uniqueVar1),
   haswordauthor(b, uniqueVar25),
   haswordauthor(b, uniqueVar13),
   haswordauthor(b, uniqueVar6),
   haswordauthor(a, uniqueVar26),
   haswordauthor(b, uniqueVar23),
   haswordvenue(underscore, uniqueVar24),
   haswordauthor(a, uniqueVar21),
   haswordvenue(underscore, uniqueVar1),
   haswordvenue(underscore, uniqueVar4),
   haswordauthor(b, uniqueVar7),
   haswordauthor(b, uniqueVar3),
   haswordauthor(b, uniqueVar22),
   haswordvenue(underscore, uniqueVar27),
   haswordauthor(a, uniqueVar6),
   haswordauthor(a, uniqueVar28),
   haswordauthor(a, uniqueVar22),
   haswordauthor(a, uniqueVar29),
   haswordauthor(b, uniqueVar12),
   haswordauthor(b, uniqueVar14),
   haswordauthor(a, uniqueVar27),
   haswordauthor(a, uniqueVar20),
   haswordauthor(b, uniqueVar24),
   haswordauthor(a, uniqueVar9),
   haswordauthor(a, uniqueVar11),
   haswordauthor(b, uniqueVar16),
   haswordauthor(a, uniqueVar13),
   haswordauthor(a, uniqueVar2),
   haswordauthor(a, uniqueVar4),
   haswordtitle(underscore, uniqueVar5),
   haswordtitle(underscore, uniqueVar14),
   haswordauthor(a, uniqueVar17),
   haswordtitle(underscore, uniqueVar19),
   haswordauthor(a, uniqueVar10),
   haswordauthor(b, uniqueVar15),
   haswordauthor(b, uniqueVar19),
   haswordauthor(b, uniqueVar26),
   haswordtitle(underscore, uniqueVar8),
   haswordauthor(b, uniqueVar9),
   haswordauthor(a, uniqueVar23),
   haswordauthor(a, uniqueVar3),
   haswordauthor(a, uniqueVar12),
   haswordtitle(underscore, uniqueVar16),
   haswordauthor(b, uniqueVar17),
   haswordauthor(b, uniqueVar5),
   haswordvenue(underscore, uniqueVar13),
   haswordauthor(b, uniqueVar8),
   haswordvenue(underscore, uniqueVar10),
   haswordauthor(b, uniqueVar21),
   haswordauthor(a, uniqueVar25),
   haswordvenue(underscore, uniqueVar18),
   haswordauthor(b, uniqueVar27),
   haswordtitle(underscore, uniqueVar2),
   haswordauthor(a, uniqueVar7),
   haswordtitle(underscore, uniqueVar28),
   haswordvenue(underscore, uniqueVar7),
   haswordauthor(b, uniqueVar11),
   haswordauthor(b, uniqueVar10),
   haswordtitle(underscore, uniqueVar22),
   haswordauthor(b, uniqueVar4),
   haswordauthor(b, uniqueVar2),
   haswordauthor(a, uniqueVar5),
   haswordtitle(underscore, uniqueVar11),
   haswordauthor(a, uniqueVar19),
   haswordauthor(a, uniqueVar15),
   haswordvenue(underscore, uniqueVar21),
   haswordauthor(a, uniqueVar24),
   haswordauthor(a, uniqueVar16),
   haswordauthor(b, uniqueVar28),
   haswordauthor(a, uniqueVar18),
   haswordauthor(a, uniqueVar14),
   haswordauthor(b, uniqueVar29),
   haswordauthor(b, uniqueVar20),
   haswordauthor(b, uniqueVar1)]).
% Time taken to learn model for 'sameauthor': 13,740 seconds.
% Saving model in: data/cora/fold1/train/models/bRDNs/sameauthor.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 15,319 seconds.

% Starting an INFERENCE run of bRDN.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/cora/fold1/test/test_pos.txt, data/cora/fold1/test/test_neg.txt, data/cora/fold1/test/test_bk.txt, data/cora/fold1/test/test_facts.txt]
%  for N=0: args[N]=data/cora/fold1/test/test_pos.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/test/test_pos.txt, data/cora/fold1/test/test_neg.txt, data/cora/fold1/test/test_bk.txt, data/cora/fold1/test/test_facts.txt]
%  for N=1: args[N]=data/cora/fold1/test/test_neg.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/test/test_pos.txt, data/cora/fold1/test/test_neg.txt, data/cora/fold1/test/test_bk.txt, data/cora/fold1/test/test_facts.txt]
%  for N=2: args[N]=data/cora/fold1/test/test_bk.txt

% getInputArgWithDefaultValue: args=[data/cora/fold1/test/test_pos.txt, data/cora/fold1/test/test_neg.txt, data/cora/fold1/test/test_bk.txt, data/cora/fold1/test/test_facts.txt]
%  for N=3: args[N]=data/cora/fold1/test/test_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 1.493 facts.
% Have read 5.970 examples from 'data/cora/fold1/test' [data/cora/fold1/test/test*].
% Have read 4.978 examples from 'data/cora/fold1/test' [data/cora/fold1/test/test*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% ***** Severe Warning: No target modes were provided for 'samebib/2'. *****


% NEW target:                 sameauthor(A, B)
%  targetPred:                sameauthor/2
%  targetArgTypes:            signature = [const, const], types = [-auth, +auth]
%  targets:                   [sameauthor(A, B)]
%  targetPredicates:          [samebib/2, sameauthor/2, sametitle/2, samevenue/2]
%  targetArgSpecs:            [[A[-auth], B[+auth]]]
%  variablesInTargets:        [[A, B]]

% ***** Severe Warning: No target modes were provided for 'sametitle/2'. *****


% ***** Severe Warning: No target modes were provided for 'samevenue/2'. *****


% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 15 milliseconds

% Read 5.970 pos examples and 4.978 neg examples.
% Time to init learnOneClause: 22 milliseconds
% Old dirdata/cora/fold1/train/models/

% Have 5.970 'raw' positive examples and kept 209.
% Have 4.978 'raw' negative examples and kept 16.

% processing backup's for sameauthor
%  POS EX = 209
%  NEG EX = 16

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0

% Getting bRDN's target predicates.
% Did not learn a model for 'sameauthor' this run.
%   loadModel (#0): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree0.tree
%   loadModel (#1): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree1.tree
%   loadModel (#2): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree2.tree
%   loadModel (#3): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree3.tree
%   loadModel (#4): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree4.tree
%   loadModel (#5): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree5.tree
%   loadModel (#6): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree6.tree
%   loadModel (#7): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree7.tree
%   loadModel (#8): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree8.tree
%   loadModel (#9): data/cora/fold1/train/models/bRDNs/Trees/sameauthorTree9.tree
%  Done loading 10 models.

% for sameauthor |lookupPos| = 209
% for sameauthor |lookupNeg| = 16
% getJointExamples: |pos| = 209, |neg| = 16

% Starting inference in bRDN.
% Trees = 10

% Starting getMarginalProbabilities.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for haswordauthor/2.
% [ LazyGroundClauseIndex ]  Building full index for haswordauthor/2 with 97 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for haswordvenue/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for haswordtitle/2.
 (Arithmetic) Mean Probability Assigned to Correct Output Class: 179,966/225,00 = 0,799849

 The weighted count of positive examples = 209,000 and the weighted count of negative examples = 16,000

printExamples: Writing out predictions (for Tuffy?) on 225 examples for 'sameauthor' to:
  data/cora/fold1/test/results_sameauthor.db
 and to:
  data/cora/fold1/test/query_sameauthor.db

% Computing Area Under Curves.
%Pos=209
%Neg=16
%LL:-35.19635465188434
%LL:-60.76773665622498
Best F1 = 1.0
% F1 = 1.0
% Threshold = 0.8319354104038102

%   AUC ROC   = 0,851675
%   AUC PR    = 0,987965
%   CLL	      = -0,270079
%   Precision = 0,928889 at threshold = 0,500
%   Recall    = 1,000000
%   F1        = 0,963134

% Total inference time (10 trees): 362 milliseconds.
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
