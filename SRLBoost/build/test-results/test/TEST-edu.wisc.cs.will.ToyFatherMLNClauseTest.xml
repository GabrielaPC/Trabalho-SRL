<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="edu.wisc.cs.will.ToyFatherMLNClauseTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2022-10-20T17:10:38" hostname="Ubuntu" time="0.981">
  <properties/>
  <testcase name="testToyFatherMLNLearnInfer()" classname="edu.wisc.cs.will.ToyFatherMLNClauseTest" time="0.981"/>
  <system-out><![CDATA[
% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/toy_father/train/train_pos.txt, data/toy_father/train/train_neg.txt, data/toy_father/train/train_bk.txt, data/toy_father/train/train_facts.txt]
%  for N=0: args[N]=data/toy_father/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/toy_father/train/train_pos.txt, data/toy_father/train/train_neg.txt, data/toy_father/train/train_bk.txt, data/toy_father/train/train_facts.txt]
%  for N=1: args[N]=data/toy_father/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/toy_father/train/train_pos.txt, data/toy_father/train/train_neg.txt, data/toy_father/train/train_bk.txt, data/toy_father/train/train_facts.txt]
%  for N=2: args[N]=data/toy_father/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/toy_father/train/train_pos.txt, data/toy_father/train/train_neg.txt, data/toy_father/train/train_bk.txt, data/toy_father/train/train_facts.txt]
%  for N=3: args[N]=data/toy_father/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 41 facts.
% Have read 5 examples from 'data/toy_father/train' [data/toy_father/train/train*].
% Have read 21 examples from 'data/toy_father/train' [data/toy_father/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 father(A, B)
%  targetPred:                father/2
%  targetArgTypes:            signature = [const, const], types = [+name, +name]
%  targets:                   [father(A, B)]
%  targetPredicates:          [father/2]
%  targetArgSpecs:            [[A[+name], B[+name]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 0 seconds

% Read 5 pos examples and 21 neg examples.
% Time to init learnOneClause: 0 seconds
% Old dirnull
Setting model dir

% Have 5 'raw' positive examples and kept 5.
% Have 21 'raw' negative examples and kept 21.

% processing backup's for father
%  POS EX = 5
%  NEG EX = 21

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/toy_father/train/models/
% Learning 10 trees in this iteration for father

% Learn model for: father
% Kept 5 of the 5 positive examples.
% Kept 10 of the 21 negative examples.
% Have prepared facts.
% Dataset size: 15
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 1 milliseconds

% Have these 10 positive seeds: 1 2 3 4 5 6 8 9 10 11

% LearnOneClause Parameters:
%   Targets (1):
%    father(+name, +name)
%  Modes (3):
%    male(+name),
%    childof(+name, +name),
%    siblingof(+name, -name)

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for male/1 with 13 assertions.
% [ LazyGroundClauseIndex ]  Building full index for childof/2 with 16 assertions.
% [ LazyGroundClauseIndex ]  Building full index for siblingof/2 with 12 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for siblingof/2.
%     Score = -3,200001 (regressionFit = 3,200000, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,200001): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,500001): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,428572 (regressionFit = 1,428571, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,428572): father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -3,055557 (regressionFit = 3,055556, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
Setting 0.5724346493852266 for 
 // Learned this clause on outer loop cycle #1.  It scores=-1,43 and has recall=0,46, precision=0,99, and F1=0,63 (using m-estimates).
 // It covers 46,7% of the positive examples, 7 of 15,
(father(A, B) :- childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 46,7% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,174020 (regressionFit = 1,174019, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,174020): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,850249 (regressionFit = 0,850248, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,850249): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,476467 (regressionFit = 1,476465, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
Setting 0.07193161040689888 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,85 and has recall=0,66, precision=0,99, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 10 of 15 (of which 5 are newly covered),
 // So far 12 (80,0%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 80,0% of the positive examples and NaN% of the negatives.}

% Have these 3 positive seeds: 9 10 12

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,036511 (regressionFit = 1,036510, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,036511): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,281392 (regressionFit = 1,281391, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
Setting -0.028370212980097526 for 
 // Learned this clause on outer loop cycle #3.  It scores=-1,04 and has recall=0,66, precision=0,99, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 10 of 15 (of which 2 are newly covered),
 // So far 14 (93,3%) of the positive examples have been covered.
(father(A, B) :- male(A))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 93,3% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.5724346493852266 to wgt = 0,5724 (father(A, B) :- childof(B, A))
Added 0.07193161040689888 to wgt = 0,0719 (father(_, A) :- male(A))
Added -0.028370212980097526 to wgt = -0,0284 (father(A, _) :- male(A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 1 trees is 13 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 4 of the 21 negative examples.
% Dataset size: 9
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 2 milliseconds

***** Warning: % Have only 9 positive examples, so cannot choose 10 of them. *****


% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,654274 (regressionFit = 1,654273, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,654274): father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]
%     Score = -0,000125 (regressionFit = 0,000124, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 5,0/9,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000125): father(A, B) :- childof(B, A).  [covers 5,0/9,0 pos, 0,0/0,0 neg]
%     Score = -1,624007 (regressionFit = 1,624006, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/9,0 pos, 0,0/0,0 neg]
Setting 0.7646412565925138 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,00012 and has recall=0,55, precision=0,98, and F1=0,70 (using m-estimates).
 // It covers 55,6% of the positive examples, 5 of 9,
(father(A, B) :- childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 5,0/9,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 55,6% of the positive examples and NaN% of the negatives.}

% Have these 4 positive seeds: 5 6 7 8

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,041988 (regressionFit = 0,041987, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,041988): father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]
%     Score = -0,042773 (regressionFit = 0,042772, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
Setting -0.04692777728440006 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,04 and has recall=0,66, precision=0,98, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 6 of 9 (of which 2 are newly covered),
 // So far 7 (77,8%) of the positive examples have been covered.
(father(A, B) :- male(A))

% On cycle #2, the best clause found is:
%      father(A, _) :- male(A).  [covers 6,0/9,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 77,8% of the positive examples and NaN% of the negatives.}

% Have these 2 positive seeds: 6 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]
%     Score = -0,060106 (regressionFit = 0,060105, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,060106): father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]
Setting -0.004919222965931817 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,06 and has recall=0,44, precision=0,98, and F1=0,61 (using m-estimates).
 // It covers 44,4% of the positive examples, 4 of 9 (of which 1 are newly covered),
 // So far 8 (88,9%) of the positive examples have been covered.
(father(A, B) :- siblingof(A, Anon373))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 4,0/9,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 88,9% of the positive examples and NaN% of the negatives.}

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 1 positive seeds: 7

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 9,0/9,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/9,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (10).

% ******************************************
adding regression values
Added 0.7646412565925138 to wgt = 0,7646 (father(A, B) :- childof(B, A))
Added -0.04692777728440006 to wgt = -0,0469 (father(A, _) :- male(A))
Added -0.004919222965931817 to wgt = -0,0049 (father(A, _) :- siblingof(A, _))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 2 trees is 46 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:2 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds

% Have these 9 positive seeds: 2 3 4 5 6 7 9 10 11

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,996948 (regressionFit = 1,996947, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,996948): father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -1,589825 (regressionFit = 1,589824, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,589825): father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,803331 (regressionFit = 0,803330, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,803331): father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -1,930697 (regressionFit = 1,930695, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
Setting 0.44941143492078567 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,80 and has recall=0,43, precision=0,98, and F1=0,59 (using m-estimates).
 // It covers 42,9% of the positive examples, 6 of 14,
(father(A, B) :- childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 42,9% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,866872 (regressionFit = 0,866871, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,866872): father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,563538 (regressionFit = 0,563537, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,563538): father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,804635 (regressionFit = 0,804634, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
Setting -0.002982049308409146 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,56 and has recall=0,78, precision=0,99, and F1=0,87 (using m-estimates).
 // It covers 78,6% of the positive examples, 11 of 14 (of which 6 are newly covered),
 // So far 12 (85,7%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 85,7% of the positive examples and NaN% of the negatives.}

% Have these 2 positive seeds: 9 10

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,872063 (regressionFit = 0,872062, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,872063): father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
Setting -0.08714630335704406 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,87 and has recall=0,78, precision=0,99, and F1=0,87 (using m-estimates).
 // It covers 78,6% of the positive examples, 11 of 14 (of which 1 are newly covered),
 // So far 13 (92,9%) of the positive examples have been covered.
(father(A, B) :- male(A))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 92,9% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.44941143492078567 to wgt = 0,4494 (father(A, B) :- childof(B, A))
Added -0.002982049308409146 to wgt = -0,0030 (father(_, A) :- male(A))
Added -0.08714630335704406 to wgt = -0,0871 (father(A, _) :- male(A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 3 trees is 62 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
% Dataset size: 16
Computing probabilities
prob time:3 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds

% Have these 9 positive seeds: 0 1 4 5 7 8 9 10 11

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,602008 (regressionFit = 1,602007, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,602008): father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,288490 (regressionFit = 1,288489, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,288490): father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,858634 (regressionFit = 0,858633, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,858634): father(A, B) :- childof(B, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,734563 (regressionFit = 1,734562, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
Setting 0.3518598038272726 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,86 and has recall=0,37, precision=0,98, and F1=0,54 (using m-estimates).
 // It covers 37,5% of the positive examples, 6 of 16,
(father(A, B) :- childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 37,5% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 9 10 11 12 13

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,768834 (regressionFit = 0,768833, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,768834): father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,669049 (regressionFit = 0,669048, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,669049): father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,914241 (regressionFit = 0,914240, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
Setting 0.0021859879875267426 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,67 and has recall=0,68, precision=0,99, and F1=0,81 (using m-estimates).
 // It covers 68,8% of the positive examples, 11 of 16 (of which 6 are newly covered),
 // So far 12 (75,0%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 75,0% of the positive examples and NaN% of the negatives.}

% Have these 4 positive seeds: 6 11 12 14

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,765158 (regressionFit = 0,765157, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,765158): father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,910270 (regressionFit = 0,910269, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
Setting -0.018074679673568884 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,77 and has recall=0,68, precision=0,99, and F1=0,81 (using m-estimates).
 // It covers 68,8% of the positive examples, 11 of 16 (of which 3 are newly covered),
 // So far 15 (93,8%) of the positive examples have been covered.
(father(A, B) :- male(A))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 93,8% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.3518598038272726 to wgt = 0,3519 (father(A, B) :- childof(B, A))
Added 0.0021859879875267426 to wgt = 0,0022 (father(_, A) :- male(A))
Added -0.018074679673568884 to wgt = -0,0181 (father(A, _) :- male(A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 4 trees is 79 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 5 of the 21 negative examples.
% Dataset size: 10
Computing probabilities
prob time:3 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds

% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,601277 (regressionFit = 0,601276, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,601277): father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,868804 (regressionFit = 0,868803, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,009886 (regressionFit = 1,009885, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,926489 (regressionFit = 0,926487, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,170080 (regressionFit = 0,170078, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,170080): father(A, B) :- male(B), childof(B, A).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,791424 (regressionFit = 0,791422, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,488108 (regressionFit = 0,488106, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,170080 (regressionFit = 0,170078, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,170080): father(A, B) :- childof(B, A), male(B).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,791424 (regressionFit = 0,791422, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,072026 (regressionFit = 1,072024, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,784272 (regressionFit = 0,784270, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,994323 (regressionFit = 0,994321, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,784272 (regressionFit = 0,784270, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for childof/2.
%     Score = -0,784272 (regressionFit = 0,784270, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,009887 (regressionFit = 1,009885, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for siblingof/2.
%     Score = -1,009887 (regressionFit = 1,009885, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,009887 (regressionFit = 1,009885, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,926489 (regressionFit = 0,926487, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,488108 (regressionFit = 0,488106, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,142113 (regressionFit = 1,142111, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 3,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
Setting 0.43638013340650755 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,17 and has recall=0,50, precision=0,98, and F1=0,66 (using m-estimates).
 // It covers 50,0% of the positive examples, 5 of 10,
(father(A, B) :- childof(B, A), male(B))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A), male(B).  [covers 5,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 50,0% of the positive examples and NaN% of the negatives.}

% Have these 5 positive seeds: 5 6 7 8 9

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,168337 (regressionFit = 0,168336, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,168337): father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,285525 (regressionFit = 0,285524, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,249789 (regressionFit = 0,249788, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,211931 (regressionFit = 0,211929, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,327635 (regressionFit = 0,327633, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,249932 (regressionFit = 0,249930, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,249790 (regressionFit = 0,249788, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,249790 (regressionFit = 0,249788, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,249790 (regressionFit = 0,249788, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,211931 (regressionFit = 0,211929, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,263079 (regressionFit = 0,263077, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 3,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
Setting -0.036871467735055764 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,17 and has recall=0,69, precision=0,99, and F1=0,81 (using m-estimates).
 // It covers 70,0% of the positive examples, 7 of 10 (of which 2 are newly covered),
 // So far 7 (70,0%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 7,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 70,0% of the positive examples and NaN% of the negatives.}

% Have these 3 positive seeds: 7 8 9

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,323261 (regressionFit = 0,323260, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,323261): father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,287641 (regressionFit = 0,287640, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,287641): father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,352918 (regressionFit = 0,352916, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 3,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,287684 (regressionFit = 0,287682, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,287642 (regressionFit = 0,287640, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,287642 (regressionFit = 0,287640, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,287642 (regressionFit = 0,287640, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,303584 (regressionFit = 0,303582, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 3,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
Setting -0.0018617279455770408 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,29 and has recall=0,40, precision=0,98, and F1=0,56 (using m-estimates).
 // It covers 40,0% of the positive examples, 4 of 10 (of which 1 are newly covered),
 // So far 8 (80,0%) of the positive examples have been covered.
(father(A, B) :- siblingof(A, Anon1545))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 80,0% of the positive examples and NaN% of the negatives.}

% Have these 2 positive seeds: 7 9

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -0,324325 (regressionFit = 0,324324, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,324325): father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
Setting -0.06564107438821108 for 
 // Learned this clause on outer loop cycle #4.  It scores=-0,32 and has recall=0,59, precision=0,98, and F1=0,74 (using m-estimates).
 // It covers 60,0% of the positive examples, 6 of 10 (of which 1 are newly covered),
 // So far 9 (90,0%) of the positive examples have been covered.
(father(A, B) :- childof(B, A))

% On cycle #4, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 90,0% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (4).

% ******************************************
adding regression values
Added 0.43638013340650755 to wgt = 0,4364 (father(A, B) :- childof(B, A), male(B))
Added -0.036871467735055764 to wgt = -0,0369 (father(_, A) :- male(A))
Added -0.0018617279455770408 to wgt = -0,0019 (father(A, _) :- siblingof(A, _))
Added -0.06564107438821108 to wgt = -0,0656 (father(A, B) :- childof(B, A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 5 trees is 126 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
% Dataset size: 16
Computing probabilities
prob time:5 milliseconds
No hidden examples for : father
Time to build dataset: 6 milliseconds

% Have these 9 positive seeds: 0 1 3 4 5 7 9 10 11

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 14,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,850864 (regressionFit = 0,850863, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,850864): father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,166960 (regressionFit = 1,166959, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,217569 (regressionFit = 1,217567, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,109240 (regressionFit = 1,109238, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,294538 (regressionFit = 0,294536, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,294538): father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,170433 (regressionFit = 1,170431, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,031354 (regressionFit = 1,031352, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,294538 (regressionFit = 0,294536, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,829881 (regressionFit = 0,829879, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,361732 (regressionFit = 1,361730, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,192051 (regressionFit = 1,192049, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,198725 (regressionFit = 1,198723, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,863262 (regressionFit = 0,863260, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,863262 (regressionFit = 0,863260, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,217570 (regressionFit = 1,217567, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,217569 (regressionFit = 1,217567, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,217570 (regressionFit = 1,217567, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,109240 (regressionFit = 1,109238, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,031354 (regressionFit = 1,031352, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,318740 (regressionFit = 1,318737, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
Setting 0.3575468122296505 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,29 and has recall=0,31, precision=0,98, and F1=0,47 (using m-estimates).
 // It covers 31,3% of the positive examples, 5 of 16,
(father(A, B) :- male(B), childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 31,3% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 9 10 11 12 13 14 15

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 14,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,260654 (regressionFit = 0,260653, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,260654): father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,427178 (regressionFit = 0,427177, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,377160 (regressionFit = 0,377159, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,315360 (regressionFit = 0,315358, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,378825 (regressionFit = 0,378822, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,518386 (regressionFit = 0,518384, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,474259 (regressionFit = 0,474256, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,380641 (regressionFit = 0,380639, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,377161 (regressionFit = 0,377159, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,377161 (regressionFit = 0,377159, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,377161 (regressionFit = 0,377159, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,420548 (regressionFit = 0,420546, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,315360 (regressionFit = 0,315358, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,420548 (regressionFit = 0,420546, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,397672 (regressionFit = 0,397670, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
Setting -0.0675592066103746 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,26 and has recall=0,68, precision=0,99, and F1=0,81 (using m-estimates).
 // It covers 68,8% of the positive examples, 11 of 16 (of which 6 are newly covered),
 // So far 11 (68,8%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 11,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 68,8% of the positive examples and NaN% of the negatives.}

% Have these 5 positive seeds: 6 10 13 14 15

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 14,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,547207 (regressionFit = 0,547206, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,547207): father(A, B) :- childof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,475911 (regressionFit = 0,475909, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,475911): father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,593037 (regressionFit = 0,593035, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,476470 (regressionFit = 0,476467, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,475912 (regressionFit = 0,475909, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,475911 (regressionFit = 0,475909, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,475911 (regressionFit = 0,475909, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,535072 (regressionFit = 0,535070, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,535072 (regressionFit = 0,535070, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,504746 (regressionFit = 0,504744, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
Setting -0.004414913462337478 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,48 and has recall=0,43, precision=0,99, and F1=0,60 (using m-estimates).
 // It covers 43,8% of the positive examples, 7 of 16 (of which 1 are newly covered),
 // So far 12 (75,0%) of the positive examples have been covered.
(father(A, B) :- siblingof(A, Anon2559))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 75,0% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (3).

% ******************************************
adding regression values
Added 0.3575468122296505 to wgt = 0,3575 (father(A, B) :- male(B), childof(B, A))
Added -0.0675592066103746 to wgt = -0,0676 (father(_, A) :- male(A))
Added -0.004414913462337478 to wgt = -0,0044 (father(A, _) :- siblingof(A, _))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 6 trees is 192 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:6 milliseconds
No hidden examples for : father
Time to build dataset: 6 milliseconds

% Have these 9 positive seeds: 1 2 3 4 5 6 9 11 12

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,765832 (regressionFit = 0,765831, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,765832): father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,594853 (regressionFit = 0,594852, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,594853): father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,611231 (regressionFit = 0,611230, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,868259 (regressionFit = 0,868257, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,733362 (regressionFit = 0,733360, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,171225 (regressionFit = 0,171223, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,171225): father(A, B) :- male(B), childof(B, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,730709 (regressionFit = 0,730707, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,344862 (regressionFit = 0,344860, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,171225 (regressionFit = 0,171223, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,832103 (regressionFit = 0,832101, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,733362 (regressionFit = 0,733360, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,344862 (regressionFit = 0,344860, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,816055 (regressionFit = 0,816052, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,795390 (regressionFit = 0,795387, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,589597 (regressionFit = 0,589595, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,869368 (regressionFit = 0,869365, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,819643 (regressionFit = 0,819641, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,819643 (regressionFit = 0,819641, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,868260 (regressionFit = 0,868257, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,868259 (regressionFit = 0,868257, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,868260 (regressionFit = 0,868257, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
Setting 0.29570558876011693 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,17 and has recall=0,35, precision=0,98, and F1=0,52 (using m-estimates).
 // It covers 35,7% of the positive examples, 5 of 14,
(father(A, B) :- male(B), childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 35,7% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 9 10 11 12 13

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,202337 (regressionFit = 0,202336, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,202337): father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,162888 (regressionFit = 0,162887, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,162888): father(_, A) :- male(A).  [covers 11,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,262619 (regressionFit = 0,262618, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,260436 (regressionFit = 0,260434, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,206396 (regressionFit = 0,206394, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,234571 (regressionFit = 0,234569, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,206396 (regressionFit = 0,206394, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,246708 (regressionFit = 0,246706, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183056 (regressionFit = 0,183053, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,078176 (regressionFit = 0,078174, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,078176): father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,226478 (regressionFit = 0,226475, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,276448 (regressionFit = 0,276446, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,276448 (regressionFit = 0,276446, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,260437 (regressionFit = 0,260434, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,260436 (regressionFit = 0,260434, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,260437 (regressionFit = 0,260434, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,260149 (regressionFit = 0,260147, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
Setting -0.015660194708458114 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,08 and has recall=0,35, precision=0,98, and F1=0,52 (using m-estimates).
 // It covers 35,7% of the positive examples, 5 of 14 (of which 2 are newly covered),
 // So far 7 (50,0%) of the positive examples have been covered.
(father(A, B) :- siblingof(A, Anon3169), male(B))

% On cycle #2, the best clause found is:
%      father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 50,0% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.29570558876011693 to wgt = 0,2957 (father(A, B) :- male(B), childof(B, A))
Added -0.015660194708458114 to wgt = -0,0157 (father(A, B) :- siblingof(A, _), male(B))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 7 trees is 246 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 10 of the 21 negative examples.
% Dataset size: 15
Computing probabilities
prob time:8 milliseconds
No hidden examples for : father
Time to build dataset: 8 milliseconds

% Have these 9 positive seeds: 0 1 2 3 4 5 7 8 9

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,895592 (regressionFit = 0,895591, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,895592): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,541009 (regressionFit = 0,541008, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,541009): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,881380 (regressionFit = 0,881379, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,936270 (regressionFit = 0,936269, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662801 (regressionFit = 0,662799, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,280151 (regressionFit = 0,280149, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,280151): father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,774020 (regressionFit = 0,774018, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,786174 (regressionFit = 0,786172, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,280151 (regressionFit = 0,280149, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,902409 (regressionFit = 0,902406, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662801 (regressionFit = 0,662799, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,786174 (regressionFit = 0,786172, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,820851 (regressionFit = 0,820848, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,820290 (regressionFit = 0,820288, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,617573 (regressionFit = 0,617571, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,927969 (regressionFit = 0,927967, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,915377 (regressionFit = 0,915375, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,915377 (regressionFit = 0,915375, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,936271 (regressionFit = 0,936269, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,936271 (regressionFit = 0,936269, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,936271 (regressionFit = 0,936269, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
Setting 0.24321308431767985 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,28 and has recall=0,33, precision=0,98, and F1=0,50 (using m-estimates).
 // It covers 33,3% of the positive examples, 5 of 15,
(father(A, B) :- male(B), childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 33,3% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 9 10 11 12 13

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,398013 (regressionFit = 0,398012, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,398013): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,244389 (regressionFit = 0,244387, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,244389): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,420755 (regressionFit = 0,420754, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,423736 (regressionFit = 0,423735, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,312704 (regressionFit = 0,312702, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,360799 (regressionFit = 0,360797, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,312704 (regressionFit = 0,312702, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,413317 (regressionFit = 0,413315, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,378444 (regressionFit = 0,378442, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,413317 (regressionFit = 0,413315, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,386663 (regressionFit = 0,386661, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,213139 (regressionFit = 0,213137, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,213139): father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,393570 (regressionFit = 0,393568, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,423737 (regressionFit = 0,423735, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,423737 (regressionFit = 0,423735, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,423737 (regressionFit = 0,423735, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
Setting -0.015552180016284329 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,21 and has recall=0,33, precision=0,98, and F1=0,50 (using m-estimates).
 // It covers 33,3% of the positive examples, 5 of 15 (of which 2 are newly covered),
 // So far 7 (46,7%) of the positive examples have been covered.
(father(A, B) :- siblingof(A, Anon3853), male(B))

% On cycle #2, the best clause found is:
%      father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 46,7% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.24321308431767985 to wgt = 0,2432 (father(A, B) :- male(B), childof(B, A))
Added -0.015552180016284329 to wgt = -0,0156 (father(A, B) :- siblingof(A, _), male(B))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 8 trees is 304 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 10 of the 21 negative examples.
% Dataset size: 15
Computing probabilities
prob time:8 milliseconds
No hidden examples for : father
Time to build dataset: 8 milliseconds

% Have these 9 positive seeds: 0 3 4 5 6 7 9 10 12

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,597884 (regressionFit = 0,597883, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,597884): father(A, _) :- male(A).  [covers 11,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,394199 (regressionFit = 0,394198, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,394199): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,444477 (regressionFit = 0,444476, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522594 (regressionFit = 0,522593, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,437180 (regressionFit = 0,437178, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,145971 (regressionFit = 0,145969, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,145971): father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,490192 (regressionFit = 0,490190, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,259272 (regressionFit = 0,259270, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), childof(B, A), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), childof(B, A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,259272 (regressionFit = 0,259270, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,512674 (regressionFit = 0,512671, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,519321 (regressionFit = 0,519319, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364031 (regressionFit = 0,364029, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,372616 (regressionFit = 0,372613, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), male(C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,364032 (regressionFit = 0,364029, penalties=3.04E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,562444 (regressionFit = 0,562441, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,497231 (regressionFit = 0,497228, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,388347 (regressionFit = 0,388343, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,388347 (regressionFit = 0,388343, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,490193 (regressionFit = 0,490190, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,490193 (regressionFit = 0,490190, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,490193 (regressionFit = 0,490190, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,259272 (regressionFit = 0,259270, penalties=2.920000000000001E-6) for clause:  father(A, B) :- childof(B, A), male(A), male(B).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), male(A), siblingof(A, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593681 (regressionFit = 0,593678, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,505409 (regressionFit = 0,505407, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524182 (regressionFit = 0,524179, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387311 (regressionFit = 0,387309, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387311 (regressionFit = 0,387309, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522595 (regressionFit = 0,522593, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522595 (regressionFit = 0,522593, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522595 (regressionFit = 0,522593, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,395896 (regressionFit = 0,395893, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), male(A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,395896 (regressionFit = 0,395893, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), male(C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), siblingof(C, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), siblingof(C, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,555520 (regressionFit = 0,555517, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,512448 (regressionFit = 0,512445, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), male(C).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,505410 (regressionFit = 0,505407, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,505410 (regressionFit = 0,505407, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,505410 (regressionFit = 0,505407, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593681 (regressionFit = 0,593678, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,505410 (regressionFit = 0,505407, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524182 (regressionFit = 0,524179, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387312 (regressionFit = 0,387309, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,610383 (regressionFit = 0,610380, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,548334 (regressionFit = 0,548331, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524183 (regressionFit = 0,524179, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522269 (regressionFit = 0,522266, penalties=3.04E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), male(C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=2.9400000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), childof(B, D).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(A, C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(B, D).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(D, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0500000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,610384 (regressionFit = 0,610380, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,548334 (regressionFit = 0,548331, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524183 (regressionFit = 0,524179, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524183 (regressionFit = 0,524179, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426396 (regressionFit = 0,426393, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.2500000000000006E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(B, C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(C, B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,522596 (regressionFit = 0,522593, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593681 (regressionFit = 0,593678, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,501136 (regressionFit = 0,501133, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387487 (regressionFit = 0,387484, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), childof(B, A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,387487 (regressionFit = 0,387484, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), childof(B, C).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524183 (regressionFit = 0,524179, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524182 (regressionFit = 0,524179, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,524183 (regressionFit = 0,524179, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,555520 (regressionFit = 0,555517, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593681 (regressionFit = 0,593678, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), male(B).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), childof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), childof(B, C).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593682 (regressionFit = 0,593678, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), male(A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593681 (regressionFit = 0,593678, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,593682 (regressionFit = 0,593678, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,550422 (regressionFit = 0,550419, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,516946 (regressionFit = 0,516943, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,550422 (regressionFit = 0,550419, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), childof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), childof(B, C).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,550423 (regressionFit = 0,550419, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,550422 (regressionFit = 0,550419, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,550422 (regressionFit = 0,550419, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
Setting 0.20588487343910128 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,15 and has recall=0,33, precision=0,98, and F1=0,50 (using m-estimates).
 // It covers 33,3% of the positive examples, 5 of 15,
(father(A, B) :- male(B), childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 33,3% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 9 10 11 12 13

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,234133 (regressionFit = 0,234132, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,234133): father(A, _) :- male(A).  [covers 11,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,164295 (regressionFit = 0,164294, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,164295): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206121 (regressionFit = 0,206120, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,183827 (regressionFit = 0,183825, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,202082 (regressionFit = 0,202080, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,208411 (regressionFit = 0,208408, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,289470 (regressionFit = 0,289467, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,200555 (regressionFit = 0,200552, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,202083 (regressionFit = 0,202080, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,202083 (regressionFit = 0,202080, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,202083 (regressionFit = 0,202080, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292993 (regressionFit = 0,292991, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,250674 (regressionFit = 0,250671, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205563 (regressionFit = 0,205561, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206122 (regressionFit = 0,206120, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206122 (regressionFit = 0,206120, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206122 (regressionFit = 0,206120, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,219924 (regressionFit = 0,219921, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,250674 (regressionFit = 0,250671, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,363518 (regressionFit = 0,363515, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,339899 (regressionFit = 0,339896, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206669 (regressionFit = 0,206666, penalties=3.04E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), male(C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(A, C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(B, D).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(D, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0500000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,363518 (regressionFit = 0,363515, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), male(A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,339899 (regressionFit = 0,339896, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,205564 (regressionFit = 0,205561, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.2500000000000006E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(B, C).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, A).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(C, B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,206123 (regressionFit = 0,206120, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,214645 (regressionFit = 0,214642, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,249270 (regressionFit = 0,249267, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,214645 (regressionFit = 0,214642, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,214646 (regressionFit = 0,214642, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,214645 (regressionFit = 0,214642, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,214645 (regressionFit = 0,214642, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,290532 (regressionFit = 0,290529, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), male(A).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,249146 (regressionFit = 0,249143, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), male(C).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,250675 (regressionFit = 0,250671, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,250674 (regressionFit = 0,250671, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,250674 (regressionFit = 0,250671, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,290532 (regressionFit = 0,290529, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), male(B).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), male(B).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(A, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), male(A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, A).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(B, C).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, _).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(C, B).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,292994 (regressionFit = 0,292991, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
Setting -0.06019488688878701 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,16 and has recall=0,66, precision=0,99, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 10 of 15 (of which 5 are newly covered),
 // So far 10 (66,7%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 66,7% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.20588487343910128 to wgt = 0,2059 (father(A, B) :- male(B), childof(B, A))
Added -0.06019488688878701 to wgt = -0,0602 (father(_, A) :- male(A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 9 trees is 593 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
% Dataset size: 16
Computing probabilities
prob time:9 milliseconds
No hidden examples for : father
Time to build dataset: 9 milliseconds

% Have these 9 positive seeds: 0 1 2 4 5 6 7 8 9

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,872655 (regressionFit = 0,872654, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,872655): father(A, _) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,472485 (regressionFit = 0,472484, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,472485): father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,011604 (regressionFit = 1,011603, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969430 (regressionFit = 0,969429, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,676022 (regressionFit = 0,676020, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,410869 (regressionFit = 0,410867, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,410869): father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,810132 (regressionFit = 0,810130, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,561121 (regressionFit = 0,561119, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), childof(B, A), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,699128 (regressionFit = 0,699125, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), childof(B, A), siblingof(A, _).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,561121 (regressionFit = 0,561119, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,069661 (regressionFit = 1,069658, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,811495 (regressionFit = 0,811493, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,862267 (regressionFit = 0,862264, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), childof(B, A).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,862267 (regressionFit = 0,862264, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), childof(B, C).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,810133 (regressionFit = 0,810130, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,810132 (regressionFit = 0,810130, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,810133 (regressionFit = 0,810130, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,851594 (regressionFit = 0,851592, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889114 (regressionFit = 0,889112, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,561121 (regressionFit = 0,561119, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(A), childof(B, A), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(A), childof(B, A), siblingof(A, _).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), childof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), childof(B, C).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,889115 (regressionFit = 0,889112, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949776 (regressionFit = 0,949774, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,665910 (regressionFit = 0,665908, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953541 (regressionFit = 0,953539, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041857 (regressionFit = 1,041855, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041857 (regressionFit = 1,041855, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969431 (regressionFit = 0,969429, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969431 (regressionFit = 0,969429, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969431 (regressionFit = 0,969429, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,667273 (regressionFit = 0,667271, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), male(C).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,731202 (regressionFit = 0,731199, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), childof(B, A).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,731202 (regressionFit = 0,731199, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), childof(B, C).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,665911 (regressionFit = 0,665908, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,665910 (regressionFit = 0,665908, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,665911 (regressionFit = 0,665908, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), childof(B, A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), childof(B, C).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,667273 (regressionFit = 0,667271, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,012863 (regressionFit = 1,012860, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,012863 (regressionFit = 1,012860, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949777 (regressionFit = 0,949774, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,665910 (regressionFit = 0,665908, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041730 (regressionFit = 1,041727, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,725380 (regressionFit = 0,725377, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,974115 (regressionFit = 0,974112, penalties=3.04E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), male(C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=2.9400000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), childof(B, D).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(A, C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0500000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041730 (regressionFit = 1,041727, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,725380 (regressionFit = 0,725377, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,953542 (regressionFit = 0,953539, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,120217 (regressionFit = 1,120214, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.2500000000000006E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(B, C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(C, B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,969432 (regressionFit = 0,969429, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,954986 (regressionFit = 0,954984, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,547846 (regressionFit = 0,547843, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(B).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,949263 (regressionFit = 0,949259, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), male(C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,954987 (regressionFit = 0,954984, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,954987 (regressionFit = 0,954984, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,954987 (regressionFit = 0,954984, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,954987 (regressionFit = 0,954984, penalties=3.04E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,731202 (regressionFit = 0,731199, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(B).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,036133 (regressionFit = 1,036130, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), childof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), male(A).  [covers 2,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,731202 (regressionFit = 0,731199, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), male(B).  [covers 3,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,036133 (regressionFit = 1,036130, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), male(C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), childof(B, C).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), siblingof(C, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -1,041858 (regressionFit = 1,041855, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, A), siblingof(C, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
Setting 0.18310111391114628 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,41 and has recall=0,31, precision=0,98, and F1=0,47 (using m-estimates).
 // It covers 31,3% of the positive examples, 5 of 16,
(father(A, B) :- male(B), childof(B, A))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 31,3% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 10 11 12 13 14

% target           = father(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 16,0/16,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,515899 (regressionFit = 0,515898, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,515899): father(A, _) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,289864 (regressionFit = 0,289863, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,289864): father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,571032 (regressionFit = 0,571031, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583393 (regressionFit = 0,583392, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,404721 (regressionFit = 0,404719, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,482760 (regressionFit = 0,482758, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,758316 (regressionFit = 0,758313, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,482106 (regressionFit = 0,482103, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,482761 (regressionFit = 0,482758, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,482761 (regressionFit = 0,482758, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,482761 (regressionFit = 0,482758, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,575681 (regressionFit = 0,575679, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526747 (regressionFit = 0,526745, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,526748 (regressionFit = 0,526745, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613862 (regressionFit = 0,613860, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,361620 (regressionFit = 0,361618, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554013 (regressionFit = 0,554011, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,360966 (regressionFit = 0,360963, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), male(C).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,361621 (regressionFit = 0,361618, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(A, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(B), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,361621 (regressionFit = 0,361618, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, A).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,361621 (regressionFit = 0,361618, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(B), siblingof(C, _).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,360966 (regressionFit = 0,360963, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,361621 (regressionFit = 0,361618, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,765037 (regressionFit = 0,765034, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,498809 (regressionFit = 0,498806, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,595615 (regressionFit = 0,595612, penalties=3.04E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), male(C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(A, C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(B, D).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(D, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0500000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,765038 (regressionFit = 0,765034, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), male(A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,498809 (regressionFit = 0,498806, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), male(B).  [covers 6,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,554014 (regressionFit = 0,554011, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), male(B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.2500000000000006E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), siblingof(A, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(B, C).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, A).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583394 (regressionFit = 0,583392, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(C, B).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,583395 (regressionFit = 0,583392, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, _).  [covers 7,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), male(B).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(A, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), male(A), siblingof(A, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, A).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(B, C).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), male(A), siblingof(B, _).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, A).  [covers 4,0/16,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(A), siblingof(C, B).  [covers 1,0/16,0 pos, 0,0/0,0 neg]
%     Score = -0,613863 (regressionFit = 0,613860, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(A), siblingof(B, _).  [covers 4,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
Setting -0.05396222093401072 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,29 and has recall=0,62, precision=0,99, and F1=0,76 (using m-estimates).
 // It covers 62,5% of the positive examples, 10 of 16 (of which 5 are newly covered),
 // So far 10 (62,5%) of the positive examples have been covered.
(father(A, B) :- male(B))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/16,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 62,5% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.18310111391114628 to wgt = 0,1831 (father(A, B) :- male(B), childof(B, A))
Added -0.05396222093401072 to wgt = -0,0540 (father(_, A) :- male(A))
% Saving model in: data/toy_father/train/models/bRDNs/father.model.ckpt
% Saving model in: data/toy_father/train/models/bRDNs/father.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for father.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
father(A, B, Total) :- // A general accessor. 
   father(A, B, 1000000, Total), !.
father(A, B, Total) :- waitHere("This should not fail", father(A, B, Total)).

father(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_father_tree1(A, B, TreesToUse, Total1),
   getScore_father_tree2(A, B, TreesToUse, Total2),
   getScore_father_tree3(A, B, TreesToUse, Total3),
   getScore_father_tree4(A, B, TreesToUse, Total4),
   getScore_father_tree5(A, B, TreesToUse, Total5),
   getScore_father_tree6(A, B, TreesToUse, Total6),
   getScore_father_tree7(A, B, TreesToUse, Total7),
   getScore_father_tree8(A, B, TreesToUse, Total8),
   getScore_father_tree9(A, B, TreesToUse, Total9),
   getScore_father_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
father(A, B, TreesToUse, Total) :- waitHere("This should not fail", father(A, B, TreesToUse, Total)).

getScore_father_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_father_tree1(A, B, TreesToUse, Total1) :- father_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_father_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_father_tree2(A, B, TreesToUse, Total2) :- father_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_father_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_father_tree3(A, B, TreesToUse, Total3) :- father_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_father_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_father_tree4(A, B, TreesToUse, Total4) :- father_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_father_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_father_tree5(A, B, TreesToUse, Total5) :- father_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_father_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_father_tree6(A, B, TreesToUse, Total6) :- father_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_father_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_father_tree7(A, B, TreesToUse, Total7) :- father_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_father_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_father_tree8(A, B, TreesToUse, Total8) :- father_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_father_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_father_tree9(A, B, TreesToUse, Total9) :- father_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_father_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_father_tree10(A, B, TreesToUse, Total10) :- father_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).
% Time taken to learn model for 'father': 878 milliseconds.
% Saving model in: data/toy_father/train/models/bRDNs/father.model
cached groundings hit: 0
Misses: 0

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Total learning time (10 trees): 940 milliseconds.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/toy_father/test/test_pos.txt, data/toy_father/test/test_neg.txt, data/toy_father/test/test_bk.txt, data/toy_father/test/test_facts.txt]
%  for N=0: args[N]=data/toy_father/test/test_pos.txt

% getInputArgWithDefaultValue: args=[data/toy_father/test/test_pos.txt, data/toy_father/test/test_neg.txt, data/toy_father/test/test_bk.txt, data/toy_father/test/test_facts.txt]
%  for N=1: args[N]=data/toy_father/test/test_neg.txt

% getInputArgWithDefaultValue: args=[data/toy_father/test/test_pos.txt, data/toy_father/test/test_neg.txt, data/toy_father/test/test_bk.txt, data/toy_father/test/test_facts.txt]
%  for N=2: args[N]=data/toy_father/test/test_bk.txt

% getInputArgWithDefaultValue: args=[data/toy_father/test/test_pos.txt, data/toy_father/test/test_neg.txt, data/toy_father/test/test_bk.txt, data/toy_father/test/test_facts.txt]
%  for N=3: args[N]=data/toy_father/test/test_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 11 facts.
% Have read 3 examples from 'data/toy_father/test' [data/toy_father/test/test*].
% Have read 4 examples from 'data/toy_father/test' [data/toy_father/test/test*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 father(A, B)
%  targetPred:                father/2
%  targetArgTypes:            signature = [const, const], types = [+name, +name]
%  targets:                   [father(A, B)]
%  targetPredicates:          [father/2]
%  targetArgSpecs:            [[A[+name], B[+name]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 0 seconds

% Read 3 pos examples and 4 neg examples.
% Time to init learnOneClause: 0 seconds
% Old dirdata/toy_father/train/models/

% Have 3 'raw' positive examples and kept 3.
% Have 4 'raw' negative examples and kept 4.

% processing backup's for father
%  POS EX = 3
%  NEG EX = 4

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0

% Getting bRDN's target predicates.
% Did not learn a model for 'father' this run.
%   loadModel (#0): data/toy_father/train/models/bRDNs/Trees/fatherTree0.tree
%   loadModel (#1): data/toy_father/train/models/bRDNs/Trees/fatherTree1.tree
%   loadModel (#2): data/toy_father/train/models/bRDNs/Trees/fatherTree2.tree
%   loadModel (#3): data/toy_father/train/models/bRDNs/Trees/fatherTree3.tree
%   loadModel (#4): data/toy_father/train/models/bRDNs/Trees/fatherTree4.tree
%   loadModel (#5): data/toy_father/train/models/bRDNs/Trees/fatherTree5.tree
%   loadModel (#6): data/toy_father/train/models/bRDNs/Trees/fatherTree6.tree
%   loadModel (#7): data/toy_father/train/models/bRDNs/Trees/fatherTree7.tree
%   loadModel (#8): data/toy_father/train/models/bRDNs/Trees/fatherTree8.tree
%   loadModel (#9): data/toy_father/train/models/bRDNs/Trees/fatherTree9.tree
%  Done loading 10 models.

% for father |lookupPos| = 3
% for father |lookupNeg| = 4
% getJointExamples: |pos| = 3, |neg| = 4

% Starting inference in bRDN.

% Subsampling the negative examples.
% Trees = 10
% [ LazyGroundClauseIndex ]  Building full index for childof/2 with 6 assertions.
% [ LazyGroundClauseIndex ]  Building full index for male/1 with 3 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for siblingof/2.
 (Arithmetic) Mean Probability Assigned to Correct Output Class: 6,054/7,00 = 0,864824

 The weighted count of positive examples = 3,000 and the weighted count of negative examples = 4,000

printExamples: Writing out predictions (for Tuffy?) on 7 examples for 'father' to:
  data/toy_father/test/results_father.db
 and to:
  data/toy_father/test/query_father.db

% Computing Area Under Curves.
%Pos=3
%Neg=4
%LL:-0.4510628676118842
%LL:-1.0169183978466674
Best F1 = 1.0
% F1 = 1.0
% Threshold = 0.502817801122625

%   AUC ROC   = 1,000000
%   AUC PR    = 1,000000
%   CLL	      = -0,145274
%   Precision = 1,000000 at threshold = 0,500
%   Recall    = 1,000000
%   F1        = 1,000000

% Total inference time (10 trees): 39 milliseconds.
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
