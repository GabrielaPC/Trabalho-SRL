<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="edu.wisc.cs.will.UWCSERDNTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2022-10-20T17:10:40" hostname="Ubuntu" time="5.395">
  <properties/>
  <testcase name="testUWCSELearnInfer()" classname="edu.wisc.cs.will.UWCSERDNTest" time="5.395"/>
  <system-out><![CDATA[
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/train/train_pos.txt, data/uwcse/fold1/train/train_neg.txt, data/uwcse/fold1/train/train_bk.txt, data/uwcse/fold1/train/train_facts.txt]
%  for N=0: args[N]=data/uwcse/fold1/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/train/train_pos.txt, data/uwcse/fold1/train/train_neg.txt, data/uwcse/fold1/train/train_bk.txt, data/uwcse/fold1/train/train_facts.txt]
%  for N=1: args[N]=data/uwcse/fold1/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/train/train_pos.txt, data/uwcse/fold1/train/train_neg.txt, data/uwcse/fold1/train/train_bk.txt, data/uwcse/fold1/train/train_facts.txt]
%  for N=2: args[N]=data/uwcse/fold1/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/train/train_pos.txt, data/uwcse/fold1/train/train_neg.txt, data/uwcse/fold1/train/train_bk.txt, data/uwcse/fold1/train/train_facts.txt]
%  for N=3: args[N]=data/uwcse/fold1/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 2.095 facts.
% Have read 97 examples from 'data/uwcse/fold1/train' [data/uwcse/fold1/train/train*].
% Have read 52.344 examples from 'data/uwcse/fold1/train' [data/uwcse/fold1/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 advisedby(A, B)
%  targetPred:                advisedby/2
%  targetArgTypes:            signature = [const, const], types = [+person, +person]
%  targets:                   [advisedby(A, B)]
%  targetPredicates:          [advisedby/2]
%  targetArgSpecs:            [[A[+person], B[+person]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 136 milliseconds

% Read 97 pos examples and 52.344 neg examples.
% Time to init learnOneClause: 143 milliseconds
% Old dirnull
Setting model dir

% Have 97 'raw' positive examples and kept 97.
% Have 52.344 'raw' negative examples and kept 52.344.

% processing backup's for advisedby
%  POS EX = 97
%  NEG EX = 52.344

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/uwcse/fold1/train/models/
% Learning 10 trees in this iteration for advisedby

% Learn model for: advisedby
% Kept 97 of the 97 positive examples.
% Kept 225 of the 52.344 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21049535125959645
Set score:0.0025
% Dataset size: 322
Computing probabilities
prob time:1 milliseconds
No hidden examples for : advisedby
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21049535125959784
Set score:0.0025

% Have these 10 positive seeds: 3 4 114 134 140 147 155 185 205 218

% LearnOneClause Parameters:
%   Targets (1):
%    advisedby(+person, +person)
%  Modes (22):
%    courselevel(+course, #level),
%    courselevel(+course, +level),
%    hasposition(+person, #position),
%    inphase(+person, #phase),
%    professor(+person),
%    projectmember(-project, +person),
%    projectmember(+project, -person),
%    publication(-title, +person),
%    publication(+title, -person),
%    samecourse(+course, +course),
%    sameperson(+person, +person),
%    sameproject(+project, +project),
%    student(+person),
%    ta(-course, +person, -quarter),
%    ta(+course, -person, +quarter),
%    ta(+course, +person, -quarter),
%    taughtby(-course, +person, -quarter),
%    taughtby(+course, -person, +quarter),
%    taughtby(+course, +person, -quarter),
%    tempadvisedby(-person, +person),
%    tempadvisedby(+person, -person),
%    yearsinprogram(+person, #integer)

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 322,0/322,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 322,0/322,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for hasposition/2.
% [ LazyGroundClauseIndex ]  Building full index for hasposition/2 with 43 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for inphase/2.
% [ LazyGroundClauseIndex ]  Building full index for inphase/2 with 119 assertions.
% [ LazyGroundClauseIndex ]  Building full index for professor/1 with 49 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for projectmember/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for publication/2.
% [ LazyGroundClauseIndex ]  Building full index for sameperson/2 with 229 assertions.
% [ LazyGroundClauseIndex ]  Building full index for student/1 with 180 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for ta/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for taughtby/3.
% [ LazyGroundClauseIndex ]  Building full index for tempadvisedby/2 with 29 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for tempadvisedby/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for tempadvisedby/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for yearsinprogram/2.
% [ LazyGroundClauseIndex ]  Building full index for yearsinprogram/2 with 119 assertions.
%     Score = -64,555174 (regressionFit = 64,555172, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 32,0/322,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,555174): advisedby(A, _) :- hasposition(A, faculty).  [covers 32,0/322,0 pos, 0,0/0,0 neg]
%     Score = -67,766668 (regressionFit = 67,766667, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 12,0/322,0 pos, 0,0/0,0 neg]
%     Score = -28,691395 (regressionFit = 28,691394, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,691395): advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]
%     Score = -64,220787 (regressionFit = 64,220786, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 78,0/322,0 pos, 0,0/0,0 neg]
%     Score = -67,778750 (regressionFit = 67,778749, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 36,0/322,0 pos, 0,0/0,0 neg]
%     Score = -62,960458 (regressionFit = 62,960457, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 99,0/322,0 pos, 0,0/0,0 neg]
%     Score = -64,101400 (regressionFit = 64,101399, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 36,0/322,0 pos, 0,0/0,0 neg]
%     Score = -63,752651 (regressionFit = 63,752650, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 39,0/322,0 pos, 0,0/0,0 neg]
%     Score = -62,909421 (regressionFit = 62,909420, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 46,0/322,0 pos, 0,0/0,0 neg]
%     Score = -32,110346 (regressionFit = 32,110345, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 145,0/322,0 pos, 0,0/0,0 neg]
%     Score = -66,362361 (regressionFit = 66,362360, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 144,0/322,0 pos, 0,0/0,0 neg]
%     Score = -52,190477 (regressionFit = 52,190476, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 168,0/322,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 322,0/322,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 322,0/322,0 pos, 0,0/0,0 neg]
%     Score = -62,909421 (regressionFit = 62,909420, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 276,0/322,0 pos, 0,0/0,0 neg]
%     Score = -32,110346 (regressionFit = 32,110345, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 177,0/322,0 pos, 0,0/0,0 neg]
%     Score = -67,652199 (regressionFit = 67,652198, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 140,0/322,0 pos, 0,0/0,0 neg]
%     Score = -55,550662 (regressionFit = 55,550661, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 95,0/322,0 pos, 0,0/0,0 neg]
%     Score = -65,588657 (regressionFit = 65,588656, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 48,0/322,0 pos, 0,0/0,0 neg]
%     Score = -35,838486 (regressionFit = 35,838485, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 133,0/322,0 pos, 0,0/0,0 neg]
%     Score = -66,049343 (regressionFit = 66,049342, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 18,0/322,0 pos, 0,0/0,0 neg]
%     Score = -48,274584 (regressionFit = 48,274583, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 77,0/322,0 pos, 0,0/0,0 neg]
%     Score = -66,049343 (regressionFit = 66,049342, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 18,0/322,0 pos, 0,0/0,0 neg]
%     Score = -65,105086 (regressionFit = 65,105085, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 27,0/322,0 pos, 0,0/0,0 neg]
%     Score = -67,685338 (regressionFit = 67,685337, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 13,0/322,0 pos, 0,0/0,0 neg]
%     Score = -66,819854 (regressionFit = 66,819853, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 16,0/322,0 pos, 0,0/0,0 neg]
%     Score = -67,729970 (regressionFit = 67,729968, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_9).  [covers 5,0/322,0 pos, 0,0/0,0 neg]
%     Score = -65,319866 (regressionFit = 65,319865, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 25,0/322,0 pos, 0,0/0,0 neg]
%     Score = -65,636668 (regressionFit = 65,636667, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 22,0/322,0 pos, 0,0/0,0 neg]
%     Score = -64,996600 (regressionFit = 64,996599, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 28,0/322,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]
Comparing variance: 0.18430901772473882 to score=0.0025 #egs=119.0
Comparing variance: 0.03329369797859688 to score=0.0025 #egs=203.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 119,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,184309)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,184309) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 203,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,033294)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,033294) into the LAST position (#2) in the search queue.

% Time for loop #1: 88 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/322,0 pos, 0,0/0,0 neg]
% This clause covers 119 positive examples, of which 119 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/119,0 pos, 0,0/0,0 neg]'
%     Score = -28,691395 (regressionFit = 28,691394, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/119,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 48 60 64 66 76 80 82 87 106 114
%     Score = -20,514708 (regressionFit = 20,514706, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 51,0/119,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -20,514708): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 51,0/119,0 pos, 0,0/0,0 neg]
%     Score = -20,777246 (regressionFit = 20,777244, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 39,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,930336 (regressionFit = 21,930334, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 13,0/119,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 119,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,746034 (regressionFit = 21,746032, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 63,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,825547 (regressionFit = 21,825545, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 119,0/119,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 119,0/119,0 pos, 0,0/0,0 neg]
%     Score = -18,318586 (regressionFit = 18,318584, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,318586): advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,909857 (regressionFit = 21,909855, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 50,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,932611 (regressionFit = 21,932609, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 115,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,899402 (regressionFit = 21,899399, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 74,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,448513 (regressionFit = 21,448511, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 25,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,140189 (regressionFit = 21,140187, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 12,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,622809 (regressionFit = 21,622807, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_7).  [covers 5,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,613931 (regressionFit = 21,613929, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 27,0/119,0 pos, 0,0/0,0 neg]
%     Score = -21,382186 (regressionFit = 21,382184, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_1).  [covers 3,0/119,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,184.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1621113634583774 to score=0.0025 #egs=113.0
Comparing variance: -6.938893903907228E-18 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 113,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,162111)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,162111) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6,0 < 2.1 * minPosCov = 6,3

% Time for loop #2: 48 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/119,0 pos, 0,0/0,0 neg]
% This clause covers 113 positive examples, of which 113 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/113,0 pos, 0,0/0,0 neg]'
%     Score = -18,318586 (regressionFit = 18,318584, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/113,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 25 37 50 60 64 68 70 71 82
%     Score = -17,711368 (regressionFit = 17,711365, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 39,0/113,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,711368): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 39,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,307695 (regressionFit = 18,307692, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, pre_quals).  [covers 13,0/113,0 pos, 0,0/0,0 neg]
%     Score = -17,632830 (regressionFit = 17,632827, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 51,0/113,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,632830): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 51,0/113,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), professor(B).  [covers 113,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,318522 (regressionFit = 18,318519, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), projectmember(_, B).  [covers 5,0/113,0 pos, 0,0/0,0 neg]
%     Score = -17,568925 (regressionFit = 17,568922, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,568925): advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,260253 (regressionFit = 18,260250, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, B).  [covers 102,0/113,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(A, A).  [covers 113,0/113,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(B, B).  [covers 113,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,032702 (regressionFit = 18,032698, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 50,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,101855 (regressionFit = 18,101852, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, A, _).  [covers 5,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,309636 (regressionFit = 18,309633, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, B, _).  [covers 109,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,227703 (regressionFit = 18,227700, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), tempadvisedby(_, B).  [covers 71,0/113,0 pos, 0,0/0,0 neg]
%     Score = -17,994561 (regressionFit = 17,994558, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_3).  [covers 15,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,094549 (regressionFit = 18,094545, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 25,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,209736 (regressionFit = 18,209733, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_5).  [covers 27,0/113,0 pos, 0,0/0,0 neg]
%     Score = -17,762379 (regressionFit = 17,762376, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_6).  [covers 12,0/113,0 pos, 0,0/0,0 neg]
%     Score = -18,101855 (regressionFit = 18,101852, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_7).  [covers 5,0/113,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,162.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10772545398584199 to score=0.0025 #egs=57.0
Comparing variance: 0.20408163265306184 to score=0.0025 #egs=56.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 56,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,204082)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/113,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,204082) into position #1 in the search queue (new size=2).

% Time for loop #3: 62 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/113,0 pos, 0,0/0,0 neg]
% This clause covers 57 positive examples, of which 57 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/56,0 pos, 0,0/0,0 neg]'
%     Score = -18,318586 (regressionFit = 18,318584, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 6 13 29 33 34 36 40 45 51 52
%     Score = -9,700003 (regressionFit = 9,700000, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,700003): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]
%     Score = -10,952849 (regressionFit = 10,952846, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 15,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,426266 (regressionFit = 11,426263, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, pre_quals).  [covers 11,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), professor(B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,423080 (regressionFit = 11,423077, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, B).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(A, A).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -10,901664 (regressionFit = 10,901660, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 29,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,421387 (regressionFit = 11,421384, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, B, _).  [covers 53,0/56,0 pos, 0,0/0,0 neg]
%     Score = -10,855559 (regressionFit = 10,855556, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), tempadvisedby(_, B).  [covers 36,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), tempadvisedby(A, _).  [covers 2,0/56,0 pos, 0,0/0,0 neg]
%     Score = -9,904765 (regressionFit = 9,904762, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_3).  [covers 14,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,101658 (regressionFit = 11,101655, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 9,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,265309 (regressionFit = 11,265306, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_5).  [covers 7,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,076926 (regressionFit = 11,076923, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_6).  [covers 4,0/56,0 pos, 0,0/0,0 neg]
%     Score = -11,423080 (regressionFit = 11,423077, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_2).  [covers 4,0/56,0 pos, 0,0/0,0 neg]
%     Score = -10,968557 (regressionFit = 10,968553, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_1).  [covers 3,0/56,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,204.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 39 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 20,0/56,0 pos, 0,0/0,0 neg]
% This clause covers 20 positive examples, of which 20 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 8 14 34 40 79 93 135 139 173 195

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 203,0/203,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 203,0/203,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty_emeritus).  [covers 2,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,723165 (regressionFit = 6,723164, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 26,0/203,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,723165): advisedby(A, _) :- hasposition(A, faculty).  [covers 26,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,671671 (regressionFit = 6,671670, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 39,0/203,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,671671): advisedby(A, _) :- inphase(A, post_quals).  [covers 39,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,709275 (regressionFit = 6,709274, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 48,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,701221 (regressionFit = 6,701220, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 39,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,706588 (regressionFit = 6,706587, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 36,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,691825 (regressionFit = 6,691824, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 44,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,699388 (regressionFit = 6,699387, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 40,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,728700 (regressionFit = 6,728699, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 81,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,674326 (regressionFit = 6,674325, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 61,0/203,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 203,0/203,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 203,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,699388 (regressionFit = 6,699387, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 163,0/203,0 pos, 0,0/0,0 neg]
%     Score = -5,115386 (regressionFit = 5,115385, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,115386): advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,734318 (regressionFit = 6,734317, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 90,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,546298 (regressionFit = 6,546296, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 95,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,703032 (regressionFit = 6,703030, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 38,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,742106 (regressionFit = 6,742105, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 13,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,721592 (regressionFit = 6,721591, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 27,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,739363 (regressionFit = 6,739362, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 15,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,283055 (regressionFit = 6,283054, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 24,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,738096 (regressionFit = 6,738095, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 14,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,721592 (regressionFit = 6,721591, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 11,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,736560 (regressionFit = 6,736559, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 17,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,724720 (regressionFit = 6,724719, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 25,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,729283 (regressionFit = 6,729282, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 22,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,753770 (regressionFit = 6,753769, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_12).  [covers 4,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,737969 (regressionFit = 6,737968, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 16,0/203,0 pos, 0,0/0,0 neg]
%     Score = -6,752526 (regressionFit = 6,752525, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_7).  [covers 5,0/203,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,033.
% Will extend: advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]
Comparing variance: -1.9068237259098733E-16 to score=0.0025 #egs=177.0
Comparing variance: 0.19674556213017763 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,196746)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,196746) into the LAST position (#1) in the search queue.

% Time for loop #5: 46 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(_, A) :- student(A).  [covers 177,0/203,0 pos, 0,0/0,0 neg]
% This clause covers 177 positive examples, of which 177 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 0 1 2 5 12 13 15 20

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -5,023811 (regressionFit = 5,023810, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 12,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,023811): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 12,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,579711 (regressionFit = 4,579710, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_affiliate).  [covers 3,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,579711): advisedby(_, A) :- hasposition(A, faculty_affiliate).  [covers 3,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,022728 (regressionFit = 4,022727, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,022728): advisedby(A, _) :- inphase(A, post_quals).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,872182 (regressionFit = 4,872180, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 7,0/26,0 pos, 0,0/0,0 neg]
%     Score = -5,033334 (regressionFit = 5,033333, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,772728 (regressionFit = 4,772727, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,500001 (regressionFit = 4,500000, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 8,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,500001 (regressionFit = 4,500000, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 8,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,772728 (regressionFit = 4,772727, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 22,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,769232 (regressionFit = 4,769231, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 13,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,945456 (regressionFit = 4,945455, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 15,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,579711 (regressionFit = 4,579710, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 3,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,772729 (regressionFit = 4,772727, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -2,590910 (regressionFit = 2,590909, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,590910): advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 1,0/26,0 pos, 0,0/0,0 neg]
%     Score = -4,869566 (regressionFit = 4,869565, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 3,0/26,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,197.
% Will extend: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=4.0
Comparing variance: 0.11776859504132217 to score=0.0025 #egs=22.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 22,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,117769)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,117769) into the LAST position (#1) in the search queue.

% Time for loop #6: 42 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 4,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 5 10 11 12 13 15 17 18

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 22,0/22,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 22,0/22,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty_adjunct).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,581198 (regressionFit = 2,581197, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,581198): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,564707 (regressionFit = 2,564706, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,564707): advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,470589 (regressionFit = 2,470588, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,470589): advisedby(A, _) :- inphase(A, pre_quals).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,270834 (regressionFit = 2,270833, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,270834): advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,564707 (regressionFit = 2,564706, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,270835 (regressionFit = 2,270833, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  advisedby(A, B) :- sameperson(A, B).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  advisedby(A, B) :- sameperson(B, A).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 18,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,516668 (regressionFit = 2,516667, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 12,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,589287 (regressionFit = 2,589286, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 14,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,526317 (regressionFit = 2,526316, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 4,0/22,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,118.
% Will extend: advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 15 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(A, _) :- inphase(A, post_generals).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 14:10:41 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( student(A) )
%   | then if ( publication(C, A) )
%   | | then return 0.7353419175556528;  // std dev = 2,478, 57,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=50 */
%   | | else if ( inphase(A, post_quals) )
%   | | | then return 0.8081489350995122;  // std dev = 0,975, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.4414822684328449;  // std dev = 2,958, 36,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( student(B) )
%   | then return -0.14185106490048827;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( yearsinprogram(A, year_5) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( inphase(A, post_generals) )
%   | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.0793510649004878;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */


% Clauses:

advisedby(A, B, 0.7353419175556528) :- 
     hasposition(B, faculty), 
     student(A), 
     publication(C, A), 
     !. // Clause #1.

advisedby(A, B, 0.8081489350995122) :- 
     hasposition(B, faculty), 
     student(A), 
     inphase(A, post_quals), 
     !. // Clause #2.

advisedby(A, B, 0.4414822684328449) :- 
     hasposition(B, faculty), 
     student(A), 
     !. // Clause #3.

advisedby(A, B, -0.1418510649004878) :- 
     hasposition(B, faculty), 
     !. // Clause #4.

advisedby(A, B, -0.14185106490048827) :- 
     student(B), 
     !. // Clause #5.

advisedby(A, B, 0.8581489350995122) :- 
     yearsinprogram(A, year_5), 
     !. // Clause #6.

advisedby(A, B, 0.19148226843284552) :- 
     inphase(A, post_generals), 
     !. // Clause #7.

advisedby(A, B, -0.0793510649004878) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.7353419175556528) :-  /* #neg=7 #pos=50 */ 
   hasposition(b, faculty),
   student(a),
   publication(underscore, a),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   hasposition(b, faculty),
   student(a),
   inphase(a, post_quals),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.4414822684328449) :-  /* #neg=15 #pos=21 */ 
   hasposition(b, faculty),
   student(a),
   !. // Flattened version of clause #3.

flattened_advisedby(underscore, a, -0.1418510649004878) :-  /* #neg=6 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, a, -0.14185106490048827) :-  /* #neg=177 */ 
   student(a),
   !. // Flattened version of clause #5.

flattened_advisedby(a, underscore, 0.8581489350995122) :-  /* #pos=4 */ 
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #6.

flattened_advisedby(a, underscore, 0.19148226843284552) :-  /* #neg=4 #pos=2 */ 
   inphase(a, post_generals),
   !. // Flattened version of clause #7.

flattened_advisedby(underscore, underscore, -0.0793510649004878) :-  /* #neg=15 #pos=1 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   publication(underscore, a)
%   inphase(a, post_quals)
%   hasposition(a, faculty)
%   yearsinprogram(a, year_5)
%   inphase(a, post_generals)
%   hasposition(b, faculty)
%   student(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 1 trees is 350 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.11776859504132217
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 155 of the 52.344 negative examples.
% Dataset size: 252
Computing probabilities
prob time:6 milliseconds
No hidden examples for : advisedby
Time to build dataset: 18 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1915302626161734
Set score:0.0025

% Have these 10 positive seeds: 1 3 60 95 135 158 173 174 206 224

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 252,0/252,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 252,0/252,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -24,380570 (regressionFit = 24,380569, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/252,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,380570): advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/252,0 pos, 0,0/0,0 neg]
%     Score = -48,251038 (regressionFit = 48,251037, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 9,0/252,0 pos, 0,0/0,0 neg]
%     Score = -43,245084 (regressionFit = 43,245083, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 77,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,223537 (regressionFit = 46,223536, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 67,0/252,0 pos, 0,0/0,0 neg]
%     Score = -48,153948 (regressionFit = 48,153947, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 25,0/252,0 pos, 0,0/0,0 neg]
%     Score = -45,407137 (regressionFit = 45,407136, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 24,0/252,0 pos, 0,0/0,0 neg]
%     Score = -44,871170 (regressionFit = 44,871169, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 28,0/252,0 pos, 0,0/0,0 neg]
%     Score = -23,578668 (regressionFit = 23,578667, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -23,578668): advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]
%     Score = -47,708942 (regressionFit = 47,708941, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 121,0/252,0 pos, 0,0/0,0 neg]
%     Score = -38,383019 (regressionFit = 38,383018, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 150,0/252,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 252,0/252,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 252,0/252,0 pos, 0,0/0,0 neg]
%     Score = -42,966899 (regressionFit = 42,966898, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 211,0/252,0 pos, 0,0/0,0 neg]
%     Score = -23,578668 (regressionFit = 23,578667, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 120,0/252,0 pos, 0,0/0,0 neg]
%     Score = -47,896682 (regressionFit = 47,896680, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 87,0/252,0 pos, 0,0/0,0 neg]
%     Score = -36,976198 (regressionFit = 36,976196, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 74,0/252,0 pos, 0,0/0,0 neg]
%     Score = -27,012107 (regressionFit = 27,012105, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 123,0/252,0 pos, 0,0/0,0 neg]
%     Score = -34,986268 (regressionFit = 34,986267, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 70,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,450530 (regressionFit = 46,450528, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 14,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,301176 (regressionFit = 46,301175, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 17,0/252,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_10).  [covers 2,0/252,0 pos, 0,0/0,0 neg]
%     Score = -47,783413 (regressionFit = 47,783412, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 8,0/252,0 pos, 0,0/0,0 neg]
%     Score = -44,616643 (regressionFit = 44,616642, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 38,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,969836 (regressionFit = 46,969835, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 37,0/252,0 pos, 0,0/0,0 neg]
%     Score = -47,494561 (regressionFit = 47,494560, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 11,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,907845 (regressionFit = 46,907843, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 12,0/252,0 pos, 0,0/0,0 neg]
%     Score = -46,176731 (regressionFit = 46,176730, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 18,0/252,0 pos, 0,0/0,0 neg]
%     Score = -47,143493 (regressionFit = 47,143492, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 10,0/252,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]
Comparing variance: 0.17862626362334494 to score=0.0025 #egs=132.0
Comparing variance: 5.3660779523549233E-17 to score=0.0025 #egs=120.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 132,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,178626)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,178626) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 60 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- professor(A).  [covers 132,0/252,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]'
%     Score = -23,578668 (regressionFit = 23,578667, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 12 47 58 74 109 115 118
%     Score = -20,196420 (regressionFit = 20,196418, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -20,196420): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
%     Score = -22,411307 (regressionFit = 22,411304, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 116,0/132,0 pos, 0,0/0,0 neg]
%     Score = -22,906140 (regressionFit = 22,906138, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 44,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,347616 (regressionFit = 23,347614, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 13,0/132,0 pos, 0,0/0,0 neg]
%     Score = -20,196420 (regressionFit = 20,196418, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -20,196420): advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,538878 (regressionFit = 23,538876, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 71,0/132,0 pos, 0,0/0,0 neg]
%     Score = -21,022222 (regressionFit = 21,022219, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 106,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -20,196420 (regressionFit = 20,196418, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 124,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,460597 (regressionFit = 23,460595, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 56,0/132,0 pos, 0,0/0,0 neg]
%     Score = -21,553082 (regressionFit = 21,553080, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 15,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,094562 (regressionFit = 23,094560, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 119,0/132,0 pos, 0,0/0,0 neg]
%     Score = -22,812056 (regressionFit = 22,812054, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 70,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,313853 (regressionFit = 23,313851, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 16,0/132,0 pos, 0,0/0,0 neg]
%     Score = -23,572701 (regressionFit = 23,572699, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 29,0/132,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,179.
% Will extend: advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
Comparing variance: 1.2315856139939046E-5 to score=0.0025 #egs=8.0
Comparing variance: 0.1628735415445967 to score=0.0025 #egs=124.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 124,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,162874)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,162874) into the LAST position (#1) in the search queue.

% Time for loop #2: 48 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/132,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 132,0/124,0 pos, 0,0/0,0 neg]'
%     Score = -23,578668 (regressionFit = 23,578667, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 124,0/124,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 11 41 46 69 90 93 97 106 120
%     Score = -19,825633 (regressionFit = 19,825631, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 112,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,825633): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 112,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,089104 (regressionFit = 20,089102, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 13,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,770294 (regressionFit = 19,770292, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 57,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,770294): advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 57,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,948452 (regressionFit = 19,948450, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 44,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,195564 (regressionFit = 20,195562, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), projectmember(_, A).  [covers 5,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,028084 (regressionFit = 20,028082, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 65,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,074571 (regressionFit = 19,074569, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 104,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,074571): advisedby(_, A) :- professor(A), publication(_, A).  [covers 104,0/124,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,614224 (regressionFit = 19,614222, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 56,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,168002 (regressionFit = 20,168000, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 7,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,950814 (regressionFit = 19,950812, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 113,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,793740 (regressionFit = 19,793737, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 68,0/124,0 pos, 0,0/0,0 neg]
%     Score = -18,381031 (regressionFit = 18,381029, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,381031): advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,671782 (regressionFit = 19,671780, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_1).  [covers 3,0/124,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_10).  [covers 2,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,166673 (regressionFit = 20,166671, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 29,0/124,0 pos, 0,0/0,0 neg]
%     Score = -19,885084 (regressionFit = 19,885082, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_2).  [covers 5,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,176609 (regressionFit = 20,176607, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 16,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,078917 (regressionFit = 20,078915, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 16,0/124,0 pos, 0,0/0,0 neg]
%     Score = -20,158270 (regressionFit = 20,158268, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_7).  [covers 7,0/124,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,163.
% Will extend: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]
Comparing variance: 9.699163378843004E-4 to score=0.0025 #egs=3.0
Comparing variance: 0.15188528312973185 to score=0.0025 #egs=121.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 121,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,151885)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,151885) into the LAST position (#1) in the search queue.

% Time for loop #3: 53 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/124,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 124,0/121,0 pos, 0,0/0,0 neg]'
%     Score = -23,578668 (regressionFit = 23,578667, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 121,0/121,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 13 14 22 27 44 48 60 76
%     Score = -17,916827 (regressionFit = 17,916825, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 109,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,916827): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 109,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,347971 (regressionFit = 18,347969, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,164744 (regressionFit = 18,164742, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 57,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,125571 (regressionFit = 18,125568, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,341981 (regressionFit = 18,341979, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 65,0/121,0 pos, 0,0/0,0 neg]
%     Score = -17,044287 (regressionFit = 17,044285, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,044287): advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -17,694258 (regressionFit = 17,694255, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 55,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,061876 (regressionFit = 18,061874, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 110,0/121,0 pos, 0,0/0,0 neg]
%     Score = -17,892326 (regressionFit = 17,892324, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 66,0/121,0 pos, 0,0/0,0 neg]
%     Score = -17,594632 (regressionFit = 17,594630, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 28,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,357592 (regressionFit = 18,357590, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_7).  [covers 7,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,129970 (regressionFit = 18,129968, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 15,0/121,0 pos, 0,0/0,0 neg]
%     Score = -18,293730 (regressionFit = 18,293728, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 29,0/121,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,152.
% Will extend: advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 51 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(_, A) :- professor(A), publication(_, A).  [covers 101,0/121,0 pos, 0,0/0,0 neg]
% This clause covers 101 positive examples, of which 101 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 14:10:41 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( professor(B) )
%   then if ( professor(A) )
%   | then return -0.12895403393785088;  // std dev = 0,010, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tempadvisedby(A, C) )
%   | | then return -0.2265030811563333;  // std dev = 0,054, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( publication(D, B) )
%   | | | then return 0.6076816819447419;  // std dev = 3,505, 101,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=86 */
%   | | | else return 0.32501937953000964;  // std dev = 2,182, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   else return -0.12544463852839105;  // std dev = 8,02e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */


% Clauses:

advisedby(A, B, -0.12895403393785088) :- 
     professor(B), 
     professor(A), 
     !. // Clause #1.

advisedby(A, B, -0.2265030811563333) :- 
     professor(B), 
     tempadvisedby(A, C), 
     !. // Clause #2.

advisedby(A, B, 0.6076816819447419) :- 
     professor(B), 
     publication(C, B), 
     !. // Clause #3.

advisedby(A, B, 0.32501937953000964) :- 
     professor(B), 
     !. // Clause #4.

advisedby(A, B, -0.12544463852839105) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, -0.12895403393785088) :-  /* #neg=8 */ 
   professor(b),
   professor(a),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, -0.2265030811563333) :-  /* #neg=3 */ 
   professor(b),
   tempadvisedby(a, underscore),
   !. // Flattened version of clause #2.

flattened_advisedby(underscore, a, 0.6076816819447419) :-  /* #neg=15 #pos=86 */ 
   professor(a),
   publication(underscore, a),
   !. // Flattened version of clause #3.

flattened_advisedby(underscore, a, 0.32501937953000964) :-  /* #neg=9 #pos=11 */ 
   professor(a),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.12544463852839105) :-  /* #neg=120 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   professor(b)
%   tempadvisedby(a, underscore)
%   publication(underscore, a)
%   professor(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 2 trees is 588 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.15188528312973182
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 196 of the 52.344 negative examples.
% Dataset size: 293
Computing probabilities
prob time:15 milliseconds
No hidden examples for : advisedby
Time to build dataset: 30 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.13426075011558727
Set score:0.0025

% Have these 10 positive seeds: 32 55 77 83 86 120 135 162 168 180

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 293,0/293,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 293,0/293,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -38,531654 (regressionFit = 38,531653, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 5,0/293,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,531654): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 5,0/293,0 pos, 0,0/0,0 neg]
%     Score = -21,215014 (regressionFit = 21,215012, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/293,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -21,215014): advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/293,0 pos, 0,0/0,0 neg]
%     Score = -39,337717 (regressionFit = 39,337716, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 37,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,136555 (regressionFit = 38,136554, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 79,0/293,0 pos, 0,0/0,0 neg]
%     Score = -37,868926 (regressionFit = 37,868925, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 25,0/293,0 pos, 0,0/0,0 neg]
%     Score = -36,702479 (regressionFit = 36,702477, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 42,0/293,0 pos, 0,0/0,0 neg]
%     Score = -36,554778 (regressionFit = 36,554777, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 44,0/293,0 pos, 0,0/0,0 neg]
%     Score = -19,586846 (regressionFit = 19,586845, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,586846): advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,076030 (regressionFit = 38,076029, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 125,0/293,0 pos, 0,0/0,0 neg]
%     Score = -33,106910 (regressionFit = 33,106908, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 169,0/293,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 293,0/293,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 293,0/293,0 pos, 0,0/0,0 neg]
%     Score = -36,839079 (regressionFit = 36,839078, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 253,0/293,0 pos, 0,0/0,0 neg]
%     Score = -19,586846 (regressionFit = 19,586845, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 163,0/293,0 pos, 0,0/0,0 neg]
%     Score = -39,336518 (regressionFit = 39,336517, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 118,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,125524 (regressionFit = 38,125523, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 46,0/293,0 pos, 0,0/0,0 neg]
%     Score = -22,537198 (regressionFit = 22,537197, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 122,0/293,0 pos, 0,0/0,0 neg]
%     Score = -29,493713 (regressionFit = 29,493711, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 72,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,246055 (regressionFit = 38,246054, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 19,0/293,0 pos, 0,0/0,0 neg]
%     Score = -37,303847 (regressionFit = 37,303846, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 47,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,995175 (regressionFit = 38,995174, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 29,0/293,0 pos, 0,0/0,0 neg]
%     Score = -37,961908 (regressionFit = 37,961907, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 39,0/293,0 pos, 0,0/0,0 neg]
%     Score = -39,337574 (regressionFit = 39,337573, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 16,0/293,0 pos, 0,0/0,0 neg]
%     Score = -38,184352 (regressionFit = 38,184350, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 20,0/293,0 pos, 0,0/0,0 neg]
%     Score = -37,804423 (regressionFit = 37,804422, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 26,0/293,0 pos, 0,0/0,0 neg]
%     Score = -39,009075 (regressionFit = 39,009074, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_2).  [covers 6,0/293,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]
Comparing variance: 0.15066803925044636 to score=0.0025 #egs=130.0
Comparing variance: 3.269368416074081E-17 to score=0.0025 #egs=163.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 130,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,150668)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,150668) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 67 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- professor(A).  [covers 130,0/293,0 pos, 0,0/0,0 neg]
% This clause covers 130 positive examples, of which 130 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 130,0/130,0 pos, 0,0/0,0 neg]'
%     Score = -19,586846 (regressionFit = 19,586845, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 130,0/130,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 2 12 15 27 39 42 45 50 51
%     Score = -19,294079 (regressionFit = 19,294077, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 116,0/130,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,294079): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 116,0/130,0 pos, 0,0/0,0 neg]
%     Score = -17,560144 (regressionFit = 17,560142, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 52,0/130,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,560144): advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 52,0/130,0 pos, 0,0/0,0 neg]
%     Score = -18,811198 (regressionFit = 18,811196, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 42,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,586509 (regressionFit = 19,586507, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 16,0/130,0 pos, 0,0/0,0 neg]
%     Score = -18,956344 (regressionFit = 18,956342, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 65,0/130,0 pos, 0,0/0,0 neg]
%     Score = -18,358986 (regressionFit = 18,358984, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 106,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -17,240500 (regressionFit = 17,240498, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,240500): advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,571176 (regressionFit = 19,571173, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 53,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,571439 (regressionFit = 19,571437, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 121,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,437584 (regressionFit = 19,437582, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 72,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_10).  [covers 2,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,586301 (regressionFit = 19,586299, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_2).  [covers 7,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,455532 (regressionFit = 19,455530, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 16,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,148279 (regressionFit = 19,148276, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/130,0 pos, 0,0/0,0 neg]
%     Score = -18,042444 (regressionFit = 18,042442, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 27,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_8).  [covers 2,0/130,0 pos, 0,0/0,0 neg]
%     Score = -19,022782 (regressionFit = 19,022780, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 24,0/130,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,151.
% Will extend: advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14131493182053687 to score=0.0025 #egs=122.0
Comparing variance: 9.500454267353728E-6 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 122,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,141315)
%         ILP node to extend: advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,141315) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 56 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- professor(B), student(A).  [covers 122,0/130,0 pos, 0,0/0,0 neg]
% This clause covers 122 positive examples, of which 122 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), student(A).  [covers 122,0/122,0 pos, 0,0/0,0 neg]'
%     Score = -17,240500 (regressionFit = 17,240498, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 122,0/122,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 13 22 45 51 53 70 75 79 84
%     Score = -17,190763 (regressionFit = 17,190760, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), hasposition(B, faculty).  [covers 111,0/122,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,190763): advisedby(A, B) :- professor(B), student(A), hasposition(B, faculty).  [covers 111,0/122,0 pos, 0,0/0,0 neg]
%     Score = -15,967383 (regressionFit = 15,967380, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,967383): advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]
%     Score = -16,856650 (regressionFit = 16,856647, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,223744 (regressionFit = 17,223741, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), inphase(A, pre_quals).  [covers 16,0/122,0 pos, 0,0/0,0 neg]
%     Score = -15,974495 (regressionFit = 15,974492, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), publication(_, A).  [covers 58,0/122,0 pos, 0,0/0,0 neg]
%     Score = -16,066248 (regressionFit = 16,066245, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), publication(_, B).  [covers 100,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0200000000000007E-6) for clause:  advisedby(A, B) :- professor(B), student(A), sameperson(A, A).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0200000000000007E-6) for clause:  advisedby(A, B) :- professor(B), student(A), sameperson(B, B).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,027774 (regressionFit = 17,027771, penalties=3.240000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), ta(_, A, _).  [covers 53,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,190212 (regressionFit = 17,190209, penalties=3.240000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), taughtby(_, B, _).  [covers 114,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,176645 (regressionFit = 17,176642, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), tempadvisedby(_, B).  [covers 69,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,227485 (regressionFit = 17,227482, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_7).  [covers 7,0/122,0 pos, 0,0/0,0 neg]
%     Score = -16,135857 (regressionFit = 16,135854, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_5).  [covers 27,0/122,0 pos, 0,0/0,0 neg]
%     Score = -16,917078 (regressionFit = 16,917075, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_4).  [covers 24,0/122,0 pos, 0,0/0,0 neg]
%     Score = -16,961567 (regressionFit = 16,961564, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_6).  [covers 14,0/122,0 pos, 0,0/0,0 neg]
%     Score = -17,226699 (regressionFit = 17,226696, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_2).  [covers 7,0/122,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,141.
% Will extend: advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06759463938844228 to score=0.0025 #egs=52.0
Comparing variance: 0.17789226470142808 to score=0.0025 #egs=70.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 70,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,177892)
%         ILP node to extend: advisedby(A, B) :- professor(B), student(A).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,177892) into the LAST position (#1) in the search queue.

% Time for loop #3: 62 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- professor(B), student(A), inphase(A, post_generals).  [covers 52,0/122,0 pos, 0,0/0,0 neg]
% This clause covers 52 positive examples, of which 52 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), student(A).  [covers 122,0/70,0 pos, 0,0/0,0 neg]'
%     Score = -17,240500 (regressionFit = 17,240498, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 70,0/70,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 26 28 43 46 47 49 69
%     Score = -12,380954 (regressionFit = 12,380951, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), hasposition(B, faculty).  [covers 62,0/70,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,380954): advisedby(A, B) :- professor(B), student(A), hasposition(B, faculty).  [covers 62,0/70,0 pos, 0,0/0,0 neg]
%     Score = -9,578237 (regressionFit = 9,578234, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,578237): advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,382820 (regressionFit = 12,382817, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), inphase(A, pre_quals).  [covers 16,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,339960 (regressionFit = 12,339957, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), projectmember(_, B).  [covers 5,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,381337 (regressionFit = 11,381334, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), publication(_, A).  [covers 22,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,094320 (regressionFit = 12,094317, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), publication(_, B).  [covers 52,0/70,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0200000000000007E-6) for clause:  advisedby(A, B) :- professor(B), student(A), sameperson(A, A).  [covers 70,0/70,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0200000000000007E-6) for clause:  advisedby(A, B) :- professor(B), student(A), sameperson(B, B).  [covers 70,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,999612 (regressionFit = 11,999609, penalties=3.240000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), ta(_, A, _).  [covers 33,0/70,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), taughtby(_, A, _).  [covers 2,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,273655 (regressionFit = 12,273652, penalties=3.240000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), taughtby(_, B, _).  [covers 63,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,439467 (regressionFit = 12,439463, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), tempadvisedby(_, B).  [covers 37,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,408968 (regressionFit = 11,408964, penalties=3.1300000000000005E-6) for clause:  advisedby(A, B) :- professor(B), student(A), tempadvisedby(A, _).  [covers 4,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,467408 (regressionFit = 11,467405, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_4).  [covers 17,0/70,0 pos, 0,0/0,0 neg]
%     Score = -12,054746 (regressionFit = 12,054743, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_3).  [covers 16,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,331088 (regressionFit = 11,331085, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_5).  [covers 13,0/70,0 pos, 0,0/0,0 neg]
%     Score = -11,858174 (regressionFit = 11,858171, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), student(A), yearsinprogram(A, year_1).  [covers 5,0/70,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,178.
% Will extend: advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 52 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- professor(B), student(A), inphase(A, post_quals).  [covers 42,0/70,0 pos, 0,0/0,0 neg]
% This clause covers 42 positive examples, of which 42 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 14:10:42 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( professor(B) )
%   then if ( student(A) )
%   | then if ( inphase(A, post_generals) )
%   | | then return 0.5632047877191227;  // std dev = 1,875, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | | else if ( inphase(A, post_quals) )
%   | | | then return 0.5220923127921951;  // std dev = 1,934, 42,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | | else return 0.10846832961448773;  // std dev = 2,416, 28,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return -0.11435448663451876;  // std dev = 0,009, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360636;  // std dev = 7,30e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */


% Clauses:

advisedby(A, B, 0.5632047877191227) :- 
     professor(B), 
     student(A), 
     inphase(A, post_generals), 
     !. // Clause #1.

advisedby(A, B, 0.5220923127921951) :- 
     professor(B), 
     student(A), 
     inphase(A, post_quals), 
     !. // Clause #2.

advisedby(A, B, 0.10846832961448773) :- 
     professor(B), 
     student(A), 
     !. // Clause #3.

advisedby(A, B, -0.11435448663451876) :- 
     professor(B), 
     !. // Clause #4.

advisedby(A, B, -0.11231637819360636) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.5632047877191227) :-  /* #neg=4 #pos=48 */ 
   professor(b),
   student(a),
   inphase(a, post_generals),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.5220923127921951) :-  /* #neg=4 #pos=38 */ 
   professor(b),
   student(a),
   inphase(a, post_quals),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.10846832961448773) :-  /* #neg=17 #pos=11 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #3.

flattened_advisedby(underscore, a, -0.11435448663451876) :-  /* #neg=8 */ 
   professor(a),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.11231637819360636) :-  /* #neg=163 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   professor(b)
%   inphase(a, post_generals)
%   inphase(a, post_quals)
%   professor(a)
%   student(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 3 trees is 866 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1778922647014281
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 219 of the 52.344 negative examples.
% Dataset size: 316
Computing probabilities
prob time:22 milliseconds
No hidden examples for : advisedby
Time to build dataset: 32 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10276364431508879
Set score:0.0025

% Have these 10 positive seeds: 3 39 44 46 48 67 71 100 102 137

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 316,0/316,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 316,0/316,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -32,427163 (regressionFit = 32,427161, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 9,0/316,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,427163): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 9,0/316,0 pos, 0,0/0,0 neg]
%     Score = -22,912864 (regressionFit = 22,912863, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,912864): advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,561671 (regressionFit = 31,561669, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 77,0/316,0 pos, 0,0/0,0 neg]
%     Score = -30,688279 (regressionFit = 30,688278, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 89,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,260887 (regressionFit = 31,260885, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 42,0/316,0 pos, 0,0/0,0 neg]
%     Score = -23,145395 (regressionFit = 23,145394, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 145,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,824138 (regressionFit = 31,824137, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 135,0/316,0 pos, 0,0/0,0 neg]
%     Score = -28,612801 (regressionFit = 28,612800, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 171,0/316,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 316,0/316,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 316,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,285846 (regressionFit = 31,285845, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 275,0/316,0 pos, 0,0/0,0 neg]
%     Score = -23,145395 (regressionFit = 23,145394, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 171,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,381390 (regressionFit = 32,381389, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 138,0/316,0 pos, 0,0/0,0 neg]
%     Score = -28,190534 (regressionFit = 28,190532, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 111,0/316,0 pos, 0,0/0,0 neg]
%     Score = -24,549827 (regressionFit = 24,549825, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 138,0/316,0 pos, 0,0/0,0 neg]
%     Score = -25,901893 (regressionFit = 25,901892, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 74,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,277093 (regressionFit = 32,277092, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 30,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,267364 (regressionFit = 32,267363, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 25,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,201998 (regressionFit = 32,201997, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 31,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,369596 (regressionFit = 31,369595, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 42,0/316,0 pos, 0,0/0,0 neg]
%     Score = -31,476815 (regressionFit = 31,476814, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 47,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,267061 (regressionFit = 32,267059, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_12).  [covers 5,0/316,0 pos, 0,0/0,0 neg]
%     Score = -32,294130 (regressionFit = 32,294129, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_2).  [covers 7,0/316,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]
Comparing variance: 0.15532116396645246 to score=0.0025 #egs=125.0
Comparing variance: 0.018312655683395337 to score=0.0025 #egs=191.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 125,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,155321)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,155321) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 191,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,018313)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,018313) into the LAST position (#2) in the search queue.

% Time for loop #1: 68 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/316,0 pos, 0,0/0,0 neg]
% This clause covers 125 positive examples, of which 125 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/125,0 pos, 0,0/0,0 neg]'
%     Score = -22,912864 (regressionFit = 22,912863, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 125,0/125,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 8 41 44 66 77 84 92 103 113
%     Score = -19,064318 (regressionFit = 19,064316, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 54,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,064318): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 54,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,167352 (regressionFit = 19,167349, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 41,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,143761 (regressionFit = 19,143759, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 14,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,031953 (regressionFit = 19,031951, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 62,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,031953): advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 62,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,300199 (regressionFit = 19,300197, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 110,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -18,227831 (regressionFit = 18,227829, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,227831): advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,309281 (regressionFit = 19,309278, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 54,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,255526 (regressionFit = 19,255524, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 119,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,040589 (regressionFit = 19,040587, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 71,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_9).  [covers 2,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,267016 (regressionFit = 19,267014, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 17,0/125,0 pos, 0,0/0,0 neg]
%     Score = -18,383266 (regressionFit = 18,383264, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 23,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_8).  [covers 2,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,298453 (regressionFit = 19,298451, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_2).  [covers 7,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,410400 (regressionFit = 19,410398, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 16,0/125,0 pos, 0,0/0,0 neg]
%     Score = -19,346445 (regressionFit = 19,346442, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 28,0/125,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,155.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]
Comparing variance: 0.15579341143152703 to score=0.0025 #egs=117.0
Comparing variance: 0.0 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 117,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,155793)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,155793) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 57 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/125,0 pos, 0,0/0,0 neg]
% This clause covers 117 positive examples, of which 117 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/117,0 pos, 0,0/0,0 neg]'
%     Score = -18,227831 (regressionFit = 18,227829, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/117,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 15 24 28 40 48 71 76 86 92
%     Score = -18,050103 (regressionFit = 18,050100, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, pre_quals).  [covers 14,0/117,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,050103): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, pre_quals).  [covers 14,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,103134 (regressionFit = 18,103130, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 54,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,135512 (regressionFit = 18,135509, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 41,0/117,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), professor(B).  [covers 117,0/117,0 pos, 0,0/0,0 neg]
%     Score = -17,797925 (regressionFit = 17,797922, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), projectmember(_, B).  [covers 4,0/117,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,797925): advisedby(A, B) :- hasposition(B, faculty), student(A), projectmember(_, B).  [covers 4,0/117,0 pos, 0,0/0,0 neg]
%     Score = -17,715121 (regressionFit = 17,715118, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/117,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,715121): advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 57,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,169974 (regressionFit = 18,169971, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, B).  [covers 104,0/117,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(A, A).  [covers 117,0/117,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(B, B).  [covers 117,0/117,0 pos, 0,0/0,0 neg]
%     Score = -17,880453 (regressionFit = 17,880450, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 54,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,122639 (regressionFit = 18,122636, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, B, _).  [covers 112,0/117,0 pos, 0,0/0,0 neg]
%     Score = -17,876241 (regressionFit = 17,876238, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), tempadvisedby(_, B).  [covers 67,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,026735 (regressionFit = 18,026732, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_1).  [covers 3,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,215705 (regressionFit = 18,215702, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_5).  [covers 28,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,153134 (regressionFit = 18,153131, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_3).  [covers 17,0/117,0 pos, 0,0/0,0 neg]
%     Score = -17,440384 (regressionFit = 17,440381, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,440384): advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]
%     Score = -18,058220 (regressionFit = 18,058217, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_2).  [covers 7,0/117,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,156.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04852673697276158 to score=0.0025 #egs=23.0
Comparing variance: 0.17366240496758784 to score=0.0025 #egs=94.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 94,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,173662)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/117,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,173662) into position #1 in the search queue (new size=2).

% Time for loop #3: 61 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_4).  [covers 23,0/117,0 pos, 0,0/0,0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 117,0/94,0 pos, 0,0/0,0 neg]'
%     Score = -18,227831 (regressionFit = 18,227829, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 94,0/94,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 21 31 41 55 58 66 68 83 85
%     Score = -16,296598 (regressionFit = 16,296595, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 26,0/94,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,296598): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_quals).  [covers 26,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,025920 (regressionFit = 16,025917, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 48,0/94,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,025920): advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, post_generals).  [covers 48,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,172876 (regressionFit = 16,172873, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), inphase(A, pre_quals).  [covers 12,0/94,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), professor(B).  [covers 94,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,004631 (regressionFit = 16,004628, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 43,0/94,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,004631): advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, A).  [covers 43,0/94,0 pos, 0,0/0,0 neg]
%     Score = -15,992734 (regressionFit = 15,992731, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, B).  [covers 85,0/94,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,992734): advisedby(A, B) :- hasposition(B, faculty), student(A), publication(_, B).  [covers 85,0/94,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(A, A).  [covers 94,0/94,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), sameperson(B, B).  [covers 94,0/94,0 pos, 0,0/0,0 neg]
%     Score = -15,986071 (regressionFit = 15,986068, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,986071): advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,321561 (regressionFit = 16,321557, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, A, _).  [covers 7,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,190516 (regressionFit = 16,190513, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), taughtby(_, B, _).  [covers 90,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,075887 (regressionFit = 16,075884, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), tempadvisedby(_, B).  [covers 53,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,186713 (regressionFit = 16,186710, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_5).  [covers 28,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,108932 (regressionFit = 16,108929, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_3).  [covers 17,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,143722 (regressionFit = 16,143719, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_12).  [covers 3,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,232168 (regressionFit = 16,232165, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_2).  [covers 7,0/94,0 pos, 0,0/0,0 neg]
%     Score = -16,181043 (regressionFit = 16,181040, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A), yearsinprogram(A, year_1).  [covers 3,0/94,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,174.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 53 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), student(A), ta(_, A, _).  [covers 46,0/94,0 pos, 0,0/0,0 neg]
% This clause covers 46 positive examples, of which 46 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 16 19 52 68 69 98 125 190

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 191,0/191,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 191,0/191,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -3,490624 (regressionFit = 3,490623, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 19,0/191,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,490624): advisedby(A, _) :- hasposition(A, faculty).  [covers 19,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,468508 (regressionFit = 3,468507, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 36,0/191,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,468508): advisedby(A, _) :- inphase(A, post_quals).  [covers 36,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,497436 (regressionFit = 3,497435, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 41,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,481235 (regressionFit = 3,481234, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 42,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,484354 (regressionFit = 3,484353, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 33,0/191,0 pos, 0,0/0,0 neg]
%     Score = -2,997746 (regressionFit = 2,997745, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,997746): advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,490611 (regressionFit = 3,490610, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 73,0/191,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 191,0/191,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 191,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,484354 (regressionFit = 3,484353, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 158,0/191,0 pos, 0,0/0,0 neg]
%     Score = -2,997746 (regressionFit = 2,997745, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 171,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,488413 (regressionFit = 3,488411, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 84,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,416583 (regressionFit = 3,416581, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 111,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,482966 (regressionFit = 3,482965, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 36,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,444924 (regressionFit = 3,444923, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 19,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,494083 (regressionFit = 3,494082, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 10,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,478633 (regressionFit = 3,478632, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 32,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,486822 (regressionFit = 3,486821, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 30,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,319605 (regressionFit = 3,319604, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 19,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,485012 (regressionFit = 3,485011, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 14,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,491298 (regressionFit = 3,491296, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 17,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,491259 (regressionFit = 3,491258, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 19,0/191,0 pos, 0,0/0,0 neg]
%     Score = -3,489713 (regressionFit = 3,489712, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 23,0/191,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,018.
% Will extend: advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14988722692690273 to score=0.0025 #egs=20.0
Comparing variance: -7.791038769299344E-17 to score=0.0025 #egs=171.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,149887)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,149887) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #5: 35 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(_, A) :- professor(A).  [covers 20,0/191,0 pos, 0,0/0,0 neg]
% This clause covers 20 positive examples, of which 20 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -2,997746 (regressionFit = 2,997745, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 3 4 5 6 7 9 11 12 14
%     Score = -2,892825 (regressionFit = 2,892823, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 3,0/20,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,892825): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 3,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,935469 (regressionFit = 2,935467, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 9,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,997699 (regressionFit = 2,997697, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_emeritus).  [covers 4,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,860204 (regressionFit = 2,860202, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,860204): advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,992032 (regressionFit = 2,992029, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 3,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,972322 (regressionFit = 2,972320, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 6,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,799561 (regressionFit = 2,799559, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,799561): advisedby(A, B) :- professor(B), professor(A).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,991797 (regressionFit = 2,991795, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 10,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,947450 (regressionFit = 2,947448, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 10,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,799561 (regressionFit = 2,799559, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 15,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,968999 (regressionFit = 2,968997, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 7,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,799561 (regressionFit = 2,799559, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,935469 (regressionFit = 2,935467, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 11,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(_, A).  [covers 2,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,829803 (regressionFit = 2,829801, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,981679 (regressionFit = 2,981677, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_2).  [covers 3,0/20,0 pos, 0,0/0,0 neg]
%     Score = -2,585959 (regressionFit = 2,585957, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,585959): advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 2,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 1,0/20,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,150.
% Will extend: advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1575679230015384 to score=0.0025 #egs=5.0
Comparing variance: 0.11987450158594602 to score=0.0025 #egs=15.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 15,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,119875)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,119875) into the LAST position (#1) in the search queue.

% Time for loop #6: 24 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 5,0/20,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 20,0/15,0 pos, 0,0/0,0 neg]'
%     Score = -2,997746 (regressionFit = 2,997745, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 15,0/15,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 2 3 4 5 7 8 9 10 12
%     Score = -1,768032 (regressionFit = 1,768030, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,768032): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty_affiliate).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,763168 (regressionFit = 1,763166, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,763168): advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,757837 (regressionFit = 1,757834, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_emeritus).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,757837): advisedby(_, A) :- professor(A), hasposition(A, faculty_emeritus).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,756851 (regressionFit = 1,756849, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,756851): advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,758478 (regressionFit = 1,758476, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,737944 (regressionFit = 1,737942, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,737944): advisedby(A, B) :- professor(B), professor(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,709883 (regressionFit = 1,709880, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,709883): advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,774641 (regressionFit = 1,774639, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,737944 (regressionFit = 1,737942, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,763057 (regressionFit = 1,763054, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,737944 (regressionFit = 1,737942, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,763168 (regressionFit = 1,763166, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 9,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(_, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,729478 (regressionFit = 1,729476, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,713389 (regressionFit = 1,713387, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_2).  [covers 3,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 1,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_7).  [covers 2,0/15,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,120.
% Will extend: advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 22 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(A, B) :- professor(B), publication(_, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 14:10:42 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( student(A) )
%   | then if ( yearsinprogram(A, year_4) )
%   | | then return 0.46295901346678653;  // std dev = 1,056, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( ta(C, A, D) )
%   | | | then return 0.1952552678104837;  // std dev = 3,053, 46,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return 0.31524666228095194;  // std dev = 2,581, 48,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=39 */
%   | else return -0.10109110168548795;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( professor(B) )
%   | then if ( yearsinprogram(A, year_5) )
%   | | then return 0.3140357049019431;  // std dev = 0,888, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( publication(E, A) )
%   | | | then return -0.09933302526173929;  // std dev = 0,815, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.05440357044018664;  // std dev = 1,022, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.1015963294878365;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */


% Clauses:

advisedby(A, B, 0.46295901346678653) :- 
     hasposition(B, faculty), 
     student(A), 
     yearsinprogram(A, year_4), 
     !. // Clause #1.

advisedby(A, B, 0.1952552678104837) :- 
     hasposition(B, faculty), 
     student(A), 
     ta(C, A, D), 
     !. // Clause #2.

advisedby(A, B, 0.31524666228095194) :- 
     hasposition(B, faculty), 
     student(A), 
     !. // Clause #3.

advisedby(A, B, -0.10109110168548795) :- 
     hasposition(B, faculty), 
     !. // Clause #4.

advisedby(A, B, 0.3140357049019431) :- 
     professor(B), 
     yearsinprogram(A, year_5), 
     !. // Clause #5.

advisedby(A, B, -0.09933302526173929) :- 
     professor(B), 
     publication(C, A), 
     !. // Clause #6.

advisedby(A, B, 0.05440357044018664) :- 
     professor(B), 
     !. // Clause #7.

advisedby(A, B, -0.1015963294878365) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.46295901346678653) :-  /* #neg=1 #pos=22 */ 
   hasposition(b, faculty),
   student(a),
   yearsinprogram(a, year_4),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.1952552678104837) :-  /* #neg=17 #pos=29 */ 
   hasposition(b, faculty),
   student(a),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.31524666228095194) :-  /* #neg=9 #pos=39 */ 
   hasposition(b, faculty),
   student(a),
   !. // Flattened version of clause #3.

flattened_advisedby(underscore, a, -0.10109110168548795) :-  /* #neg=8 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.3140357049019431) :-  /* #neg=1 #pos=4 */ 
   professor(b),
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #5.

flattened_advisedby(a, b, -0.09933302526173929) :-  /* #neg=6 #pos=1 */ 
   professor(b),
   publication(underscore, a),
   !. // Flattened version of clause #6.

flattened_advisedby(underscore, a, 0.05440357044018664) :-  /* #neg=6 #pos=2 */ 
   professor(a),
   !. // Flattened version of clause #7.

flattened_advisedby(underscore, underscore, -0.1015963294878365) :-  /* #neg=171 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   professor(b)
%   publication(underscore, a)
%   yearsinprogram(a, year_4)
%   ta(underscore, a, underscore)
%   hasposition(a, faculty)
%   yearsinprogram(a, year_5)
%   professor(a)
%   hasposition(b, faculty)
%   student(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 4 trees is 1,228 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.11987450158594602
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 174 of the 52.344 negative examples.
% Dataset size: 271
Computing probabilities
prob time:28 milliseconds
No hidden examples for : advisedby
Time to build dataset: 38 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08906373663756813
Set score:0.0025

% Have these 10 positive seeds: 8 9 47 98 158 168 188 210 231 252

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 271,0/271,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 271,0/271,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty_emeritus).  [covers 2,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,250746 (regressionFit = 23,250745, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 31,0/271,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -23,250746): advisedby(A, _) :- hasposition(A, faculty).  [covers 31,0/271,0 pos, 0,0/0,0 neg]
%     Score = -16,798312 (regressionFit = 16,798311, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,798312): advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]
%     Score = -21,318493 (regressionFit = 21,318492, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 73,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,964965 (regressionFit = 23,964964, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 81,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,186682 (regressionFit = 23,186681, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 33,0/271,0 pos, 0,0/0,0 neg]
%     Score = -22,985005 (regressionFit = 22,985004, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 39,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,378440 (regressionFit = 23,378439, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 27,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,052592 (regressionFit = 23,052591, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 37,0/271,0 pos, 0,0/0,0 neg]
%     Score = -17,338059 (regressionFit = 17,338058, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 136,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,941946 (regressionFit = 23,941945, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 129,0/271,0 pos, 0,0/0,0 neg]
%     Score = -20,773743 (regressionFit = 20,773742, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 156,0/271,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 271,0/271,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 271,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,052592 (regressionFit = 23,052591, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 234,0/271,0 pos, 0,0/0,0 neg]
%     Score = -17,338059 (regressionFit = 17,338058, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 135,0/271,0 pos, 0,0/0,0 neg]
%     Score = -24,129148 (regressionFit = 24,129147, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 111,0/271,0 pos, 0,0/0,0 neg]
%     Score = -21,931368 (regressionFit = 21,931367, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 66,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,525748 (regressionFit = 23,525747, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 45,0/271,0 pos, 0,0/0,0 neg]
%     Score = -17,950565 (regressionFit = 17,950563, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 126,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,649600 (regressionFit = 23,649599, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 18,0/271,0 pos, 0,0/0,0 neg]
%     Score = -20,118565 (regressionFit = 20,118564, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 73,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,619913 (regressionFit = 23,619912, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 19,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,658811 (regressionFit = 23,658809, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 8,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,999781 (regressionFit = 23,999780, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 35,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,896768 (regressionFit = 23,896767, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 43,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,551174 (regressionFit = 23,551173, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 45,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,347138 (regressionFit = 23,347137, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 28,0/271,0 pos, 0,0/0,0 neg]
%     Score = -24,007541 (regressionFit = 24,007540, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_7).  [covers 5,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,846527 (regressionFit = 23,846525, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 11,0/271,0 pos, 0,0/0,0 neg]
%     Score = -23,873876 (regressionFit = 23,873875, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_2).  [covers 10,0/271,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11366688876141011 to score=0.0025 #egs=118.0
Comparing variance: 0.022128224321337306 to score=0.0025 #egs=153.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 118,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,113667)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,113667) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 153,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,022128)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,022128) into the LAST position (#2) in the search queue.

% Time for loop #1: 67 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/271,0 pos, 0,0/0,0 neg]
% This clause covers 118 positive examples, of which 118 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/118,0 pos, 0,0/0,0 neg]'
%     Score = -16,798312 (regressionFit = 16,798311, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/118,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 11 30 31 32 42 50 63 72 91 94
%     Score = -13,385949 (regressionFit = 13,385947, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/118,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,385949): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/118,0 pos, 0,0/0,0 neg]
%     Score = -11,664413 (regressionFit = 11,664411, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,664413): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]
%     Score = -12,522246 (regressionFit = 12,522244, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), professor(A).  [covers 7,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,213906 (regressionFit = 13,213904, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 60,0/118,0 pos, 0,0/0,0 neg]
%     Score = -12,848293 (regressionFit = 12,848291, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 101,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -12,522246 (regressionFit = 12,522244, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 111,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,412694 (regressionFit = 13,412692, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 49,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,117457 (regressionFit = 13,117455, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 12,0/118,0 pos, 0,0/0,0 neg]
%     Score = -12,952591 (regressionFit = 12,952588, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 111,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,404916 (regressionFit = 13,404913, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 71,0/118,0 pos, 0,0/0,0 neg]
%     Score = -12,749184 (regressionFit = 12,749182, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,274830 (regressionFit = 13,274828, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 26,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,235520 (regressionFit = 13,235518, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 13,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,144779 (regressionFit = 13,144777, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 23,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,385005 (regressionFit = 13,385003, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_2).  [covers 6,0/118,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,114.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]
Comparing variance: 0.017869326942543298 to score=0.0025 #egs=46.0
Comparing variance: 0.15058919051386577 to score=0.0025 #egs=72.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 46,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,017869)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,017869) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 72,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,150589)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,150589) into position #1 in the search queue (new size=3).

% Time for loop #2: 52 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 46,0/118,0 pos, 0,0/0,0 neg]
% This clause covers 46 positive examples, of which 46 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 118,0/72,0 pos, 0,0/0,0 neg]'
%     Score = -16,798312 (regressionFit = 16,798311, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 72,0/72,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 6 10 11 29 30 35 39 49 51
%     Score = -9,582555 (regressionFit = 9,582553, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/72,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,582555): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,397998 (regressionFit = 10,397996, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 15,0/72,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 72,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,826571 (regressionFit = 10,826569, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 28,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,664121 (regressionFit = 10,664118, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 58,0/72,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 72,0/72,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 72,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,363112 (regressionFit = 10,363110, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 65,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,841674 (regressionFit = 10,841672, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 30,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,535456 (regressionFit = 10,535454, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 66,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,841768 (regressionFit = 10,841766, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 43,0/72,0 pos, 0,0/0,0 neg]
%     Score = -9,945187 (regressionFit = 9,945185, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(A, _).  [covers 5,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,797483 (regressionFit = 10,797480, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 13,0/72,0 pos, 0,0/0,0 neg]
%     Score = -9,260816 (regressionFit = 9,260814, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,260816): advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,105117 (regressionFit = 10,105115, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/72,0 pos, 0,0/0,0 neg]
%     Score = -10,550045 (regressionFit = 10,550043, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_1).  [covers 5,0/72,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,151.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]
Comparing variance: 0.00856254271394222 to score=0.0025 #egs=14.0
Comparing variance: 0.15760238151355538 to score=0.0025 #egs=58.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 14,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,008563)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,008563) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 58,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,157602)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 72,0/72,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,157602) into position #1 in the search queue (new size=4).

% Time for loop #3: 29 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 14,0/72,0 pos, 0,0/0,0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 72,0/58,0 pos, 0,0/0,0 neg]'
%     Score = -16,798312 (regressionFit = 16,798311, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 58,0/58,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 9 12 15 16 25 32 40 43 48
%     Score = -8,934084 (regressionFit = 8,934082, penalties=1.9400000000000005E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), hasposition(A, faculty).  [covers 6,0/58,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,934084): advisedby(A, B) :- hasposition(B, faculty), hasposition(A, faculty).  [covers 6,0/58,0 pos, 0,0/0,0 neg]
%     Score = -7,755612 (regressionFit = 7,755610, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 30,0/58,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,755612): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 30,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,947593 (regressionFit = 8,947591, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,894876 (regressionFit = 8,894874, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), professor(A).  [covers 7,0/58,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 58,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,688535 (regressionFit = 8,688533, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 28,0/58,0 pos, 0,0/0,0 neg]
%     Score = -9,125980 (regressionFit = 9,125978, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 44,0/58,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 58,0/58,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 58,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,894876 (regressionFit = 8,894874, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 51,0/58,0 pos, 0,0/0,0 neg]
%     Score = -9,113614 (regressionFit = 9,113612, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 23,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,852718 (regressionFit = 8,852715, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 8,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,827671 (regressionFit = 8,827669, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 53,0/58,0 pos, 0,0/0,0 neg]
%     Score = -9,008144 (regressionFit = 9,008142, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, A).  [covers 4,0/58,0 pos, 0,0/0,0 neg]
%     Score = -9,078427 (regressionFit = 9,078425, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 37,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,523862 (regressionFit = 8,523860, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(A, _).  [covers 5,0/58,0 pos, 0,0/0,0 neg]
%     Score = -8,874754 (regressionFit = 8,874752, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 13,0/58,0 pos, 0,0/0,0 neg]
%     Score = -7,579188 (regressionFit = 7,579186, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,579188): advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]
%     Score = -9,000071 (regressionFit = 9,000069, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_1).  [covers 5,0/58,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,158.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 28 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 17,0/58,0 pos, 0,0/0,0 neg]
% This clause covers 17 positive examples, of which 17 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 13 26 40 48 86 104 125 141 148

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 153,0/153,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 153,0/153,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -3,379194 (regressionFit = 3,379193, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/153,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,379194): advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,372660 (regressionFit = 3,372659, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 27,0/153,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,372660): advisedby(A, _) :- inphase(A, post_generals).  [covers 27,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,385536 (regressionFit = 3,385535, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 22,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,368913 (regressionFit = 3,368911, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 41,0/153,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,368913): advisedby(A, _) :- inphase(A, post_quals).  [covers 41,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,374675 (regressionFit = 3,374674, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 39,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,376822 (regressionFit = 3,376821, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 33,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,378764 (regressionFit = 3,378763, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 27,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,377632 (regressionFit = 3,377631, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 30,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,385497 (regressionFit = 3,385496, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 69,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,352676 (regressionFit = 3,352675, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 55,0/153,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,352676): advisedby(_, A) :- publication(_, A).  [covers 55,0/153,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 153,0/153,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 153,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,377632 (regressionFit = 3,377631, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 123,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,145690 (regressionFit = 3,145689, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,145690): advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,363708 (regressionFit = 3,363706, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 62,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,361351 (regressionFit = 3,361350, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 66,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,376633 (regressionFit = 3,376632, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 33,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,381354 (regressionFit = 3,381353, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 18,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,381084 (regressionFit = 3,381082, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 19,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,283891 (regressionFit = 3,283890, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 4,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,359494 (regressionFit = 3,359493, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 10,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,228210 (regressionFit = 3,228209, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 3,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,357182 (regressionFit = 3,357181, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 20,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,384539 (regressionFit = 3,384538, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_7).  [covers 5,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,383141 (regressionFit = 3,383140, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 11,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,378454 (regressionFit = 3,378452, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 28,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,384314 (regressionFit = 3,384313, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_12).  [covers 6,0/153,0 pos, 0,0/0,0 neg]
%     Score = -3,382397 (regressionFit = 3,382396, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 14,0/153,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,022.
% Will extend: advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]
Comparing variance: 3.6185046728523623E-17 to score=0.0025 #egs=135.0
Comparing variance: 0.17476047594168778 to score=0.0025 #egs=18.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 18,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,174760)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,174760) into position #1 in the search queue (new size=3).

% Time for loop #5: 37 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(_, A) :- student(A).  [covers 135,0/153,0 pos, 0,0/0,0 neg]
% This clause covers 135 positive examples, of which 135 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 2 4 5 6 7 8 10 11 12

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -3,091575 (regressionFit = 3,091573, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,091575): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -2,971539 (regressionFit = 2,971538, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_affiliate).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,971539): advisedby(_, A) :- hasposition(A, faculty_affiliate).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,141225 (regressionFit = 3,141224, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,066302 (regressionFit = 3,066301, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,118617 (regressionFit = 3,118616, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,145641 (regressionFit = 3,145640, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,138756 (regressionFit = 3,138754, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -2,906177 (regressionFit = 2,906175, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,906177): advisedby(_, A) :- publication(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 17,0/18,0 pos, 0,0/0,0 neg]
%     Score = -2,872594 (regressionFit = 2,872592, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,872594): advisedby(A, _) :- ta(_, A, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -2,870304 (regressionFit = 2,870303, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,870304): advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -3,100446 (regressionFit = 3,100445, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 1,0/18,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,175.
% Will extend: advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
Comparing variance: 0.15800772116599884 to score=0.0025 #egs=11.0
Comparing variance: 0.16174544722369813 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 11,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,158008)
%         ILP node to extend: advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,158008) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 7,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,161745)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,161745) into position #1 in the search queue (new size=4).

% Time for loop #6: 11 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

***** Warning: % Have only 7 positive examples, so cannot choose 10 of them. *****


% Have these 7 positive seeds: 0 1 2 3 4 5 6

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 5,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -1,030743 (regressionFit = 1,030742, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,030743): advisedby(A, _) :- publication(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,864697 (regressionFit = 0,864696, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,864697): advisedby(_, A) :- publication(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,938199 (regressionFit = 0,938198, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,746744 (regressionFit = 0,746743, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,746744): advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 2,0/7,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,162.
% Will extend: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]'
%     Score = -2,870304 (regressionFit = 2,870303, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 0 1 2 4 6 7
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for courselevel/2.
% [ LazyGroundClauseIndex ]  Building full index for courselevel/2 with 104 assertions.
% [ LazyGroundClauseIndex ]  Building full index for samecourse/2 with 104 assertions.
% [ LazyGroundClauseIndex ]  Building full index for ta/3 with 142 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for ta/3.
% [ LazyGroundClauseIndex ]  Building full index for taughtby/3 with 219 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for taughtby/3.
%     Score = -0,255416 (regressionFit = 0,255414, penalties=2.2600000000000004E-6) for clause:  advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,255416): advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_300).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_400).  [covers 9,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,319339 (regressionFit = 1,319336, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), hasposition(A, faculty_affiliate).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,664144 (regressionFit = 1,664142, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), hasposition(A, faculty_emeritus).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,499876 (regressionFit = 1,499874, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), inphase(A, post_generals).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), inphase(A, post_quals).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), inphase(A, pre_quals).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), professor(A).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,733358 (regressionFit = 1,733355, penalties=2.3500000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), publication(_, A).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,708415 (regressionFit = 0,708413, penalties=2.4500000000000003E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), publication(_, A).  [covers 4,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  advisedby(_, A) :- taughtby(B, A, _), samecourse(B, B).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), sameperson(A, A).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), sameperson(A, A).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), student(A).  [covers 10,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.25E-6) for clause:  advisedby(A, B) :- taughtby(C, B, _), ta(C, A, _).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,664144 (regressionFit = 1,664142, penalties=2.25E-6) for clause:  advisedby(A, B) :- taughtby(_, B, C), ta(_, A, C).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,677948 (regressionFit = 1,677945, penalties=2.46E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), ta(_, A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,722873 (regressionFit = 1,722871, penalties=2.25E-6) for clause:  advisedby(_, A) :- taughtby(B, A, C), ta(B, _, C).  [covers 4,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.25E-6) for clause:  advisedby(_, A) :- taughtby(B, A, _), taughtby(B, A, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.46E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), taughtby(_, A, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.4500000000000003E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _), tempadvisedby(_, A).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,596072 (regressionFit = 1,596070, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), yearsinprogram(A, year_5).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), yearsinprogram(A, year_7).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), yearsinprogram(A, year_6).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), yearsinprogram(A, year_2).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- taughtby(_, B, _), yearsinprogram(A, year_3).  [covers 1,0/11,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,158.
% Will extend: advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #8: 36 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      advisedby(_, A) :- taughtby(B, A, _), courselevel(B, level_500).  [covers 3,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (8).

% ******************************************
Created a leaf under (advisedby(A, B) :- inphase(A, post_generals))
Created a leaf under (advisedby(A, B) :- yearsinprogram(A, year_3))

%%%%%  WILL-Produced Tree #5 @ 14:10:42 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( inphase(A, post_generals) )
%   | then return 0.4059353527337858;  // std dev = 0,134, 46,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( yearsinprogram(A, year_3) )
%   | | then return 0.458030772715214;  // std dev = 0,093, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( yearsinprogram(A, year_4) )
%   | | | then return 0.3383782489762331;  // std dev = 1,049, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.02212041623299101;  // std dev = 2,545, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   else if ( student(B) )
%   | then return -0.09269127618926075;  // std dev = 6,99e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else if ( taughtby(C, B, D) )
%   | | then if ( courselevel(C, level_500) )
%   | | | then return 0.5310769171121151;  // std dev = 0,202, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.29327592778833345;  // std dev = 0,463, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( yearsinprogram(A, year_5) )
%   | | | then return 0.4562399465873246;  // std dev = 0,027, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.017954827804658346;  // std dev = 0,864, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


% Clauses:

advisedby(A, B, 0.4059353527337858) :- 
     hasposition(B, faculty), 
     inphase(A, post_generals), 
     !. // Clause #1.

advisedby(A, B, 0.458030772715214) :- 
     hasposition(B, faculty), 
     yearsinprogram(A, year_3), 
     !. // Clause #2.

advisedby(A, B, 0.3383782489762331) :- 
     hasposition(B, faculty), 
     yearsinprogram(A, year_4), 
     !. // Clause #3.

advisedby(A, B, -0.02212041623299101) :- 
     hasposition(B, faculty), 
     !. // Clause #4.

advisedby(A, B, -0.09269127618926075) :- 
     student(B), 
     !. // Clause #5.

advisedby(A, B, 0.5310769171121151) :- 
     taughtby(C, B, D), 
     courselevel(C, level_500), 
     !. // Clause #6.

advisedby(A, B, -0.29327592778833345) :- 
     taughtby(C, B, D), 
     !. // Clause #7.

advisedby(A, B, 0.4562399465873246) :- 
     yearsinprogram(A, year_5), 
     !. // Clause #8.

advisedby(A, B, -0.017954827804658346) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.4059353527337858) :-  /* #neg=1 #pos=45 */ 
   hasposition(b, faculty),
   inphase(a, post_generals),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.458030772715214) :-  /* #pos=14 */ 
   hasposition(b, faculty),
   yearsinprogram(a, year_3),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.3383782489762331) :-  /* #neg=1 #pos=16 */ 
   hasposition(b, faculty),
   yearsinprogram(a, year_4),
   !. // Flattened version of clause #3.

flattened_advisedby(underscore, a, -0.02212041623299101) :-  /* #neg=26 #pos=15 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, a, -0.09269127618926075) :-  /* #neg=135 */ 
   student(a),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, 0.5310769171121151) :-  /* #pos=3 */ 
   taughtby(uniqueVar30, a, underscore),
   courselevel(uniqueVar30, level_500),
   !. // Flattened version of clause #6.

flattened_advisedby(underscore, a, -0.29327592778833345) :-  /* #neg=8 */ 
   taughtby(underscore, a, underscore),
   !. // Flattened version of clause #7.

flattened_advisedby(a, underscore, 0.4562399465873246) :-  /* #pos=3 */ 
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #8.

flattened_advisedby(underscore, underscore, -0.017954827804658346) :-  /* #neg=3 #pos=1 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   taughtby(uniqueVar30, a, underscore)
%   courselevel(uniqueVar30, level_500)
%   taughtby(underscore, a, underscore)
%   yearsinprogram(a, year_3)
%   yearsinprogram(a, year_4)
%   hasposition(a, faculty)
%   inphase(a, post_generals)
%   yearsinprogram(a, year_5)
%   hasposition(b, faculty)
%   student(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 5 trees is 1,545 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.15800772116599884
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 192 of the 52.344 negative examples.
% Dataset size: 289
Computing probabilities
prob time:39 milliseconds
No hidden examples for : advisedby
Time to build dataset: 48 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07817277938852663
Set score:0.0025

% Have these 7 positive seeds: 2 6 13 52 60 121 221

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 289,0/289,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 289,0/289,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -22,253067 (regressionFit = 22,253066, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 27,0/289,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,253067): advisedby(A, _) :- hasposition(A, faculty).  [covers 27,0/289,0 pos, 0,0/0,0 neg]
%     Score = -18,374501 (regressionFit = 18,374500, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,374501): advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,013890 (regressionFit = 22,013889, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 70,0/289,0 pos, 0,0/0,0 neg]
%     Score = -21,907317 (regressionFit = 21,907316, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 85,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,580204 (regressionFit = 22,580203, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 43,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,216727 (regressionFit = 22,216726, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 30,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,101524 (regressionFit = 22,101523, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 38,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,011365 (regressionFit = 22,011364, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 42,0/289,0 pos, 0,0/0,0 neg]
%     Score = -19,191828 (regressionFit = 19,191827, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 141,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,485560 (regressionFit = 22,485559, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 131,0/289,0 pos, 0,0/0,0 neg]
%     Score = -20,772270 (regressionFit = 20,772269, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 159,0/289,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 289,0/289,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 289,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,011365 (regressionFit = 22,011364, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 247,0/289,0 pos, 0,0/0,0 neg]
%     Score = -19,191828 (regressionFit = 19,191827, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 148,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,577960 (regressionFit = 22,577959, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 122,0/289,0 pos, 0,0/0,0 neg]
%     Score = -21,352015 (regressionFit = 21,352014, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 80,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,318599 (regressionFit = 22,318598, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 48,0/289,0 pos, 0,0/0,0 neg]
%     Score = -19,755411 (regressionFit = 19,755409, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 133,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,435728 (regressionFit = 22,435727, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 13,0/289,0 pos, 0,0/0,0 neg]
%     Score = -20,213993 (regressionFit = 20,213992, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 73,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,246223 (regressionFit = 22,246222, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 24,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,591061 (regressionFit = 22,591060, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 21,0/289,0 pos, 0,0/0,0 neg]
%     Score = -21,396881 (regressionFit = 21,396880, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 43,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,415429 (regressionFit = 22,415428, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 40,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,541223 (regressionFit = 22,541222, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 14,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,463761 (regressionFit = 22,463760, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 11,0/289,0 pos, 0,0/0,0 neg]
%     Score = -22,311845 (regressionFit = 22,311844, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 23,0/289,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13733631691054263 to score=0.0025 #egs=116.0
Comparing variance: 0.014124204172611428 to score=0.0025 #egs=173.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 116,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,137336)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,137336) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 173,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,014124)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,014124) into the LAST position (#2) in the search queue.

% Time for loop #1: 72 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/289,0 pos, 0,0/0,0 neg]
% This clause covers 116 positive examples, of which 116 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/116,0 pos, 0,0/0,0 neg]'
%     Score = -18,374501 (regressionFit = 18,374500, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/116,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 26 45 49 64 82
%     Score = -15,799185 (regressionFit = 15,799182, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/116,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,799185): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 40,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,631950 (regressionFit = 15,631948, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 13,0/116,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,631950): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 13,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,870577 (regressionFit = 15,870574, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 52,0/116,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 116,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,829161 (regressionFit = 15,829158, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), projectmember(_, A).  [covers 5,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,930898 (regressionFit = 15,930896, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 61,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,901798 (regressionFit = 15,901796, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 103,0/116,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 116,0/116,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 116,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,724996 (regressionFit = 15,724994, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 113,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,763036 (regressionFit = 15,763034, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 47,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,927982 (regressionFit = 15,927980, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 8,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,919794 (regressionFit = 15,919792, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 112,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,920256 (regressionFit = 15,920253, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 70,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,900434 (regressionFit = 15,900432, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 25,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,922294 (regressionFit = 15,922292, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 17,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,826873 (regressionFit = 15,826871, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_7).  [covers 5,0/116,0 pos, 0,0/0,0 neg]
%     Score = -15,410761 (regressionFit = 15,410759, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,410761): advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,137.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09083976710547927 to score=0.0025 #egs=25.0
Comparing variance: 0.1443930176019358 to score=0.0025 #egs=91.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 25,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,090840)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,090840) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 91,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,144393)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/116,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,144393) into position #1 in the search queue (new size=3).

% Time for loop #2: 61 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/116,0 pos, 0,0/0,0 neg]
% This clause covers 25 positive examples, of which 25 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 116,0/91,0 pos, 0,0/0,0 neg]'
%     Score = -18,374501 (regressionFit = 18,374500, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 91,0/91,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 16 43 49 52 67 70
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9600000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), hasposition(A, faculty_emeritus).  [covers 1,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,122516 (regressionFit = 13,122514, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 31,0/91,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,122516): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 31,0/91,0 pos, 0,0/0,0 neg]
%     Score = -12,915560 (regressionFit = 12,915558, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,915560): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]
%     Score = -12,984742 (regressionFit = 12,984740, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), professor(A).  [covers 3,0/91,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 91,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,131208 (regressionFit = 13,131206, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 42,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,040079 (regressionFit = 13,040077, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 80,0/91,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 91,0/91,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 91,0/91,0 pos, 0,0/0,0 neg]
%     Score = -12,984742 (regressionFit = 12,984740, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 88,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,131930 (regressionFit = 13,131927, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 35,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,136970 (regressionFit = 13,136968, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 7,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,138566 (regressionFit = 13,138564, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 87,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,135725 (regressionFit = 13,135723, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 51,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,074147 (regressionFit = 13,074145, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 17,0/91,0 pos, 0,0/0,0 neg]
%     Score = -12,989256 (regressionFit = 12,989254, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 25,0/91,0 pos, 0,0/0,0 neg]
%     Score = -13,139765 (regressionFit = 13,139763, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 15,0/91,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,144.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12195719349345345 to score=0.0025 #egs=37.0
Comparing variance: 0.1556137319570176 to score=0.0025 #egs=54.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 37,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,121957)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,121957) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,155614)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 91,0/91,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,155614) into position #1 in the search queue (new size=4).

% Time for loop #3: 45 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/91,0 pos, 0,0/0,0 neg]
% This clause covers 37 positive examples, of which 37 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 91,0/54,0 pos, 0,0/0,0 neg]'
%     Score = -18,374501 (regressionFit = 18,374500, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 54,0/54,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 13 15 34 37 42 47
%     Score = -8,139006 (regressionFit = 8,139003, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 31,0/54,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,139006): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 31,0/54,0 pos, 0,0/0,0 neg]
%     Score = -7,822511 (regressionFit = 7,822509, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,822511): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 54,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,194557 (regressionFit = 8,194554, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 45,0/54,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 54,0/54,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 54,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,297399 (regressionFit = 8,297397, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 51,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,283964 (regressionFit = 8,283962, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 23,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,398428 (regressionFit = 8,398426, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 51,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,399348 (regressionFit = 8,399346, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 29,0/54,0 pos, 0,0/0,0 neg]
%     Score = -8,169155 (regressionFit = 8,169153, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 17,0/54,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,156.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 24 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 12,0/54,0 pos, 0,0/0,0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/37,0 pos, 0,0/0,0 neg]'
%     Score = -12,915560 (regressionFit = 12,915558, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 37,0/37,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 7 14 15 18 21 29
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), professor(B).  [covers 37,0/37,0 pos, 0,0/0,0 neg]
%     Score = -4,340028 (regressionFit = 4,340025, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), publication(_, A).  [covers 26,0/37,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,340028): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), publication(_, A).  [covers 26,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), publication(_, B).  [covers 35,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), sameperson(A, A).  [covers 37,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), sameperson(B, B).  [covers 37,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), student(A).  [covers 37,0/37,0 pos, 0,0/0,0 neg]
%     Score = -4,071526 (regressionFit = 4,071522, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,071526): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), taughtby(_, B, _).  [covers 36,0/37,0 pos, 0,0/0,0 neg]
%     Score = -4,512111 (regressionFit = 4,512108, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), tempadvisedby(_, B).  [covers 22,0/37,0 pos, 0,0/0,0 neg]
%     Score = -4,422672 (regressionFit = 4,422669, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 15,0/37,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), yearsinprogram(A, year_8).  [covers 2,0/37,0 pos, 0,0/0,0 neg]
%     Score = -4,438655 (regressionFit = 4,438652, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), yearsinprogram(A, year_4).  [covers 6,0/37,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,122.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #5: 25 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals), ta(_, A, _).  [covers 12,0/37,0 pos, 0,0/0,0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/25,0 pos, 0,0/0,0 neg]'
%     Score = -15,410761 (regressionFit = 15,410759, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/25,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 1 8 10 12 16 24
%     Score = -1,886079 (regressionFit = 1,886076, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,886079): advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, pre_quals).  [covers 1,0/25,0 pos, 0,0/0,0 neg]
%     Score = -2,019686 (regressionFit = 2,019683, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_quals).  [covers 9,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), professor(B).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), projectmember(_, B).  [covers 1,0/25,0 pos, 0,0/0,0 neg]
%     Score = -2,199362 (regressionFit = 2,199359, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), publication(_, A).  [covers 19,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), publication(_, B).  [covers 23,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), sameperson(A, A).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), sameperson(B, B).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), student(A).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%     Score = -1,933349 (regressionFit = 1,933346, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), ta(_, A, _).  [covers 12,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), taughtby(_, A, _).  [covers 1,0/25,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), taughtby(_, B, _).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%     Score = -2,237306 (regressionFit = 2,237303, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), tempadvisedby(_, B).  [covers 19,0/25,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,091.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1229784458215233 to score=0.0025 #egs=15.0
Comparing variance: 0.004139884717499376 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,004140)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/25,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,004140) into the LAST position (#2) in the search queue.

% Time for loop #6: 30 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 15,0/25,0 pos, 0,0/0,0 neg]
% This clause covers 15 positive examples, of which 15 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 71 77 81 148 160 162 169

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -2,441891 (regressionFit = 2,441890, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,441891): advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442544 (regressionFit = 2,442543, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 30,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,421096 (regressionFit = 2,421095, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 30,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,421096): advisedby(A, _) :- inphase(A, post_quals).  [covers 30,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,441292 (regressionFit = 2,441291, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 36,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,441735 (regressionFit = 2,441734, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 30,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,441135 (regressionFit = 2,441134, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 38,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,438860 (regressionFit = 2,438859, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 39,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,430223 (regressionFit = 2,430222, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 70,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,407236 (regressionFit = 2,407235, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 56,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,407236): advisedby(_, A) :- publication(_, A).  [covers 56,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,438860 (regressionFit = 2,438859, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 134,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,393999 (regressionFit = 2,393997, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 148,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,393999): advisedby(_, A) :- student(A).  [covers 148,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,432305 (regressionFit = 2,432304, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 75,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,436297 (regressionFit = 2,436296, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 80,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,438772 (regressionFit = 2,438770, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 40,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442690 (regressionFit = 2,442688, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 12,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442018 (regressionFit = 2,442017, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 23,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442457 (regressionFit = 2,442456, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 19,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,301756 (regressionFit = 2,301755, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,301756): advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,406919 (regressionFit = 2,406918, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 13,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442628 (regressionFit = 2,442627, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 13,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442976 (regressionFit = 2,442974, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_6).  [covers 10,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442695 (regressionFit = 2,442694, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 15,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442921 (regressionFit = 2,442920, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 11,0/173,0 pos, 0,0/0,0 neg]
%     Score = -2,442207 (regressionFit = 2,442205, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 23,0/173,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,014.
% Will extend: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02933823953591844 to score=0.0025 #egs=18.0
Comparing variance: 0.011443008205192172 to score=0.0025 #egs=155.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 18,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,029338)
%         ILP node to extend: advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,029338) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 155,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,011443)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,011443) into position #2 in the search queue (new size=3).

% Time for loop #7: 47 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/173,0 pos, 0,0/0,0 neg]
% This clause covers 18 positive examples, of which 18 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/18,0 pos, 0,0/0,0 neg]'
%     Score = -2,301756 (regressionFit = 2,301755, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 18,0/18,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 2 3 4 7 8 10 12
%     Score = -0,108363 (regressionFit = 0,108361, penalties=2.06E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), hasposition(B, faculty_adjunct).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,108363): advisedby(A, B) :- yearsinprogram(A, year_5), hasposition(B, faculty_adjunct).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,515206 (regressionFit = 0,515204, penalties=2.1600000000000005E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), inphase(A, pre_quals).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,505707 (regressionFit = 0,505705, penalties=2.1600000000000005E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), inphase(A, post_quals).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,477168 (regressionFit = 0,477166, penalties=2.1600000000000005E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), inphase(A, post_generals).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,470831 (regressionFit = 0,470829, penalties=2.06E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), inphase(B, post_quals).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,485555 (regressionFit = 0,485553, penalties=2.06E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), inphase(B, pre_quals).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,007028 (regressionFit = 0,007026, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,007028): advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,526984 (regressionFit = 0,526982, penalties=2.2500000000000005E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), publication(_, A).  [covers 14,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,496568 (regressionFit = 0,496566, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), publication(_, B).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), sameperson(A, A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), sameperson(B, B).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), student(A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,007028 (regressionFit = 0,007026, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), student(B).  [covers 14,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,481072 (regressionFit = 0,481070, penalties=2.3600000000000007E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5), ta(_, A, _).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,408991 (regressionFit = 0,408988, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), ta(_, B, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), tempadvisedby(B, _).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,470831 (regressionFit = 0,470829, penalties=1.9400000000000005E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), yearsinprogram(B, year_5).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9600000000000003E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), yearsinprogram(B, year_1).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9600000000000003E-6) for clause:  advisedby(A, B) :- yearsinprogram(A, year_5), yearsinprogram(B, year_3).  [covers 2,0/18,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,029.
% Will extend: advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0017563760668695694 to score=0.0025 #egs=4.0
Comparing variance: -3.96508223080413E-18 to score=0.0025 #egs=14.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #8: 14 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      advisedby(A, B) :- yearsinprogram(A, year_5), professor(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (8).

% ******************************************
Created a leaf under (advisedby(A, B) :- yearsinprogram(A, year_5))
Created a leaf under (advisedby(A, B) :- inphase(A, post_generals))

%%%%%  WILL-Produced Tree #6 @ 14:10:43 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( yearsinprogram(A, year_5) )
%   | then if ( inphase(A, post_generals) )
%   | | then return 0.19466852406400428;  // std dev = 1,358, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.4479531607671737;  // std dev = 0,064, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( inphase(A, post_generals) )
%   | | then if ( ta(C, A, D) )
%   | | | then return 0.35063564043801015;  // std dev = 0,204, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.11744709710502196;  // std dev = 2,007, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else if ( inphase(A, pre_quals) )
%   | | | then return 0.2860169578923429;  // std dev = 1,441, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.0365964401855788;  // std dev = 2,397, 42,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   else if ( yearsinprogram(A, year_5) )
%   | then if ( professor(B) )
%   | | then return 0.3240639184938767;  // std dev = 0,084, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08518475138839685;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.08798731333059098;  // std dev = 0,107, 155,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */


% Clauses:

advisedby(A, B, 0.19466852406400428) :- 
     hasposition(B, faculty), 
     yearsinprogram(A, year_5), 
     inphase(A, post_generals), 
     !. // Clause #1.

advisedby(A, B, 0.4479531607671737) :- 
     hasposition(B, faculty), 
     yearsinprogram(A, year_5), 
     !. // Clause #2.

advisedby(A, B, 0.35063564043801015) :- 
     hasposition(B, faculty), 
     inphase(A, post_generals), 
     ta(C, A, D), 
     !. // Clause #3.

advisedby(A, B, 0.11744709710502196) :- 
     hasposition(B, faculty), 
     inphase(A, post_generals), 
     !. // Clause #4.

advisedby(A, B, 0.2860169578923429) :- 
     hasposition(B, faculty), 
     inphase(A, pre_quals), 
     !. // Clause #5.

advisedby(A, B, 0.0365964401855788) :- 
     hasposition(B, faculty), 
     !. // Clause #6.

advisedby(A, B, 0.3240639184938767) :- 
     yearsinprogram(A, year_5), 
     professor(B), 
     !. // Clause #7.

advisedby(A, B, -0.08518475138839685) :- 
     yearsinprogram(A, year_5), 
     !. // Clause #8.

advisedby(A, B, -0.08798731333059098) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.19466852406400428) :-  /* #neg=2 #pos=13 */ 
   hasposition(b, faculty),
   yearsinprogram(a, year_5),
   inphase(a, post_generals),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.4479531607671737) :-  /* #pos=10 */ 
   hasposition(b, faculty),
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.35063564043801015) :-  /* #pos=12 */ 
   hasposition(b, faculty),
   inphase(a, post_generals),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.11744709710502196) :-  /* #neg=5 #pos=20 */ 
   hasposition(b, faculty),
   inphase(a, post_generals),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.2860169578923429) :-  /* #neg=3 #pos=9 */ 
   hasposition(b, faculty),
   inphase(a, pre_quals),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, 0.0365964401855788) :-  /* #neg=16 #pos=26 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #6.

flattened_advisedby(a, b, 0.3240639184938767) :-  /* #pos=4 */ 
   yearsinprogram(a, year_5),
   professor(b),
   !. // Flattened version of clause #7.

flattened_advisedby(a, underscore, -0.08518475138839685) :-  /* #neg=14 */ 
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #8.

flattened_advisedby(underscore, underscore, -0.08798731333059098) :-  /* #neg=152 #pos=3 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   professor(b)
%   inphase(a, pre_quals)
%   ta(underscore, a, underscore)
%   hasposition(a, faculty)
%   yearsinprogram(a, year_5)
%   inphase(a, post_generals)
%   hasposition(b, faculty)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 6 trees is 1,923 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02933823953591844
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 182 of the 52.344 negative examples.
% Dataset size: 279
Computing probabilities
prob time:51 milliseconds
No hidden examples for : advisedby
Time to build dataset: 61 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07098388360911204
Set score:0.0025

% Have these 7 positive seeds: 23 52 135 154 164 245 256

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 279,0/279,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 279,0/279,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -19,550436 (regressionFit = 19,550435, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/279,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,550436): advisedby(A, _) :- hasposition(A, faculty).  [covers 25,0/279,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_affiliate).  [covers 2,0/279,0 pos, 0,0/0,0 neg]
%     Score = -17,239171 (regressionFit = 17,239170, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/279,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,239171): advisedby(_, A) :- hasposition(A, faculty).  [covers 119,0/279,0 pos, 0,0/0,0 neg]
%     Score = -18,971312 (regressionFit = 18,971311, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 83,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,494972 (regressionFit = 19,494971, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 67,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,421229 (regressionFit = 19,421228, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 37,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,340351 (regressionFit = 19,340350, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 42,0/279,0 pos, 0,0/0,0 neg]
%     Score = -17,052320 (regressionFit = 17,052319, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,052320): advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,336609 (regressionFit = 19,336607, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 117,0/279,0 pos, 0,0/0,0 neg]
%     Score = -18,989374 (regressionFit = 18,989373, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 166,0/279,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 279,0/279,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 279,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,340351 (regressionFit = 19,340350, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 237,0/279,0 pos, 0,0/0,0 neg]
%     Score = -17,052320 (regressionFit = 17,052319, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 146,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,754138 (regressionFit = 19,754137, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 113,0/279,0 pos, 0,0/0,0 neg]
%     Score = -18,848936 (regressionFit = 18,848934, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 77,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,662726 (regressionFit = 19,662725, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 47,0/279,0 pos, 0,0/0,0 neg]
%     Score = -17,545909 (regressionFit = 17,545908, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 126,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,640801 (regressionFit = 19,640800, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 17,0/279,0 pos, 0,0/0,0 neg]
%     Score = -18,857982 (regressionFit = 18,857981, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 78,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,699638 (regressionFit = 19,699637, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_7).  [covers 13,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,303925 (regressionFit = 19,303924, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 37,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,792305 (regressionFit = 19,792304, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 32,0/279,0 pos, 0,0/0,0 neg]
%     Score = -19,711285 (regressionFit = 19,711284, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_6).  [covers 10,0/279,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12821292073004556 to score=0.0025 #egs=133.0
Comparing variance: 2.1373439768426722E-9 to score=0.0025 #egs=146.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 133,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,128213)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,128213) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 66 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- professor(A).  [covers 133,0/279,0 pos, 0,0/0,0 neg]
% This clause covers 133 positive examples, of which 133 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 133,0/133,0 pos, 0,0/0,0 neg]'
%     Score = -17,052320 (regressionFit = 17,052319, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 133,0/133,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 48 55 59 63 79 85 88
%     Score = -16,994902 (regressionFit = 16,994899, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 119,0/133,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,994902): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 119,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,472437 (regressionFit = 16,472435, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,472437): advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,012639 (regressionFit = 17,012637, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 16,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,006535 (regressionFit = 17,006533, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 46,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,519993 (regressionFit = 16,519991, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 63,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,990392 (regressionFit = 16,990390, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 111,0/133,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 133,0/133,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 133,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,721862 (regressionFit = 16,721860, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 126,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,835630 (regressionFit = 16,835628, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 58,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,051585 (regressionFit = 17,051582, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 11,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,052266 (regressionFit = 17,052264, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 123,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,031286 (regressionFit = 17,031284, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 78,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,597402 (regressionFit = 16,597400, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 23,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,914254 (regressionFit = 16,914252, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 20,0/133,0 pos, 0,0/0,0 neg]
%     Score = -17,005220 (regressionFit = 17,005218, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 15,0/133,0 pos, 0,0/0,0 neg]
%     Score = -16,952217 (regressionFit = 16,952215, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_12).  [covers 3,0/133,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,128.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0870674748005959 to score=0.0025 #egs=53.0
Comparing variance: 0.1482232378692649 to score=0.0025 #egs=80.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 53,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087067)
%         ILP node to extend: advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087067) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 80,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,148223)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 133,0/133,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,148223) into position #1 in the search queue (new size=2).

% Time for loop #2: 63 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/133,0 pos, 0,0/0,0 neg]
% This clause covers 53 positive examples, of which 53 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 133,0/80,0 pos, 0,0/0,0 neg]'
%     Score = -17,052320 (regressionFit = 17,052319, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 80,0/80,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 4 5 31 56 59 72 73
%     Score = -11,758167 (regressionFit = 11,758165, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,758167): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,729705 (regressionFit = 11,729703, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 69,0/80,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,729705): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 69,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,177887 (regressionFit = 11,177885, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 46,0/80,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,177887): advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 46,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,656041 (regressionFit = 11,656039, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 16,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,666999 (regressionFit = 11,666997, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 7,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,532324 (regressionFit = 11,532322, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), projectmember(_, A).  [covers 5,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,611957 (regressionFit = 11,611955, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 27,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,838297 (regressionFit = 11,838295, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 60,0/80,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,666999 (regressionFit = 11,666997, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 73,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,814931 (regressionFit = 11,814929, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 35,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,849297 (regressionFit = 11,849295, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 8,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,842829 (regressionFit = 11,842826, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 71,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,807599 (regressionFit = 11,807597, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 45,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,058859 (regressionFit = 11,058857, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,058859): advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,834761 (regressionFit = 11,834759, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 17,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,129209 (regressionFit = 11,129207, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,843950 (regressionFit = 11,843948, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 20,0/80,0 pos, 0,0/0,0 neg]
%     Score = -11,833917 (regressionFit = 11,833915, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_1).  [covers 3,0/80,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,148.
% Will extend: advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
Comparing variance: 0.009503412823205548 to score=0.0025 #egs=4.0
Comparing variance: 0.1450110960269844 to score=0.0025 #egs=76.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 76,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,145011)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,145011) into position #1 in the search queue (new size=2).

% Time for loop #3: 39 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- professor(B), tempadvisedby(A, _).  [covers 4,0/80,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 80,0/76,0 pos, 0,0/0,0 neg]'
%     Score = -17,052320 (regressionFit = 17,052319, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 76,0/76,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 11 21 24 25 36 57 69
%     Score = -10,888864 (regressionFit = 10,888862, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 4,0/76,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,888864): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 4,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,825726 (regressionFit = 10,825723, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 65,0/76,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,825726): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 65,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,459756 (regressionFit = 10,459754, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 45,0/76,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,459756): advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 45,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,769196 (regressionFit = 10,769194, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 7,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,751982 (regressionFit = 10,751979, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), projectmember(_, A).  [covers 5,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,895315 (regressionFit = 10,895313, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 27,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,952952 (regressionFit = 10,952949, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 56,0/76,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 76,0/76,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 76,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,769196 (regressionFit = 10,769194, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 69,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,935879 (regressionFit = 10,935877, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 34,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,994804 (regressionFit = 10,994802, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 8,0/76,0 pos, 0,0/0,0 neg]
%     Score = -11,018369 (regressionFit = 11,018367, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 67,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,985916 (regressionFit = 10,985914, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 42,0/76,0 pos, 0,0/0,0 neg]
%     Score = -11,018964 (regressionFit = 11,018962, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 18,0/76,0 pos, 0,0/0,0 neg]
%     Score = -10,454667 (regressionFit = 10,454664, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,454667): advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,145.
% Will extend: advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 34 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- professor(B), yearsinprogram(A, year_4).  [covers 17,0/76,0 pos, 0,0/0,0 neg]
% This clause covers 17 positive examples, of which 17 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/53,0 pos, 0,0/0,0 neg]'
%     Score = -16,472437 (regressionFit = 16,472435, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/53,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 2 6 8 24 25 28
%     Score = -4,486358 (regressionFit = 4,486355, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), hasposition(B, faculty).  [covers 50,0/53,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,486358): advisedby(A, B) :- professor(B), inphase(A, post_generals), hasposition(B, faculty).  [covers 50,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,579699 (regressionFit = 4,579696, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), publication(_, A).  [covers 36,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), publication(_, B).  [covers 51,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), sameperson(A, A).  [covers 53,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), sameperson(B, B).  [covers 53,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), student(A).  [covers 53,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,385318 (regressionFit = 4,385315, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,385318): advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), taughtby(_, B, _).  [covers 52,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,613964 (regressionFit = 4,613961, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), tempadvisedby(_, B).  [covers 33,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,524466 (regressionFit = 4,524462, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_7).  [covers 6,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,609289 (regressionFit = 4,609286, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_5).  [covers 15,0/53,0 pos, 0,0/0,0 neg]
%     Score = -4,603264 (regressionFit = 4,603261, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_4).  [covers 6,0/53,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_8).  [covers 2,0/53,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,087.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14359461430422682 to score=0.0025 #egs=23.0
Comparing variance: 0.03608795092057583 to score=0.0025 #egs=30.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 30,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036088)
%         ILP node to extend: advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/53,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036088) into the LAST position (#1) in the search queue.

% Time for loop #5: 35 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_generals), ta(_, A, _).  [covers 23,0/53,0 pos, 0,0/0,0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 53,0/30,0 pos, 0,0/0,0 neg]'
%     Score = -16,472437 (regressionFit = 16,472435, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 30,0/30,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 3 4 13 17 20 22
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), hasposition(B, faculty).  [covers 28,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), hasposition(B, faculty_affiliate).  [covers 2,0/30,0 pos, 0,0/0,0 neg]
%     Score = -1,037135 (regressionFit = 1,037132, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), publication(_, A).  [covers 25,0/30,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,037135): advisedby(A, B) :- professor(B), inphase(A, post_generals), publication(_, A).  [covers 25,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), publication(_, B).  [covers 29,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), sameperson(A, A).  [covers 30,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), sameperson(B, B).  [covers 30,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), student(A).  [covers 30,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), taughtby(_, B, _).  [covers 29,0/30,0 pos, 0,0/0,0 neg]
%     Score = -1,062876 (regressionFit = 1,062873, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), tempadvisedby(_, B).  [covers 19,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_9).  [covers 2,0/30,0 pos, 0,0/0,0 neg]
%     Score = -1,082375 (regressionFit = 1,082372, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_5).  [covers 8,0/30,0 pos, 0,0/0,0 neg]
%     Score = -0,993659 (regressionFit = 0,993656, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,993659): advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_8).  [covers 1,0/30,0 pos, 0,0/0,0 neg]
%     Score = -1,076794 (regressionFit = 1,076791, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_12).  [covers 3,0/30,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,036.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 26 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_generals), yearsinprogram(A, year_6).  [covers 9,0/30,0 pos, 0,0/0,0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 14:10:43 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( professor(B) )
%   then if ( inphase(A, post_generals) )
%   | then if ( ta(C, A, D) )
%   | | then return 0.1262810415567742;  // std dev = 1,817, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else if ( yearsinprogram(A, year_6) )
%   | | | then return 0.17579180808016742;  // std dev = 0,952, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2946370791720468;  // std dev = 0,295, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tempadvisedby(A, E) )
%   | | then return -0.3690916291342061;  // std dev = 0,195, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( yearsinprogram(A, year_4) )
%   | | | then return 0.25024821355204;  // std dev = 0,974, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.04312291795204935;  // std dev = 3,083, 59,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=33 */
%   else return -0.0785847412343949;  // std dev = 0,000559, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */


% Clauses:

advisedby(A, B, 0.1262810415567742) :- 
     professor(B), 
     inphase(A, post_generals), 
     ta(C, A, D), 
     !. // Clause #1.

advisedby(A, B, 0.17579180808016742) :- 
     professor(B), 
     inphase(A, post_generals), 
     yearsinprogram(A, year_6), 
     !. // Clause #2.

advisedby(A, B, 0.2946370791720468) :- 
     professor(B), 
     inphase(A, post_generals), 
     !. // Clause #3.

advisedby(A, B, -0.3690916291342061) :- 
     professor(B), 
     tempadvisedby(A, C), 
     !. // Clause #4.

advisedby(A, B, 0.25024821355204) :- 
     professor(B), 
     yearsinprogram(A, year_4), 
     !. // Clause #5.

advisedby(A, B, 0.04312291795204935) :- 
     professor(B), 
     !. // Clause #6.

advisedby(A, B, -0.0785847412343949) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.1262810415567742) :-  /* #neg=4 #pos=19 */ 
   professor(b),
   inphase(a, post_generals),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.17579180808016742) :-  /* #neg=1 #pos=8 */ 
   professor(b),
   inphase(a, post_generals),
   yearsinprogram(a, year_6),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.2946370791720468) :-  /* #pos=21 */ 
   professor(b),
   inphase(a, post_generals),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, -0.3690916291342061) :-  /* #neg=4 */ 
   professor(b),
   tempadvisedby(a, underscore),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.25024821355204) :-  /* #neg=1 #pos=16 */ 
   professor(b),
   yearsinprogram(a, year_4),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, 0.04312291795204935) :-  /* #neg=26 #pos=33 */ 
   professor(a),
   !. // Flattened version of clause #6.

flattened_advisedby(underscore, underscore, -0.0785847412343949) :-  /* #neg=146 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   professor(b)
%   tempadvisedby(a, underscore)
%   yearsinprogram(a, year_6)
%   yearsinprogram(a, year_4)
%   ta(underscore, a, underscore)
%   inphase(a, post_generals)
%   professor(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 7 trees is 2,255 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03608795092057583
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 211 of the 52.344 negative examples.
% Dataset size: 308
Computing probabilities
prob time:68 milliseconds
No hidden examples for : advisedby
Time to build dataset: 75 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.062330241954218754
Set score:0.0025

% Have these 3 positive seeds: 38 68 168

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 308,0/308,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 308,0/308,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -16,126609 (regressionFit = 16,126608, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,126609): advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]
%     Score = -19,018015 (regressionFit = 19,018014, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 97,0/308,0 pos, 0,0/0,0 neg]
%     Score = -18,743057 (regressionFit = 18,743056, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 67,0/308,0 pos, 0,0/0,0 neg]
%     Score = -17,436089 (regressionFit = 17,436088, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 140,0/308,0 pos, 0,0/0,0 neg]
%     Score = -18,792991 (regressionFit = 18,792990, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 127,0/308,0 pos, 0,0/0,0 neg]
%     Score = -18,244783 (regressionFit = 18,244782, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 165,0/308,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 308,0/308,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 308,0/308,0 pos, 0,0/0,0 neg]
%     Score = -18,983640 (regressionFit = 18,983639, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 272,0/308,0 pos, 0,0/0,0 neg]
%     Score = -17,436089 (regressionFit = 17,436088, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 168,0/308,0 pos, 0,0/0,0 neg]
%     Score = -19,172441 (regressionFit = 19,172439, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 134,0/308,0 pos, 0,0/0,0 neg]
%     Score = -17,962306 (regressionFit = 17,962305, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 136,0/308,0 pos, 0,0/0,0 neg]
%     Score = -16,352446 (regressionFit = 16,352444, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(_, A).  [covers 67,0/308,0 pos, 0,0/0,0 neg]
%     Score = -19,156821 (regressionFit = 19,156820, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 24,0/308,0 pos, 0,0/0,0 neg]
%     Score = -19,100556 (regressionFit = 19,100555, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 51,0/308,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10731564120907269 to score=0.0025 #egs=114.0
Comparing variance: 0.02006507807325776 to score=0.0025 #egs=194.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,107316)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,107316) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 194,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,020065)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,020065) into the LAST position (#2) in the search queue.

% Time for loop #1: 55 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/308,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]'
%     Score = -16,126609 (regressionFit = 16,126608, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 2 54 79 95 106 113
%     Score = -12,222974 (regressionFit = 12,222972, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 41,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,222974): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 41,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,082586 (regressionFit = 12,082584, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,082586): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,089881 (regressionFit = 12,089879, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 58,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,232583 (regressionFit = 12,232581, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 103,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,027061 (regressionFit = 12,027059, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 110,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,027061): advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 110,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,220715 (regressionFit = 12,220712, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 47,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,182134 (regressionFit = 12,182131, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 111,0/114,0 pos, 0,0/0,0 neg]
%     Score = -11,882718 (regressionFit = 11,882716, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,882718): advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,163345 (regressionFit = 12,163343, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_2).  [covers 5,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,023747 (regressionFit = 12,023745, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,074476 (regressionFit = 12,074474, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 23,0/114,0 pos, 0,0/0,0 neg]
%     Score = -12,170674 (regressionFit = 12,170672, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 15,0/114,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,107.
% Will extend: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07753148898967291 to score=0.0025 #egs=65.0
Comparing variance: 0.1396565177049344 to score=0.0025 #egs=49.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 65,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,077531)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,077531) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 49,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,139657)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,139657) into position #1 in the search queue (new size=3).

% Time for loop #2: 42 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/114,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/49,0 pos, 0,0/0,0 neg]'
%     Score = -16,126609 (regressionFit = 16,126608, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 49,0/49,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 2 3 4 5 8 12 17
%     Score = -6,838561 (regressionFit = 6,838558, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 17,0/49,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,838561): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 17,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,189433 (regressionFit = 6,189431, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,189433): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,606896 (regressionFit = 6,606893, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 49,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,650605 (regressionFit = 6,650602, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 21,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,279663 (regressionFit = 6,279661, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 46,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 49,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 49,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 47,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,842460 (regressionFit = 6,842458, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 19,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 2,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 49,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,580057 (regressionFit = 6,580055, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 9,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,802326 (regressionFit = 6,802324, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 7,0/49,0 pos, 0,0/0,0 neg]
%     Score = -6,830204 (regressionFit = 6,830202, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_6).  [covers 6,0/49,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_9).  [covers 1,0/49,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,140.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]
Comparing variance: 0.007076157631992963 to score=0.0025 #egs=5.0
Comparing variance: 0.139864782672685 to score=0.0025 #egs=44.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 44,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,139865)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 49,0/49,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,139865) into position #1 in the search queue (new size=3).

% Time for loop #3: 29 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 5,0/49,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 49,0/44,0 pos, 0,0/0,0 neg]'
%     Score = -16,126609 (regressionFit = 16,126608, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 44,0/44,0 pos, 0,0/0,0 neg]

% Have these 3 positive seeds: 9 13 25
%     Score = -6,135857 (regressionFit = 6,135855, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 17,0/44,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,135857): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 17,0/44,0 pos, 0,0/0,0 neg]
%     Score = -5,621531 (regressionFit = 5,621529, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,621531): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 44,0/44,0 pos, 0,0/0,0 neg]
%     Score = -5,753620 (regressionFit = 5,753618, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 20,0/44,0 pos, 0,0/0,0 neg]
%     Score = -5,686738 (regressionFit = 5,686735, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 41,0/44,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 44,0/44,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 44,0/44,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 42,0/44,0 pos, 0,0/0,0 neg]
%     Score = -6,132748 (regressionFit = 6,132745, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 16,0/44,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 44,0/44,0 pos, 0,0/0,0 neg]
%     Score = -6,086363 (regressionFit = 6,086360, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 6,0/44,0 pos, 0,0/0,0 neg]
%     Score = -6,071411 (regressionFit = 6,071409, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 8,0/44,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,140.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 17 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 19,0/44,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]'
%     Score = -11,882718 (regressionFit = 11,882716, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 2 5 7 9 18 24
%     Score = -5,037810 (regressionFit = 5,037807, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_generals).  [covers 30,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,037810): advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_generals).  [covers 30,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,029934 (regressionFit = 5,029931, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, pre_quals).  [covers 8,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,029934): advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, pre_quals).  [covers 8,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,007727 (regressionFit = 5,007724, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_quals).  [covers 24,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,007727): advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_quals).  [covers 24,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,039384 (regressionFit = 5,039381, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, post_quals).  [covers 13,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,981007 (regressionFit = 4,981004, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, pre_quals).  [covers 62,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,981007): advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, pre_quals).  [covers 62,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), professor(A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,006867 (regressionFit = 5,006864, penalties=3.3600000000000004E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), projectmember(_, A).  [covers 5,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,039281 (regressionFit = 5,039278, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), publication(_, A).  [covers 37,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,911459 (regressionFit = 4,911456, penalties=3.3600000000000004E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 57,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,911459): advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 57,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,038846 (regressionFit = 5,038843, penalties=3.260000000000001E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), publication(_, B).  [covers 16,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), sameperson(A, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), sameperson(A, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), sameperson(B, B).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), student(A).  [covers 63,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), student(B).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,014531 (regressionFit = 5,014528, penalties=3.37E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), ta(_, B, _).  [covers 31,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,018643 (regressionFit = 5,018640, penalties=3.4700000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), taughtby(_, A, _).  [covers 62,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), tempadvisedby(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_9).  [covers 1,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,831639 (regressionFit = 4,831635, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,831639): advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,027778 (regressionFit = 5,027775, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_7).  [covers 4,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,037694 (regressionFit = 5,037690, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_3).  [covers 7,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,944778 (regressionFit = 4,944774, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_5).  [covers 18,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,952269 (regressionFit = 4,952265, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_4).  [covers 14,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,847722 (regressionFit = 4,847719, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_6).  [covers 9,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,013768 (regressionFit = 5,013765, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_3).  [covers 26,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,994312 (regressionFit = 4,994309, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_1).  [covers 50,0/65,0 pos, 0,0/0,0 neg]
%     Score = -4,992871 (regressionFit = 4,992868, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_2).  [covers 18,0/65,0 pos, 0,0/0,0 neg]
%     Score = -5,018643 (regressionFit = 5,018640, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_4).  [covers 3,0/65,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,078.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]
Comparing variance: 0.101538940852202 to score=0.0025 #egs=4.0
Comparing variance: 0.07254884730889757 to score=0.0025 #egs=61.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 61,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,072549)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,072549) into position #1 in the search queue (new size=2).

% Time for loop #5: 85 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_1).  [covers 4,0/65,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/61,0 pos, 0,0/0,0 neg]'
%     Score = -11,882718 (regressionFit = 11,882716, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 61,0/61,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 3 4 19 21 25 28 46
%     Score = -4,417235 (regressionFit = 4,417232, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_quals).  [covers 24,0/61,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,417235): advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_quals).  [covers 24,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,420813 (regressionFit = 4,420810, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), inphase(A, post_generals).  [covers 30,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,378560 (regressionFit = 4,378557, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, pre_quals).  [covers 58,0/61,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,378560): advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, pre_quals).  [covers 58,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,423379 (regressionFit = 4,423376, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, post_quals).  [covers 13,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), inphase(B, post_generals).  [covers 1,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), professor(A).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,425420 (regressionFit = 4,425417, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), publication(_, A).  [covers 36,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,177018 (regressionFit = 4,177014, penalties=3.3600000000000004E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,177018): advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,423832 (regressionFit = 4,423829, penalties=3.260000000000001E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), publication(_, B).  [covers 16,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), sameperson(A, A).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), sameperson(A, A).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), sameperson(B, B).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), student(A).  [covers 59,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), student(B).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,414082 (regressionFit = 4,414078, penalties=3.37E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), ta(_, A, _).  [covers 27,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,405274 (regressionFit = 4,405271, penalties=3.37E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), ta(_, B, _).  [covers 28,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,411299 (regressionFit = 4,411296, penalties=3.4700000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), taughtby(_, A, _).  [covers 58,0/61,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), tempadvisedby(_, A).  [covers 61,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,368549 (regressionFit = 4,368546, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_5).  [covers 18,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,419278 (regressionFit = 4,419275, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_7).  [covers 4,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,418430 (regressionFit = 4,418427, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_3).  [covers 7,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,369600 (regressionFit = 4,369597, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), tempadvisedby(_, B), yearsinprogram(A, year_4).  [covers 14,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,348039 (regressionFit = 4,348036, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_1).  [covers 47,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,423681 (regressionFit = 4,423677, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_3).  [covers 24,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,355327 (regressionFit = 4,355324, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_2).  [covers 17,0/61,0 pos, 0,0/0,0 neg]
%     Score = -4,411299 (regressionFit = 4,411296, penalties=3.1700000000000006E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(B, A), yearsinprogram(B, year_4).  [covers 3,0/61,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,073.
% Will extend: advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 71 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A), publication(_, A).  [covers 54,0/61,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 3 6 18 32 41 83 121

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 194,0/194,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 194,0/194,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -3,891509 (regressionFit = 3,891508, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 22,0/194,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,891509): advisedby(A, _) :- hasposition(A, faculty).  [covers 22,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,741155 (regressionFit = 3,741154, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 10,0/194,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,741155): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 10,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,188031 (regressionFit = 3,188030, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,188031): advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,848749 (regressionFit = 3,848748, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,845141 (regressionFit = 3,845140, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 48,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,889691 (regressionFit = 3,889690, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 41,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,889966 (regressionFit = 3,889965, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 38,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,890924 (regressionFit = 3,890923, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 32,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,821969 (regressionFit = 3,821968, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 26,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,860443 (regressionFit = 3,860442, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 69,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891201 (regressionFit = 3,891200, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 62,0/194,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 194,0/194,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 194,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,890924 (regressionFit = 3,890923, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 162,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,821969 (regressionFit = 3,821968, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 168,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,848718 (regressionFit = 3,848717, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 87,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,884281 (regressionFit = 3,884280, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 84,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,612512 (regressionFit = 3,612511, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 25,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891781 (regressionFit = 3,891780, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 18,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,822265 (regressionFit = 3,822264, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 26,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,851457 (regressionFit = 3,851456, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 9,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891801 (regressionFit = 3,891800, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 11,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891638 (regressionFit = 3,891637, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 16,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,890862 (regressionFit = 3,890861, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 27,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891580 (regressionFit = 3,891579, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_3).  [covers 17,0/194,0 pos, 0,0/0,0 neg]
%     Score = -3,891508 (regressionFit = 3,891507, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 18,0/194,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,020.
% Will extend: advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1643562302870181 to score=0.0025 #egs=7.0
Comparing variance: 0.010895915181619876 to score=0.0025 #egs=187.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 7,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,164356)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,164356) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 187,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,010896)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,010896) into the LAST position (#2) in the search queue.

% Time for loop #7: 43 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/194,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/7,0 pos, 0,0/0,0 neg]'
%     Score = -3,188031 (regressionFit = 3,188030, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 6
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), inphase(A, post_generals).  [covers 5,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus), professor(A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), publication(_, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus), publication(_, A).  [covers 5,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), sameperson(A, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus), sameperson(A, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), student(A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), ta(_, A, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), taughtby(_, A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_emeritus), taughtby(_, A, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_6).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,483857 (regressionFit = 0,483854, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,483857): advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_7).  [covers 1,0/7,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,164.
% Will extend: advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010591875470579751 to score=0.0025 #egs=3.0
Comparing variance: 0.11301970417685478 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4,0 < 2.1 * minPosCov = 6,3

% Time for loop #8: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty_emeritus), yearsinprogram(A, year_5).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (8).

% ******************************************
Created a leaf under (advisedby(A, B) :- hasposition(B, faculty_emeritus))

%%%%%  WILL-Produced Tree #8 @ 14:10:43 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( yearsinprogram(A, year_1) )
%   | | then return -0.04645282024923757;  // std dev = 0,637, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(D, B) )
%   | | | then return 0.16591151780945168;  // std dev = 2,037, 54,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=47 */
%   | | | else return 0.3661520819941019;  // std dev = 0,168, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( inphase(A, pre_quals) )
%   | | then return 0.40492436307867513;  // std dev = 0,188, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( inphase(A, post_generals) )
%   | | | then return 0.14953476810885827;  // std dev = 1,326, 19,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.07256499632834731;  // std dev = 1,965, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   else if ( hasposition(B, faculty_emeritus) )
%   | then if ( yearsinprogram(A, year_5) )
%   | | then return -0.7484259493611792;  // std dev = 0,178, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12482924593888864;  // std dev = 0,672, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.06893737061934253;  // std dev = 0,104, 187,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=6 */


% Clauses:

advisedby(A, B, -0.04645282024923757) :- 
     hasposition(B, faculty), 
     tempadvisedby(C, B), 
     yearsinprogram(A, year_1), 
     !. // Clause #1.

advisedby(A, B, 0.16591151780945168) :- 
     hasposition(B, faculty), 
     tempadvisedby(C, B), 
     publication(D, B), 
     !. // Clause #2.

advisedby(A, B, 0.3661520819941019) :- 
     hasposition(B, faculty), 
     tempadvisedby(C, B), 
     !. // Clause #3.

advisedby(A, B, 0.40492436307867513) :- 
     hasposition(B, faculty), 
     inphase(A, pre_quals), 
     !. // Clause #4.

advisedby(A, B, 0.14953476810885827) :- 
     hasposition(B, faculty), 
     inphase(A, post_generals), 
     !. // Clause #5.

advisedby(A, B, -0.07256499632834731) :- 
     hasposition(B, faculty), 
     !. // Clause #6.

advisedby(A, B, -0.7484259493611792) :- 
     hasposition(B, faculty_emeritus), 
     yearsinprogram(A, year_5), 
     !. // Clause #7.

advisedby(A, B, -0.12482924593888864) :- 
     hasposition(B, faculty_emeritus), 
     !. // Clause #8.

advisedby(A, B, -0.06893737061934253) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_advisedby(a, b, -0.04645282024923757) :-  /* #neg=3 #pos=1 */ 
   hasposition(b, faculty),
   tempadvisedby(underscore, b),
   yearsinprogram(a, year_1),
   !. // Flattened version of clause #1.

flattened_advisedby(underscore, a, 0.16591151780945168) :-  /* #neg=7 #pos=47 */ 
   hasposition(a, faculty),
   tempadvisedby(underscore, a),
   publication(underscore, a),
   !. // Flattened version of clause #2.

flattened_advisedby(underscore, a, 0.3661520819941019) :-  /* #pos=7 */ 
   hasposition(a, faculty),
   tempadvisedby(underscore, a),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.40492436307867513) :-  /* #pos=5 */ 
   hasposition(b, faculty),
   inphase(a, pre_quals),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.14953476810885827) :-  /* #neg=2 #pos=17 */ 
   hasposition(b, faculty),
   inphase(a, post_generals),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, -0.07256499632834731) :-  /* #neg=12 #pos=13 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #6.

flattened_advisedby(a, b, -0.7484259493611792) :-  /* #neg=3 */ 
   hasposition(b, faculty_emeritus),
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #7.

flattened_advisedby(underscore, a, -0.12482924593888864) :-  /* #neg=3 #pos=1 */ 
   hasposition(a, faculty_emeritus),
   !. // Flattened version of clause #8.

flattened_advisedby(underscore, underscore, -0.06893737061934253) :-  /* #neg=181 #pos=6 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   hasposition(b, faculty_emeritus)
%   publication(underscore, a)
%   inphase(a, pre_quals)
%   yearsinprogram(a, year_1)
%   tempadvisedby(underscore, b)
%   tempadvisedby(underscore, a)
%   hasposition(a, faculty)
%   inphase(a, post_generals)
%   yearsinprogram(a, year_5)
%   hasposition(a, faculty_emeritus)
%   hasposition(b, faculty)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 8 trees is 2,691 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1643562302870181
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 181 of the 52.344 negative examples.
% Dataset size: 278
Computing probabilities
prob time:86 milliseconds
No hidden examples for : advisedby
Time to build dataset: 94 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06654704792056629
Set score:0.0025

% Have these 5 positive seeds: 130 205 212 228 229

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -18,450530 (regressionFit = 18,450529, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 42,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,450530): advisedby(A, _) :- inphase(A, pre_quals).  [covers 42,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,483730 (regressionFit = 18,483728, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 89,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,643554 (regressionFit = 17,643553, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 68,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,643554): advisedby(A, _) :- inphase(A, post_quals).  [covers 68,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,397125 (regressionFit = 18,397123, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 26,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,405831 (regressionFit = 18,405829, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 24,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,544791 (regressionFit = 17,544790, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,544791): advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,431501 (regressionFit = 18,431500, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 145,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,720241 (regressionFit = 17,720240, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 161,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,302566 (regressionFit = 18,302565, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 241,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,544791 (regressionFit = 17,544790, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,482108 (regressionFit = 18,482107, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 121,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,124895 (regressionFit = 18,124894, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 76,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,760557 (regressionFit = 17,760556, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 137,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,363941 (regressionFit = 18,363939, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 25,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,431007 (regressionFit = 18,431006, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 18,0/278,0 pos, 0,0/0,0 neg]
%     Score = -17,832949 (regressionFit = 17,832947, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 22,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,490025 (regressionFit = 18,490024, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 53,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,246141 (regressionFit = 18,246140, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 44,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,476287 (regressionFit = 18,476285, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 20,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,410132 (regressionFit = 18,410131, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 23,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,443187 (regressionFit = 18,443186, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 15,0/278,0 pos, 0,0/0,0 neg]
%     Score = -18,451184 (regressionFit = 18,451183, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 13,0/278,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12355485466116023 to score=0.0025 #egs=142.0
Comparing variance: 3.3307791916727034E-9 to score=0.0025 #egs=136.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 142,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,123555)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,123555) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 58 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- professor(A).  [covers 142,0/278,0 pos, 0,0/0,0 neg]
% This clause covers 142 positive examples, of which 142 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]'
%     Score = -17,544791 (regressionFit = 17,544790, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 10 25 32 37 44 45 49
%     Score = -16,871033 (regressionFit = 16,871031, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 117,0/142,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,871033): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 117,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,505646 (regressionFit = 17,505644, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 8,0/142,0 pos, 0,0/0,0 neg]
%     Score = -16,474656 (regressionFit = 16,474654, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -16,474656): advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,519297 (regressionFit = 17,519295, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 62,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,271907 (regressionFit = 17,271905, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, pre_quals).  [covers 16,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,327561 (regressionFit = 17,327559, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 79,0/142,0 pos, 0,0/0,0 neg]
%     Score = -16,941123 (regressionFit = 16,941120, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 112,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,341281 (regressionFit = 17,341279, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 134,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,521577 (regressionFit = 17,521574, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 60,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,544776 (regressionFit = 17,544774, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 131,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,032648 (regressionFit = 17,032646, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 71,0/142,0 pos, 0,0/0,0 neg]
%     Score = -16,654338 (regressionFit = 16,654336, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_3).  [covers 14,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,110067 (regressionFit = 17,110065, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/142,0 pos, 0,0/0,0 neg]
%     Score = -17,423923 (regressionFit = 17,423921, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 37,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_9).  [covers 2,0/142,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,124.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08258798546465128 to score=0.0025 #egs=43.0
Comparing variance: 0.13053909553320492 to score=0.0025 #egs=99.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 43,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,082588)
%         ILP node to extend: advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,082588) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 99,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,130539)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,130539) into position #1 in the search queue (new size=2).

% Time for loop #2: 62 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/142,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 142,0/99,0 pos, 0,0/0,0 neg]'
%     Score = -17,544791 (regressionFit = 17,544790, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 99,0/99,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 6 21 23 25 26 28 40
%     Score = -12,831852 (regressionFit = 12,831850, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/99,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,831852): advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,588748 (regressionFit = 12,588746, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 80,0/99,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,588748): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 80,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,630848 (regressionFit = 12,630846, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 62,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,839628 (regressionFit = 12,839626, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 59,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,343249 (regressionFit = 12,343246, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 79,0/99,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,343249): advisedby(_, A) :- professor(A), publication(_, A).  [covers 79,0/99,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 99,0/99,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 99,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,840255 (regressionFit = 12,840253, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 91,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,889616 (regressionFit = 12,889614, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 46,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,673482 (regressionFit = 12,673480, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 93,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,451819 (regressionFit = 12,451816, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 48,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,914899 (regressionFit = 12,914897, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 22,0/99,0 pos, 0,0/0,0 neg]
%     Score = -12,101437 (regressionFit = 12,101435, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,101437): advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_9).  [covers 2,0/99,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,131.
% Will extend: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]
Comparing variance: 0.020685962120850554 to score=0.0025 #egs=14.0
Comparing variance: 0.13896272216271258 to score=0.0025 #egs=85.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 14,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,020686)
%         ILP node to extend: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,020686) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 85,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,138963)
%         ILP node to extend: advisedby(_, A) :- professor(A).  [covers 99,0/99,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,138963) into position #1 in the search queue (new size=3).

% Time for loop #3: 48 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/99,0 pos, 0,0/0,0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- professor(A).  [covers 99,0/85,0 pos, 0,0/0,0 neg]'
%     Score = -17,544791 (regressionFit = 17,544790, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 85,0/85,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 6 29 40 56 60 63 68
%     Score = -11,779768 (regressionFit = 11,779766, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 7,0/85,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,779768): advisedby(A, B) :- professor(B), hasposition(A, faculty).  [covers 7,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,676030 (regressionFit = 11,676028, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/85,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,676030): advisedby(_, A) :- professor(A), hasposition(A, faculty_affiliate).  [covers 3,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,546622 (regressionFit = 11,546620, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 68,0/85,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,546622): advisedby(_, A) :- professor(A), hasposition(A, faculty).  [covers 68,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,491995 (regressionFit = 11,491993, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 5,0/85,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,491995): advisedby(_, A) :- professor(A), hasposition(A, faculty_adjunct).  [covers 5,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,738801 (regressionFit = 11,738799, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_generals).  [covers 48,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,779246 (regressionFit = 11,779244, penalties=1.9200000000000003E-6) for clause:  advisedby(A, B) :- professor(B), professor(A).  [covers 8,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,749897 (regressionFit = 11,749895, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), publication(_, A).  [covers 50,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,510576 (regressionFit = 11,510574, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), publication(_, A).  [covers 66,0/85,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), sameperson(A, A).  [covers 85,0/85,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  advisedby(_, A) :- professor(A), sameperson(A, A).  [covers 85,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,779246 (regressionFit = 11,779244, penalties=2.0200000000000006E-6) for clause:  advisedby(A, B) :- professor(B), student(A).  [covers 77,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,773177 (regressionFit = 11,773174, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), ta(_, A, _).  [covers 41,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,787420 (regressionFit = 11,787418, penalties=2.24E-6) for clause:  advisedby(A, B) :- professor(B), taughtby(_, A, _).  [covers 11,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,491995 (regressionFit = 11,491993, penalties=2.3400000000000005E-6) for clause:  advisedby(_, A) :- professor(A), taughtby(_, A, _).  [covers 80,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,779768 (regressionFit = 11,779766, penalties=2.1300000000000004E-6) for clause:  advisedby(A, B) :- professor(B), tempadvisedby(_, A).  [covers 7,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,303760 (regressionFit = 11,303758, penalties=2.2300000000000002E-6) for clause:  advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,303760): advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,800348 (regressionFit = 11,800346, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_5).  [covers 22,0/85,0 pos, 0,0/0,0 neg]
%     Score = -11,349219 (regressionFit = 11,349217, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_12).  [covers 7,0/85,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,139.
% Will extend: advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 37 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(_, A) :- professor(A), tempadvisedby(_, A).  [covers 41,0/85,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/43,0 pos, 0,0/0,0 neg]'
%     Score = -16,474656 (regressionFit = 16,474654, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/43,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 16 19 30 32 37 38 42
%     Score = -3,289738 (regressionFit = 3,289735, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), hasposition(B, faculty).  [covers 37,0/43,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,289738): advisedby(A, B) :- professor(B), inphase(A, post_quals), hasposition(B, faculty).  [covers 37,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), hasposition(B, faculty_affiliate).  [covers 1,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,517039 (regressionFit = 3,517036, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), publication(_, A).  [covers 20,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,443477 (regressionFit = 3,443474, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), publication(_, B).  [covers 33,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), sameperson(A, A).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), sameperson(B, B).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), student(A).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,483067 (regressionFit = 3,483063, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), ta(_, A, _).  [covers 14,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,384297 (regressionFit = 3,384294, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), taughtby(_, B, _).  [covers 38,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,521359 (regressionFit = 3,521356, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), tempadvisedby(_, B).  [covers 23,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,442538 (regressionFit = 3,442535, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_3).  [covers 10,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,542975 (regressionFit = 3,542972, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/43,0 pos, 0,0/0,0 neg]
%     Score = -3,075892 (regressionFit = 3,075889, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,075892): advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,083.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1706331150204195 to score=0.0025 #egs=15.0
Comparing variance: 0.01844257567715213 to score=0.0025 #egs=28.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 28,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,018443)
%         ILP node to extend: advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,018443) into the LAST position (#2) in the search queue.

% Time for loop #5: 28 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 15,0/43,0 pos, 0,0/0,0 neg]
% This clause covers 15 positive examples, of which 15 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/14,0 pos, 0,0/0,0 neg]'
%     Score = -12,101437 (regressionFit = 12,101435, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6).  [covers 14,0/14,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 0 2 7 8 10 11
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), hasposition(B, faculty).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), hasposition(B, faculty_emeritus).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), inphase(A, post_generals).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,225092 (regressionFit = 0,225089, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,225092): advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, B).  [covers 13,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), sameperson(A, A).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), sameperson(B, B).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), student(A).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,242871 (regressionFit = 0,242867, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), ta(_, A, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), taughtby(_, A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), taughtby(_, B, _).  [covers 13,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,287979 (regressionFit = 0,287976, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), tempadvisedby(_, B).  [covers 7,0/14,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,021.
% Will extend: advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 12 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, B) :- professor(B), yearsinprogram(A, year_6), publication(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 43,0/28,0 pos, 0,0/0,0 neg]'
%     Score = -16,474656 (regressionFit = 16,474654, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals).  [covers 28,0/28,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 7 10 11 15 16 23 24
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), hasposition(B, faculty).  [covers 26,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,481627 (regressionFit = 0,481624, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), publication(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,481627): advisedby(A, B) :- professor(B), inphase(A, post_quals), publication(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,516234 (regressionFit = 0,516231, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), publication(_, B).  [covers 23,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), sameperson(A, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), sameperson(B, B).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.040000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), student(A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,482451 (regressionFit = 0,482448, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), ta(_, A, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,443880 (regressionFit = 0,443877, penalties=3.260000000000001E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), taughtby(_, B, _).  [covers 25,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,443880): advisedby(A, B) :- professor(B), inphase(A, post_quals), taughtby(_, B, _).  [covers 25,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,493553 (regressionFit = 0,493550, penalties=3.1500000000000003E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), tempadvisedby(_, B).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,513171 (regressionFit = 0,513168, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_3).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -0,407845 (regressionFit = 0,407842, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,407845): advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,018.
% Will extend: advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 19 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(A, B) :- professor(B), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
% This clause covers 15 positive examples, of which 15 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 14:10:44 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( professor(B) )
%   then if ( inphase(A, post_quals) )
%   | then if ( yearsinprogram(A, year_5) )
%   | | then return 0.03677599786113473;  // std dev = 1,600, 15,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else if ( yearsinprogram(A, year_4) )
%   | | | then return 0.19942724199766773;  // std dev = 0,430, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3242740440985127;  // std dev = 0,472, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( yearsinprogram(A, year_6) )
%   | | then if ( publication(C, A) )
%   | | | then return 0.1654163114560706;  // std dev = 0,431, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.307089358384158;  // std dev = 0,199, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(D, B) )
%   | | | then return 0.03461089372892374;  // std dev = 2,311, 41,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return -0.12011197742192747;  // std dev = 2,442, 44,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=18 */
%   else return -0.06855638909203333;  // std dev = 0,000673, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */


% Clauses:

advisedby(A, B, 0.03677599786113473) :- 
     professor(B), 
     inphase(A, post_quals), 
     yearsinprogram(A, year_5), 
     !. // Clause #1.

advisedby(A, B, 0.19942724199766773) :- 
     professor(B), 
     inphase(A, post_quals), 
     yearsinprogram(A, year_4), 
     !. // Clause #2.

advisedby(A, B, 0.3242740440985127) :- 
     professor(B), 
     inphase(A, post_quals), 
     !. // Clause #3.

advisedby(A, B, 0.1654163114560706) :- 
     professor(B), 
     yearsinprogram(A, year_6), 
     publication(C, A), 
     !. // Clause #4.

advisedby(A, B, 0.307089358384158) :- 
     professor(B), 
     yearsinprogram(A, year_6), 
     !. // Clause #5.

advisedby(A, B, 0.03461089372892374) :- 
     professor(B), 
     tempadvisedby(C, B), 
     !. // Clause #6.

advisedby(A, B, -0.12011197742192747) :- 
     professor(B), 
     !. // Clause #7.

advisedby(A, B, -0.06855638909203333) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.03677599786113473) :-  /* #neg=4 #pos=11 */ 
   professor(b),
   inphase(a, post_quals),
   yearsinprogram(a, year_5),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.19942724199766773) :-  /* #neg=1 #pos=14 */ 
   professor(b),
   inphase(a, post_quals),
   yearsinprogram(a, year_4),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.3242740440985127) :-  /* #pos=13 */ 
   professor(b),
   inphase(a, post_quals),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.1654163114560706) :-  /* #neg=1 #pos=8 */ 
   professor(b),
   yearsinprogram(a, year_6),
   publication(underscore, a),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.307089358384158) :-  /* #pos=5 */ 
   professor(b),
   yearsinprogram(a, year_6),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, 0.03461089372892374) :-  /* #neg=13 #pos=28 */ 
   professor(a),
   tempadvisedby(underscore, a),
   !. // Flattened version of clause #6.

flattened_advisedby(underscore, a, -0.12011197742192747) :-  /* #neg=26 #pos=18 */ 
   professor(a),
   !. // Flattened version of clause #7.

flattened_advisedby(underscore, underscore, -0.06855638909203333) :-  /* #neg=136 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   professor(b)
%   publication(underscore, a)
%   yearsinprogram(a, year_6)
%   inphase(a, post_quals)
%   yearsinprogram(a, year_4)
%   tempadvisedby(underscore, a)
%   yearsinprogram(a, year_5)
%   professor(a)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Time taken to learn 9 trees is 3,060 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01844257567715213
Set score:0.0025
% Kept 97 of the 97 positive examples.
% Kept 210 of the 52.344 negative examples.
% Dataset size: 307
Computing probabilities
prob time:86 milliseconds
No hidden examples for : advisedby
Time to build dataset: 94 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.045894610928753125
Set score:0.0025

% Have these 7 positive seeds: 18 65 103 154 175 228 268

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 307,0/307,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 307,0/307,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -13,925022 (regressionFit = 13,925021, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 32,0/307,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,925022): advisedby(A, _) :- hasposition(A, faculty).  [covers 32,0/307,0 pos, 0,0/0,0 neg]
%     Score = -12,347503 (regressionFit = 12,347502, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,347503): advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,641429 (regressionFit = 13,641428, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 73,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,763241 (regressionFit = 13,763240, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 79,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,005742 (regressionFit = 14,005741, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 42,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,974588 (regressionFit = 13,974587, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 27,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,921168 (regressionFit = 13,921167, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_quals).  [covers 38,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,834998 (regressionFit = 13,834997, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 54,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,816353 (regressionFit = 13,816352, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 49,0/307,0 pos, 0,0/0,0 neg]
%     Score = -12,647679 (regressionFit = 12,647678, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 139,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,071622 (regressionFit = 14,071621, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 131,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,013559 (regressionFit = 13,013558, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 167,0/307,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 307,0/307,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 307,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,816353 (regressionFit = 13,816352, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 258,0/307,0 pos, 0,0/0,0 neg]
%     Score = -12,647679 (regressionFit = 12,647678, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 168,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,997039 (regressionFit = 13,997037, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 128,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,579256 (regressionFit = 13,579255, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 92,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,808837 (regressionFit = 13,808836, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 57,0/307,0 pos, 0,0/0,0 neg]
%     Score = -12,680877 (regressionFit = 12,680875, penalties=1.34E-6) for clause:  advisedby(_, A) :- taughtby(_, A, _).  [covers 129,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,007745 (regressionFit = 14,007744, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 17,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,921243 (regressionFit = 13,921242, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 23,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,965182 (regressionFit = 13,965180, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 29,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,864753 (regressionFit = 13,864752, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 46,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,052355 (regressionFit = 14,052354, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_8).  [covers 4,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,067983 (regressionFit = 14,067982, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_2).  [covers 19,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,049150 (regressionFit = 14,049149, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 14,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,015330 (regressionFit = 14,015329, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 18,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,019743 (regressionFit = 14,019742, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_4).  [covers 17,0/307,0 pos, 0,0/0,0 neg]
%     Score = -14,077858 (regressionFit = 14,077856, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_8).  [covers 3,0/307,0 pos, 0,0/0,0 neg]
%     Score = -13,969948 (regressionFit = 13,969947, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 28,0/307,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08885379997084845 to score=0.0025 #egs=114.0
Comparing variance: 0.011493103965985312 to score=0.0025 #egs=193.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,088854)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,088854) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 193,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,011493)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,011493) into the LAST position (#2) in the search queue.

% Time for loop #1: 71 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/307,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]'
%     Score = -12,347503 (regressionFit = 12,347502, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 1 14 25 27 38 50
%     Score = -10,033529 (regressionFit = 10,033527, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,033529): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,655369 (regressionFit = 9,655367, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,655369): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,892787 (regressionFit = 9,892785, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,002219 (regressionFit = 10,002217, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), projectmember(_, A).  [covers 4,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,095847 (regressionFit = 10,095845, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 62,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,829352 (regressionFit = 9,829349, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 99,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,864568 (regressionFit = 9,864566, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 108,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,012186 (regressionFit = 10,012183, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 50,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,850426 (regressionFit = 9,850424, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 12,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,008723 (regressionFit = 10,008721, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 109,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,077650 (regressionFit = 10,077648, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 70,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_9).  [covers 2,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_10).  [covers 2,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,074298 (regressionFit = 10,074296, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 26,0/114,0 pos, 0,0/0,0 neg]
%     Score = -10,031296 (regressionFit = 10,031294, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 23,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,953563 (regressionFit = 9,953561, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 15,0/114,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,089.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07528446648627678 to score=0.0025 #egs=11.0
Comparing variance: 0.08570134258903588 to score=0.0025 #egs=103.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 11,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,075284)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,075284) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 103,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085701)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085701) into position #1 in the search queue (new size=3).

% Time for loop #2: 46 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/114,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 114,0/103,0 pos, 0,0/0,0 neg]'
%     Score = -12,347503 (regressionFit = 12,347502, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 103,0/103,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 19 36 38 43 44 48 55
%     Score = -8,550032 (regressionFit = 8,550030, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/103,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,550032): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,387133 (regressionFit = 8,387131, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,387133): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 103,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,826580 (regressionFit = 8,826578, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 60,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,396827 (regressionFit = 8,396825, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 90,0/103,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 103,0/103,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 103,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,612963 (regressionFit = 8,612961, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 97,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,650138 (regressionFit = 8,650136, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 43,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,737335 (regressionFit = 8,737333, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 98,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,746311 (regressionFit = 8,746309, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 65,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,817371 (regressionFit = 8,817369, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_7).  [covers 6,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,701400 (regressionFit = 8,701397, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_4).  [covers 21,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,771231 (regressionFit = 8,771229, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_3).  [covers 11,0/103,0 pos, 0,0/0,0 neg]
%     Score = -8,740615 (regressionFit = 8,740612, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 25,0/103,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]
Comparing variance: 0.055297231302505544 to score=0.0025 #egs=38.0
Comparing variance: 0.09670517868993884 to score=0.0025 #egs=65.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 38,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,055297)
%         ILP node to extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,055297) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 65,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096705)
%         ILP node to extend: advisedby(_, A) :- hasposition(A, faculty).  [covers 103,0/103,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,096705) into position #1 in the search queue (new size=4).

% Time for loop #3: 38 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/103,0 pos, 0,0/0,0 neg]
% This clause covers 38 positive examples, of which 38 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(_, A) :- hasposition(A, faculty).  [covers 103,0/65,0 pos, 0,0/0,0 neg]'
%     Score = -12,347503 (regressionFit = 12,347502, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty).  [covers 65,0/65,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 5 8 15 25 44
%     Score = -4,114496 (regressionFit = 4,114494, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,114496): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), professor(A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,170700 (regressionFit = 6,170698, penalties=2.1500000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), publication(_, A).  [covers 41,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,053761 (regressionFit = 6,053759, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), publication(_, A).  [covers 58,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), sameperson(A, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), sameperson(A, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,168186 (regressionFit = 6,168184, penalties=2.0400000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), student(A).  [covers 59,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,159870 (regressionFit = 6,159868, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), ta(_, A, _).  [covers 28,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,191814 (regressionFit = 6,191812, penalties=2.2600000000000004E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), taughtby(_, A, _).  [covers 9,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,100972 (regressionFit = 6,100970, penalties=2.3600000000000007E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), taughtby(_, A, _).  [covers 62,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,216691 (regressionFit = 6,216688, penalties=2.2500000000000005E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty), tempadvisedby(_, A).  [covers 41,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,202806 (regressionFit = 6,202804, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_5).  [covers 15,0/65,0 pos, 0,0/0,0 neg]
%     Score = -6,155868 (regressionFit = 6,155865, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), yearsinprogram(A, year_12).  [covers 3,0/65,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 26 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_generals).  [covers 49,0/65,0 pos, 0,0/0,0 neg]
% This clause covers 49 positive examples, of which 49 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/11,0 pos, 0,0/0,0 neg]'
%     Score = -9,655369 (regressionFit = 9,655367, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals).  [covers 11,0/11,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 2 3 4 5 8 9
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), professor(B).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), projectmember(_, B).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), publication(_, A).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), publication(_, B).  [covers 9,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), sameperson(A, A).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), sameperson(B, B).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), student(A).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,815084 (regressionFit = 0,815080, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), ta(_, A, _).  [covers 7,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,815084): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), ta(_, A, _).  [covers 7,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), taughtby(_, A, _).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), taughtby(_, B, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,698531 (regressionFit = 0,698527, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,698531): advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), yearsinprogram(A, year_1).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), yearsinprogram(A, year_4).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), yearsinprogram(A, year_5).  [covers 1,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,810158 (regressionFit = 0,810155, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), yearsinprogram(A, year_3).  [covers 4,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), yearsinprogram(A, year_2).  [covers 2,0/11,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,075.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0055596256542898015 to score=0.0025 #egs=5.0
Comparing variance: 0.11178820595254464 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6,0 < 2.1 * minPosCov = 6,3

% Time for loop #5: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, pre_quals), tempadvisedby(_, B).  [covers 5,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/38,0 pos, 0,0/0,0 neg]'
%     Score = -8,387133 (regressionFit = 8,387131, penalties=2.06E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals).  [covers 38,0/38,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 2 9 10 11 18 24 28
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), professor(B).  [covers 38,0/38,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), projectmember(_, B).  [covers 2,0/38,0 pos, 0,0/0,0 neg]
%     Score = -1,990926 (regressionFit = 1,990923, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, A).  [covers 19,0/38,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,990926): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, A).  [covers 19,0/38,0 pos, 0,0/0,0 neg]
%     Score = -1,830256 (regressionFit = 1,830253, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,830256): advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), sameperson(A, A).  [covers 38,0/38,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), sameperson(B, B).  [covers 38,0/38,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0600000000000008E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), student(A).  [covers 38,0/38,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), taughtby(_, B, _).  [covers 36,0/38,0 pos, 0,0/0,0 neg]
%     Score = -2,085597 (regressionFit = 2,085593, penalties=3.1700000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), tempadvisedby(_, B).  [covers 24,0/38,0 pos, 0,0/0,0 neg]
%     Score = -2,096052 (regressionFit = 2,096049, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), yearsinprogram(A, year_5).  [covers 10,0/38,0 pos, 0,0/0,0 neg]
%     Score = -2,096252 (regressionFit = 2,096249, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), yearsinprogram(A, year_3).  [covers 11,0/38,0 pos, 0,0/0,0 neg]
%     Score = -2,074982 (regressionFit = 2,074979, penalties=3.0800000000000006E-6) for clause:  advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), yearsinprogram(A, year_4).  [covers 14,0/38,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,055.
% Will extend: advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 22 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      advisedby(A, B) :- hasposition(B, faculty), inphase(A, post_quals), publication(_, B).  [covers 32,0/38,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 21 27 29 31 42 60 85

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 193,0/193,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 193,0/193,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -2,218054 (regressionFit = 2,218053, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty_adjunct).  [covers 5,0/193,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,218054): advisedby(A, _) :- hasposition(A, faculty_adjunct).  [covers 5,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,218110 (regressionFit = 2,218109, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty_emeritus).  [covers 3,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217094 (regressionFit = 2,217092, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 29,0/193,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,217094): advisedby(A, _) :- hasposition(A, faculty).  [covers 29,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,213979 (regressionFit = 2,213978, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_generals).  [covers 30,0/193,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,213979): advisedby(A, _) :- inphase(A, post_generals).  [covers 30,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,193090 (regressionFit = 2,193089, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 35,0/193,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,193090): advisedby(A, _) :- inphase(A, post_quals).  [covers 35,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217549 (regressionFit = 2,217548, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, pre_quals).  [covers 27,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,216689 (regressionFit = 2,216688, penalties=1.14E-6) for clause:  advisedby(_, A) :- inphase(A, post_generals).  [covers 54,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,216635 (regressionFit = 2,216634, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 43,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,218103 (regressionFit = 2,218102, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 69,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,179254 (regressionFit = 2,179253, penalties=1.23E-6) for clause:  advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,179254): advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 193,0/193,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 193,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,216635 (regressionFit = 2,216634, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 150,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,192562 (regressionFit = 2,192561, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 168,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,214711 (regressionFit = 2,214710, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 92,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,212284 (regressionFit = 2,212282, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 45,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217980 (regressionFit = 2,217979, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 22,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217496 (regressionFit = 2,217494, penalties=1.23E-6) for clause:  advisedby(_, A) :- tempadvisedby(A, _).  [covers 29,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,202413 (regressionFit = 2,202411, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_6).  [covers 6,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217708 (regressionFit = 2,217707, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 21,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217778 (regressionFit = 2,217776, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_1).  [covers 18,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,218068 (regressionFit = 2,218067, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_9).  [covers 5,0/193,0 pos, 0,0/0,0 neg]
%     Score = -2,217526 (regressionFit = 2,217525, penalties=1.14E-6) for clause:  advisedby(_, A) :- yearsinprogram(A, year_5).  [covers 28,0/193,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,011.
% Will extend: advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]
Comparing variance: 0.009740011180590383 to score=0.0025 #egs=68.0
Comparing variance: 0.012135456826594502 to score=0.0025 #egs=125.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 68,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,009740)
%         ILP node to extend: advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,009740) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 125,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,012135)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,012135) into position #1 in the search queue (new size=2).

% Time for loop #7: 39 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      advisedby(_, A) :- publication(_, A).  [covers 68,0/193,0 pos, 0,0/0,0 neg]
% This clause covers 68 positive examples, of which 68 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 2 23 37 44 59 65 83

% target           = advisedby(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  advisedby(_, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
% Most-general root: advisedby(_, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,516694 (regressionFit = 1,516693, penalties=1.14E-6) for clause:  advisedby(A, _) :- hasposition(A, faculty).  [covers 15,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,516694): advisedby(A, _) :- hasposition(A, faculty).  [covers 15,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,514965 (regressionFit = 1,514964, penalties=1.14E-6) for clause:  advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 11,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,514965): advisedby(_, A) :- hasposition(A, faculty_adjunct).  [covers 11,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,451564 (regressionFit = 1,451563, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,451564): advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,515291 (regressionFit = 1,515290, penalties=1.14E-6) for clause:  advisedby(A, _) :- inphase(A, pre_quals).  [covers 23,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516368 (regressionFit = 1,516367, penalties=1.12E-6) for clause:  advisedby(A, _) :- professor(A).  [covers 23,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,494422 (regressionFit = 1,494420, penalties=1.12E-6) for clause:  advisedby(_, A) :- professor(A).  [covers 21,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  advisedby(A, _) :- projectmember(_, A).  [covers 2,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,504707 (regressionFit = 1,504705, penalties=1.23E-6) for clause:  advisedby(A, _) :- publication(_, A).  [covers 36,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(A, _) :- sameperson(A, A).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  advisedby(_, A) :- sameperson(A, A).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516368 (regressionFit = 1,516367, penalties=1.12E-6) for clause:  advisedby(A, _) :- student(A).  [covers 102,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,494422 (regressionFit = 1,494420, penalties=1.12E-6) for clause:  advisedby(_, A) :- student(A).  [covers 104,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,454509 (regressionFit = 1,454508, penalties=1.34E-6) for clause:  advisedby(A, _) :- ta(_, A, _).  [covers 55,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,511841 (regressionFit = 1,511840, penalties=1.34E-6) for clause:  advisedby(_, A) :- ta(_, A, _).  [covers 66,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516430 (regressionFit = 1,516429, penalties=1.34E-6) for clause:  advisedby(A, _) :- taughtby(_, A, _).  [covers 25,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516565 (regressionFit = 1,516564, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(_, A).  [covers 8,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,515511 (regressionFit = 1,515510, penalties=1.23E-6) for clause:  advisedby(A, _) :- tempadvisedby(A, _).  [covers 19,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516470 (regressionFit = 1,516468, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_5).  [covers 12,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,515876 (regressionFit = 1,515875, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_1).  [covers 11,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,515598 (regressionFit = 1,515597, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_3).  [covers 12,0/125,0 pos, 0,0/0,0 neg]
%     Score = -1,516448 (regressionFit = 1,516447, penalties=1.14E-6) for clause:  advisedby(A, _) :- yearsinprogram(A, year_4).  [covers 12,0/125,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]

% The best node found: advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,012.
% Will extend: advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03188524959044948 to score=0.0025 #egs=26.0
Comparing variance: 0.00628834451828367 to score=0.0025 #egs=99.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,031885)
%         ILP node to extend: advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,031885) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 99,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,006288)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,006288) into the LAST position (#3) in the search queue.

% Time for loop #8: 31 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      advisedby(A, _) :- inphase(A, post_quals).  [covers 26,0/125,0 pos, 0,0/0,0 neg]
% This clause covers 26 positive examples, of which 26 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (8).

% ******************************************
Created a leaf under (advisedby(A, B) :- inphase(A, post_quals))
Created a leaf under (advisedby(A, B) :- publication(Anon17755, B))
Created a leaf under (advisedby(A, B) :- inphase(A, post_quals))

%%%%%  WILL-Produced Tree #10 @ 14:10:44 10/20/22.  %%%%%


% FOR advisedby(A, B):
%   if ( hasposition(B, faculty) )
%   then if ( inphase(A, pre_quals) )
%   | then if ( tempadvisedby(C, B) )
%   | | then return 0.41226672438710865;  // std dev = 0,167, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19427441252071898;  // std dev = 0,819, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( inphase(A, post_quals) )
%   | | then if ( publication(D, B) )
%   | | | then return 0.19704492538393154;  // std dev = 0,963, 32,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.03456614786570903;  // std dev = 0,950, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( inphase(A, post_generals) )
%   | | | then return 0.12944348937141362;  // std dev = 1,933, 49,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | | | else return -0.2948465762808307;  // std dev = 0,615, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( publication(E, B) )
%   | then return -0.04060523695845768;  // std dev = 0,099, 68,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   | else if ( inphase(A, post_quals) )
%   | | then return -0.025707607404228543;  // std dev = 0,179, 26,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else return -0.08205039613365966;  // std dev = 0,079, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


% Clauses:

advisedby(A, B, 0.41226672438710865) :- 
     hasposition(B, faculty), 
     inphase(A, pre_quals), 
     tempadvisedby(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.19427441252071898) :- 
     hasposition(B, faculty), 
     inphase(A, pre_quals), 
     !. // Clause #2.

advisedby(A, B, 0.19704492538393154) :- 
     hasposition(B, faculty), 
     inphase(A, post_quals), 
     publication(C, B), 
     !. // Clause #3.

advisedby(A, B, -0.03456614786570903) :- 
     hasposition(B, faculty), 
     inphase(A, post_quals), 
     !. // Clause #4.

advisedby(A, B, 0.12944348937141362) :- 
     hasposition(B, faculty), 
     inphase(A, post_generals), 
     !. // Clause #5.

advisedby(A, B, -0.2948465762808307) :- 
     hasposition(B, faculty), 
     !. // Clause #6.

advisedby(A, B, -0.04060523695845768) :- 
     publication(C, B), 
     !. // Clause #7.

advisedby(A, B, -0.025707607404228543) :- 
     inphase(A, post_quals), 
     !. // Clause #8.

advisedby(A, B, -0.08205039613365966) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.41226672438710865) :-  /* #pos=5 */ 
   hasposition(b, faculty),
   inphase(a, pre_quals),
   tempadvisedby(underscore, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.19427441252071898) :-  /* #neg=1 #pos=5 */ 
   hasposition(b, faculty),
   inphase(a, pre_quals),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.19704492538393154) :-  /* #neg=1 #pos=31 */ 
   hasposition(b, faculty),
   inphase(a, post_quals),
   publication(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, -0.03456614786570903) :-  /* #neg=2 #pos=4 */ 
   hasposition(b, faculty),
   inphase(a, post_quals),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.12944348937141362) :-  /* #neg=4 #pos=45 */ 
   hasposition(b, faculty),
   inphase(a, post_generals),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, a, -0.2948465762808307) :-  /* #neg=16 */ 
   hasposition(a, faculty),
   !. // Flattened version of clause #6.

flattened_advisedby(underscore, a, -0.04060523695845768) :-  /* #neg=64 #pos=4 */ 
   publication(underscore, a),
   !. // Flattened version of clause #7.

flattened_advisedby(a, underscore, -0.025707607404228543) :-  /* #neg=23 #pos=3 */ 
   inphase(a, post_quals),
   !. // Flattened version of clause #8.

flattened_advisedby(underscore, underscore, -0.08205039613365966) :-  /* #neg=99 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   publication(underscore, b)
%   publication(underscore, a)
%   inphase(a, pre_quals)
%   inphase(a, post_quals)
%   tempadvisedby(underscore, b)
%   hasposition(a, faculty)
%   inphase(a, post_generals)
%   hasposition(b, faculty)

% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model.ckpt
% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for advisedby.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
advisedby(A, B, Total) :- // A general accessor. 
   advisedby(A, B, 1000000, Total), !.
advisedby(A, B, Total) :- waitHere("This should not fail", advisedby(A, B, Total)).

advisedby(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_advisedby_tree1(A, B, TreesToUse, Total1),
   getScore_advisedby_tree2(A, B, TreesToUse, Total2),
   getScore_advisedby_tree3(A, B, TreesToUse, Total3),
   getScore_advisedby_tree4(A, B, TreesToUse, Total4),
   getScore_advisedby_tree5(A, B, TreesToUse, Total5),
   getScore_advisedby_tree6(A, B, TreesToUse, Total6),
   getScore_advisedby_tree7(A, B, TreesToUse, Total7),
   getScore_advisedby_tree8(A, B, TreesToUse, Total8),
   getScore_advisedby_tree9(A, B, TreesToUse, Total9),
   getScore_advisedby_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
advisedby(A, B, TreesToUse, Total) :- waitHere("This should not fail", advisedby(A, B, TreesToUse, Total)).

getScore_advisedby_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_advisedby_tree1(A, B, TreesToUse, Total1) :- advisedby_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_advisedby_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_advisedby_tree2(A, B, TreesToUse, Total2) :- advisedby_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_advisedby_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_advisedby_tree3(A, B, TreesToUse, Total3) :- advisedby_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_advisedby_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_advisedby_tree4(A, B, TreesToUse, Total4) :- advisedby_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_advisedby_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_advisedby_tree5(A, B, TreesToUse, Total5) :- advisedby_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_advisedby_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_advisedby_tree6(A, B, TreesToUse, Total6) :- advisedby_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_advisedby_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_advisedby_tree7(A, B, TreesToUse, Total7) :- advisedby_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_advisedby_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_advisedby_tree8(A, B, TreesToUse, Total8) :- advisedby_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_advisedby_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_advisedby_tree9(A, B, TreesToUse, Total9) :- advisedby_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_advisedby_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_advisedby_tree10(A, B, TreesToUse, Total10) :- advisedby_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(advisedby, 24, [
   professor(b),
   tempadvisedby(a, underscore),
   hasposition(b, faculty_emeritus),
   courselevel(uniqueVar30, level_500),
   yearsinprogram(a, year_6),
   yearsinprogram(a, year_4),
   yearsinprogram(a, year_3),
   tempadvisedby(underscore, b),
   tempadvisedby(underscore, a),
   yearsinprogram(a, year_5),
   inphase(a, post_generals),
   hasposition(a, faculty_emeritus),
   hasposition(b, faculty),
   student(a),
   publication(underscore, a),
   taughtby(uniqueVar30, a, underscore),
   publication(underscore, b),
   taughtby(underscore, a, underscore),
   inphase(a, pre_quals),
   inphase(a, post_quals),
   yearsinprogram(a, year_1),
   ta(underscore, a, underscore),
   hasposition(a, faculty),
   professor(a)]).
% Time taken to learn model for 'advisedby': 3,521 seconds.
% Saving model in: data/uwcse/fold1/train/models/bRDNs/advisedby.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 4,396 seconds.

% Starting an INFERENCE run of bRDN.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/test/test_pos.txt, data/uwcse/fold1/test/test_neg.txt, data/uwcse/fold1/test/test_bk.txt, data/uwcse/fold1/test/test_facts.txt]
%  for N=0: args[N]=data/uwcse/fold1/test/test_pos.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/test/test_pos.txt, data/uwcse/fold1/test/test_neg.txt, data/uwcse/fold1/test/test_bk.txt, data/uwcse/fold1/test/test_facts.txt]
%  for N=1: args[N]=data/uwcse/fold1/test/test_neg.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/test/test_pos.txt, data/uwcse/fold1/test/test_neg.txt, data/uwcse/fold1/test/test_bk.txt, data/uwcse/fold1/test/test_facts.txt]
%  for N=2: args[N]=data/uwcse/fold1/test/test_bk.txt

% getInputArgWithDefaultValue: args=[data/uwcse/fold1/test/test_pos.txt, data/uwcse/fold1/test/test_neg.txt, data/uwcse/fold1/test/test_bk.txt, data/uwcse/fold1/test/test_facts.txt]
%  for N=3: args[N]=data/uwcse/fold1/test/test_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 465 facts.
% Have read 16 examples from 'data/uwcse/fold1/test' [data/uwcse/fold1/test/test*].
% Have read 2.385 examples from 'data/uwcse/fold1/test' [data/uwcse/fold1/test/test*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 advisedby(A, B)
%  targetPred:                advisedby/2
%  targetArgTypes:            signature = [const, const], types = [+person, +person]
%  targets:                   [advisedby(A, B)]
%  targetPredicates:          [advisedby/2]
%  targetArgSpecs:            [[A[+person], B[+person]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 9 milliseconds

% Read 16 pos examples and 2.385 neg examples.
% Time to init learnOneClause: 9 milliseconds
% Old dirdata/uwcse/fold1/train/models/

% Have 16 'raw' positive examples and kept 16.
% Have 2.385 'raw' negative examples and kept 2.385.

% processing backup's for advisedby
%  POS EX = 16
%  NEG EX = 2.385

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0

% Getting bRDN's target predicates.
% Did not learn a model for 'advisedby' this run.
%   loadModel (#0): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree0.tree
%   loadModel (#1): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree1.tree
%   loadModel (#2): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree2.tree
%   loadModel (#3): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree3.tree
%   loadModel (#4): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree4.tree
%   loadModel (#5): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree5.tree
%   loadModel (#6): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree6.tree
%   loadModel (#7): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree7.tree
%   loadModel (#8): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree8.tree
%   loadModel (#9): data/uwcse/fold1/train/models/bRDNs/Trees/advisedbyTree9.tree
%  Done loading 10 models.

% for advisedby |lookupPos| = 16
% for advisedby |lookupNeg| = 2.385
% getJointExamples: |pos| = 16, |neg| = 2.385

% Starting inference in bRDN.
% Trees = 10

% Starting getMarginalProbabilities.
% [ LazyGroundClauseIndex ]  Building full index for hasposition/2 with 9 assertions.
% [ LazyGroundClauseIndex ]  Building full index for student/1 with 36 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for publication/2.
% [ LazyGroundClauseIndex ]  Building full index for inphase/2 with 21 assertions.
% [ LazyGroundClauseIndex ]  Building full index for professor/1 with 13 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for tempadvisedby/2.
% [ LazyGroundClauseIndex ]  Building full index for yearsinprogram/2 with 21 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for ta/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for tempadvisedby/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for taughtby/3.
% [ LazyGroundClauseIndex ]  Building full index for courselevel/2 with 28 assertions.
 (Arithmetic) Mean Probability Assigned to Correct Output Class: 2.099,017/2.401,00 = 0,874226

 The weighted count of positive examples = 16,000 and the weighted count of negative examples = 2.385,000

printExamples: Writing out predictions (for Tuffy?) on 2.401 examples for 'advisedby' to:
  data/uwcse/fold1/test/results_advisedby.db
 and to:
  data/uwcse/fold1/test/query_advisedby.db

% Computing Area Under Curves.
%Pos=16
%Neg=2385
%LL:-6.159155850802127
%LL:-406.8776927832768
Best F1 = 1.0
% F1 = 1.0
% Threshold = 0.42256284773249847

%   AUC ROC   = 0,969405
%   AUC PR    = 0,146474
%   CLL	      = -0,169462
%   Precision = 0,104000 at threshold = 0,500
%   Recall    = 0,812500
%   F1        = 0,184397

% Total inference time (10 trees): 996 milliseconds.
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
