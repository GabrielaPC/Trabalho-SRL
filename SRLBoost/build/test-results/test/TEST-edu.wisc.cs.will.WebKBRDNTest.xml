<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="edu.wisc.cs.will.WebKBRDNTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2022-10-20T17:10:45" hostname="Ubuntu" time="0.695">
  <properties/>
  <testcase name="testWEBKBLearnInfer()" classname="edu.wisc.cs.will.WebKBRDNTest" time="0.695"/>
  <system-out><![CDATA[
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/webkb/fold1/train/train_pos.txt, data/webkb/fold1/train/train_neg.txt, data/webkb/fold1/train/train_bk.txt, data/webkb/fold1/train/train_facts.txt]
%  for N=0: args[N]=data/webkb/fold1/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/train/train_pos.txt, data/webkb/fold1/train/train_neg.txt, data/webkb/fold1/train/train_bk.txt, data/webkb/fold1/train/train_facts.txt]
%  for N=1: args[N]=data/webkb/fold1/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/train/train_pos.txt, data/webkb/fold1/train/train_neg.txt, data/webkb/fold1/train/train_bk.txt, data/webkb/fold1/train/train_facts.txt]
%  for N=2: args[N]=data/webkb/fold1/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/train/train_pos.txt, data/webkb/fold1/train/train_neg.txt, data/webkb/fold1/train/train_bk.txt, data/webkb/fold1/train/train_facts.txt]
%  for N=3: args[N]=data/webkb/fold1/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 1.439 facts.
% Have read 107 examples from 'data/webkb/fold1/train' [data/webkb/fold1/train/train*].
% Have read 444 examples from 'data/webkb/fold1/train' [data/webkb/fold1/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 faculty(A)
%  targetPred:                faculty/1
%  targetArgTypes:            signature = [const], types = [+person]
%  targets:                   [faculty(A)]
%  targetPredicates:          [faculty/1]
%  targetArgSpecs:            [[A[+person]]]
%  variablesInTargets:        [[A]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 13 milliseconds

% Read 107 pos examples and 444 neg examples.
% Time to init learnOneClause: 14 milliseconds
% Old dirnull
Setting model dir

% Have 107 'raw' positive examples and kept 107.
% Have 444 'raw' negative examples and kept 444.

% processing backup's for faculty
%  POS EX = 107
%  NEG EX = 444

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/webkb/fold1/train/models/
% Learning 10 trees in this iteration for faculty

% Learn model for: faculty
% Kept 107 of the 107 positive examples.
% Kept 224 of the 444 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21876397623241844
Set score:0.0025
% Dataset size: 331
Computing probabilities
prob time:0 seconds
No hidden examples for : faculty
Time to build dataset: 0 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21876397623242058
Set score:0.0025

% Have these 10 positive seeds: 50 79 89 101 127 163 197 258 265 267

% LearnOneClause Parameters:
%   Targets (1):
%    faculty(+person)
%  Modes (8):
%    courseprof(-course, +person),
%    courseprof(+course, -person),
%    courseta(+course, -person),
%    courseta(-course, +person),
%    project(-proj, +person),
%    project(+proj, -person),
%    sameperson(-person, +person),
%    student(+person)

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 331,0/331,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for courseprof/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for courseta/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for project/2.
% [ LazyGroundClauseIndex ]  Building full index for sameperson/2 with 517 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for sameperson/2.
% [ LazyGroundClauseIndex ]  Building full index for student/1 with 410 assertions.
%     Score = -43,804283 (regressionFit = 43,804282, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/331,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -43,804283): faculty(A) :- courseprof(_, A).  [covers 55,0/331,0 pos, 0,0/0,0 neg]
%     Score = -72,051551 (regressionFit = 72,051550, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 135,0/331,0 pos, 0,0/0,0 neg]
%     Score = -71,109719 (regressionFit = 71,109718, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 319,0/331,0 pos, 0,0/0,0 neg]
%     Score = -10,789917 (regressionFit = 10,789916, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,789917): faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]
Comparing variance: -2.388026883155997E-16 to score=0.0025 #egs=212.0
Comparing variance: 0.09067156274274706 to score=0.0025 #egs=119.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 119,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,090672)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,090672) into the LAST position (#1) in the search queue.

% Time for loop #1: 27 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 212,0/331,0 pos, 0,0/0,0 neg]
% This clause covers 212 positive examples, of which 212 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 3 17 23 45 46 56 73 80 116

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 119,0/119,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 119,0/119,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -10,091194 (regressionFit = 10,091193, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/119,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,091194): faculty(A) :- courseprof(_, A).  [covers 55,0/119,0 pos, 0,0/0,0 neg]
%     Score = -9,639345 (regressionFit = 9,639344, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 61,0/119,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,639345): faculty(A) :- project(_, A).  [covers 61,0/119,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 2,55657e-13, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,091.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]
Comparing variance: 2.3906110735853837E-15 to score=0.0025 #egs=107.0
Comparing variance: -1.1564823173178714E-17 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 8 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/119,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 14:10:45 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.14185106490048846;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( sameperson(A, A) )
%   | then return 0.8581489350995111;  // std dev = 5,06e-07, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


% Clauses:

faculty(A, -0.14185106490048846) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.8581489350995111) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.1418510649004878) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.14185106490048846) :-  /* #neg=212 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.8581489350995111) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.1418510649004878) :-  /* #neg=12 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 1 trees is 40 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09067156274274701
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 203 of the 444 negative examples.
% Dataset size: 310
Computing probabilities
prob time:2 milliseconds
No hidden examples for : faculty
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.16135618040849287
Set score:0.0025

% Have these 10 positive seeds: 38 55 119 120 125 151 169 175 176 178

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 310,0/310,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 310,0/310,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -30,672943 (regressionFit = 30,672942, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/310,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,672943): faculty(A) :- courseprof(_, A).  [covers 55,0/310,0 pos, 0,0/0,0 neg]
%     Score = -47,707659 (regressionFit = 47,707658, penalties=1.12E-6) for clause:  faculty(A) :- courseta(_, A).  [covers 25,0/310,0 pos, 0,0/0,0 neg]
%     Score = -49,692368 (regressionFit = 49,692367, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 125,0/310,0 pos, 0,0/0,0 neg]
%     Score = -48,773403 (regressionFit = 48,773402, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 296,0/310,0 pos, 0,0/0,0 neg]
%     Score = -8,838034 (regressionFit = 8,838033, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,838034): faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]
Comparing variance: -4.4643888820905763E-17 to score=0.0025 #egs=189.0
Comparing variance: 0.07304159522388026 to score=0.0025 #egs=121.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 121,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073042)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,073042) into the LAST position (#1) in the search queue.

% Time for loop #1: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 189,0/310,0 pos, 0,0/0,0 neg]
% This clause covers 189 positive examples, of which 189 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 2 4 8 17 18 19 35 41 66

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 121,0/121,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -8,153450 (regressionFit = 8,153449, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,153450): faculty(A) :- courseprof(_, A).  [covers 55,0/121,0 pos, 0,0/0,0 neg]
%     Score = -8,036396 (regressionFit = 8,036395, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 62,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,036396): faculty(A) :- project(_, A).  [covers 62,0/121,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = -6,38933e-14, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,073.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]
Comparing variance: -5.976527683963459E-16 to score=0.0025 #egs=107.0
Comparing variance: 3.96508223080413E-18 to score=0.0025 #egs=14.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/121,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 14:10:45 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.12544463852839158;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( sameperson(A, A) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


% Clauses:

faculty(A, -0.12544463852839158) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.7194734122109547) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.12544463852839138) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.12544463852839158) :-  /* #neg=189 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.7194734122109547) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.12544463852839138) :-  /* #neg=14 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 2 trees is 69 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07304159522388026
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 221 of the 444 negative examples.
% Dataset size: 328
Computing probabilities
prob time:4 milliseconds
No hidden examples for : faculty
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09798706752196702
Set score:0.0025

% Have these 10 positive seeds: 0 16 49 72 91 172 174 199 242 265

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 328,0/328,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -30,800081 (regressionFit = 30,800080, penalties=1.12E-6) for clause:  faculty(A) :- courseta(_, A).  [covers 26,0/328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,800081): faculty(A) :- courseta(_, A).  [covers 26,0/328,0 pos, 0,0/0,0 neg]
%     Score = -31,982557 (regressionFit = 31,982556, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 134,0/328,0 pos, 0,0/0,0 neg]
%     Score = -31,182941 (regressionFit = 31,182940, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 309,0/328,0 pos, 0,0/0,0 neg]
%     Score = -7,192954 (regressionFit = 7,192953, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,192954): faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]
Comparing variance: -4.3969228698026004E-17 to score=0.0025 #egs=202.0
Comparing variance: 0.057086929579063715 to score=0.0025 #egs=126.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 126,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,057087)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,057087) into the LAST position (#1) in the search queue.

% Time for loop #1: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 202,0/328,0 pos, 0,0/0,0 neg]
% This clause covers 202 positive examples, of which 202 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 10 14 17 50 59 73 76 79 97 103

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 126,0/126,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -6,427746 (regressionFit = 6,427745, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,427746): faculty(A) :- courseprof(_, A).  [covers 55,0/126,0 pos, 0,0/0,0 neg]
%     Score = -6,103532 (regressionFit = 6,103531, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 68,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,103532): faculty(A) :- project(_, A).  [covers 68,0/126,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 1,92124e-13, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,057.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]
Comparing variance: 1.7929583051890377E-15 to score=0.0025 #egs=107.0
Comparing variance: 1.460819769243627E-17 to score=0.0025 #egs=19.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/126,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 14:10:45 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.11231637819360661;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( sameperson(A, A) )
%   | then return 0.5553664367462834;  // std dev = 4,38e-07, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


% Clauses:

faculty(A, -0.11231637819360661) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.5553664367462834) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.11231637819360635) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.11231637819360661) :-  /* #neg=202 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.5553664367462834) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.11231637819360635) :-  /* #neg=19 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 3 trees is 97 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05708692957906372
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 218 of the 444 negative examples.
% Dataset size: 325
Computing probabilities
prob time:7 milliseconds
No hidden examples for : faculty
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05951030759430656
Set score:0.0025

% Have these 10 positive seeds: 3 15 31 61 72 93 133 178 202 216

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 325,0/325,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 325,0/325,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -11,743218 (regressionFit = 11,743217, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/325,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,743218): faculty(A) :- courseprof(_, A).  [covers 55,0/325,0 pos, 0,0/0,0 neg]
%     Score = -19,297691 (regressionFit = 19,297690, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 138,0/325,0 pos, 0,0/0,0 neg]
%     Score = -18,583935 (regressionFit = 18,583934, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 301,0/325,0 pos, 0,0/0,0 neg]
%     Score = -5,282536 (regressionFit = 5,282535, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,282536): faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]
Comparing variance: -9.385390517449777E-17 to score=0.0025 #egs=194.0
Comparing variance: 0.04032469337920784 to score=0.0025 #egs=131.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 131,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,040325)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,040325) into the LAST position (#1) in the search queue.

% Time for loop #1: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 194,0/325,0 pos, 0,0/0,0 neg]
% This clause covers 194 positive examples, of which 194 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 15 18 20 23 31 35 69 70 79 80

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 131,0/131,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 131,0/131,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -4,586815 (regressionFit = 4,586814, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/131,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,586815): faculty(A) :- courseprof(_, A).  [covers 55,0/131,0 pos, 0,0/0,0 neg]
%     Score = -4,482943 (regressionFit = 4,482942, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 72,0/131,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,482943): faculty(A) :- project(_, A).  [covers 72,0/131,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 8,14071e-14, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,040.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]
Comparing variance: 7.636674262842198E-16 to score=0.0025 #egs=107.0
Comparing variance: -1.2721305490496585E-17 to score=0.0025 #egs=24.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/131,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 14:10:45 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.10159632948783652;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( sameperson(A, A) )
%   | then return 0.4175135841583096;  // std dev = 2,86e-07, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

faculty(A, -0.10159632948783652) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.4175135841583096) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.10159632948783633) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.10159632948783652) :-  /* #neg=194 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.4175135841583096) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.10159632948783633) :-  /* #neg=24 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 4 trees is 131 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04032469337920784
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 210 of the 444 negative examples.
% Dataset size: 317
Computing probabilities
prob time:87 milliseconds
No hidden examples for : faculty
Time to build dataset: 89 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03821484082453485
Set score:0.0025

% Have these 10 positive seeds: 34 66 74 85 86 90 145 160 176 195

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 317,0/317,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 317,0/317,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -7,393304 (regressionFit = 7,393303, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/317,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,393304): faculty(A) :- courseprof(_, A).  [covers 55,0/317,0 pos, 0,0/0,0 neg]
%     Score = -11,492577 (regressionFit = 11,492576, penalties=1.12E-6) for clause:  faculty(A) :- courseta(_, A).  [covers 29,0/317,0 pos, 0,0/0,0 neg]
%     Score = -12,088132 (regressionFit = 12,088130, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 135,0/317,0 pos, 0,0/0,0 neg]
%     Score = -11,764335 (regressionFit = 11,764334, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 300,0/317,0 pos, 0,0/0,0 neg]
%     Score = -2,507025 (regressionFit = 2,507024, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,507025): faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]
Comparing variance: 4.256813669547232E-17 to score=0.0025 #egs=193.0
Comparing variance: 0.02021793685071492 to score=0.0025 #egs=124.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 124,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,020218)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,020218) into the LAST position (#1) in the search queue.

% Time for loop #1: 15 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 193,0/317,0 pos, 0,0/0,0 neg]
% This clause covers 193 positive examples, of which 193 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 3 9 10 65 71 85 100 101 121 122

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -2,268159 (regressionFit = 2,268157, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,268159): faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
%     Score = -2,156993 (regressionFit = 2,156992, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 66,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,156993): faculty(A) :- project(_, A).  [covers 66,0/124,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = -1,59039e-14, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,020.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
Comparing variance: -1.4941319209908648E-16 to score=0.0025 #egs=107.0
Comparing variance: 4.89804275569922E-18 to score=0.0025 #egs=17.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.09269127618926058;  // std dev = 9,06e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( sameperson(A, A) )
%   | then return 0.3207118471601502;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


% Clauses:

faculty(A, -0.09269127618926058) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.3207118471601502) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.09269127618926094) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.09269127618926058) :-  /* #neg=193 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.3207118471601502) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.09269127618926094) :-  /* #neg=17 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 5 trees is 363 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.02021793685071492
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 210 of the 444 negative examples.
% Dataset size: 317
Computing probabilities
prob time:10 milliseconds
No hidden examples for : faculty
Time to build dataset: 11 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.025903229095333997
Set score:0.0025

% Have these 10 positive seeds: 18 30 60 85 107 146 168 195 210 232

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 317,0/317,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 317,0/317,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -5,011416 (regressionFit = 5,011415, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/317,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,011416): faculty(A) :- courseprof(_, A).  [covers 55,0/317,0 pos, 0,0/0,0 neg]
%     Score = -8,125159 (regressionFit = 8,125158, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 123,0/317,0 pos, 0,0/0,0 neg]
%     Score = -8,032409 (regressionFit = 8,032408, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 304,0/317,0 pos, 0,0/0,0 neg]
%     Score = -1,342813 (regressionFit = 1,342812, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,342813): faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]
Comparing variance: 2.817824935596844E-17 to score=0.0025 #egs=197.0
Comparing variance: 0.011190100744475233 to score=0.0025 #egs=120.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 120,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,011190)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,011190) into the LAST position (#1) in the search queue.

% Time for loop #1: 14 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 197,0/317,0 pos, 0,0/0,0 neg]
% This clause covers 197 positive examples, of which 197 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 2 60 67 80 82 87 90 107 109

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 120,0/120,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,247216 (regressionFit = 1,247215, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,247216): faculty(A) :- courseprof(_, A).  [covers 55,0/120,0 pos, 0,0/0,0 neg]
%     Score = -1,190193 (regressionFit = 1,190192, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 62,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,190193): faculty(A) :- project(_, A).  [covers 62,0/120,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = -5,27356e-15, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,011.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]
Comparing variance: -4.980439736636216E-17 to score=0.0025 #egs=107.0
Comparing variance: 4.270088556250602E-18 to score=0.0025 #egs=13.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/120,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.08518475138839678;  // std dev = 7,45e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( sameperson(A, A) )
%   | then return 0.2551722425694897;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


% Clauses:

faculty(A, -0.08518475138839678) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.2551722425694897) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.08518475138839686) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.08518475138839678) :-  /* #neg=197 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.2551722425694897) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.08518475138839686) :-  /* #neg=13 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 6 trees is 402 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.011190100744475233
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 236 of the 444 negative examples.
% Dataset size: 343
Computing probabilities
prob time:12 milliseconds
No hidden examples for : faculty
Time to build dataset: 14 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.017869111119759924
Set score:0.0025

% Have these 10 positive seeds: 4 102 118 119 132 183 207 212 243 245

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 343,0/343,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 343,0/343,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -3,682106 (regressionFit = 3,682104, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/343,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,682106): faculty(A) :- courseprof(_, A).  [covers 55,0/343,0 pos, 0,0/0,0 neg]
%     Score = -5,862760 (regressionFit = 5,862759, penalties=1.12E-6) for clause:  faculty(A) :- courseta(_, A).  [covers 30,0/343,0 pos, 0,0/0,0 neg]
%     Score = -6,114994 (regressionFit = 6,114993, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 145,0/343,0 pos, 0,0/0,0 neg]
%     Score = -5,957040 (regressionFit = 5,957039, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 323,0/343,0 pos, 0,0/0,0 neg]
%     Score = -1,402832 (regressionFit = 1,402831, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,402832): faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]
Comparing variance: 2.2615654205327262E-17 to score=0.0025 #egs=216.0
Comparing variance: 0.011045916105050683 to score=0.0025 #egs=127.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 127,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,011046)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,011046) into the LAST position (#1) in the search queue.

% Time for loop #1: 14 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 216,0/343,0 pos, 0,0/0,0 neg]
% This clause covers 216 positive examples, of which 216 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 12 33 35 48 71 78 90 125 126

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 127,0/127,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 127,0/127,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,246113 (regressionFit = 1,246112, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/127,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,246113): faculty(A) :- courseprof(_, A).  [covers 55,0/127,0 pos, 0,0/0,0 neg]
%     Score = -1,221662 (regressionFit = 1,221661, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 68,0/127,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,221662): faculty(A) :- project(_, A).  [covers 68,0/127,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 2,47719e-14, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,011.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]
Comparing variance: 2.324205210430234E-16 to score=0.0025 #egs=107.0
Comparing variance: -4.8572257327350596E-18 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/127,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.07877675473109146;  // std dev = 6,99e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
%   else if ( sameperson(A, A) )
%   | then return 0.20975771563253554;  // std dev = 1,58e-07, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


% Clauses:

faculty(A, -0.07877675473109146) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.20975771563253554) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.07877675473109175) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.07877675473109146) :-  /* #neg=216 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.20975771563253554) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.07877675473109175) :-  /* #neg=20 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 7 trees is 453 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.011045916105050683
Set score:0.0025
% Kept 107 of the 107 positive examples.
% Kept 207 of the 444 negative examples.
% Dataset size: 314
Computing probabilities
prob time:13 milliseconds
No hidden examples for : faculty
Time to build dataset: 14 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.014078771888357308
Set score:0.0025

% Have these 10 positive seeds: 18 28 50 64 65 76 89 133 136 184

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 314,0/314,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 314,0/314,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -2,644496 (regressionFit = 2,644495, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 54,0/314,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,644496): faculty(A) :- courseprof(_, A).  [covers 54,0/314,0 pos, 0,0/0,0 neg]
%     Score = -4,415001 (regressionFit = 4,415000, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 136,0/314,0 pos, 0,0/0,0 neg]
%     Score = -4,281776 (regressionFit = 4,281775, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 296,0/314,0 pos, 0,0/0,0 neg]
%     Score = -0,965643 (regressionFit = 0,965642, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,965643): faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]
Comparing variance: 6.579099405186112E-17 to score=0.0025 #egs=189.0
Comparing variance: 0.007725137213798863 to score=0.0025 #egs=125.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 125,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,007725)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,007725) into the LAST position (#1) in the search queue.

% Time for loop #1: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 189,0/314,0 pos, 0,0/0,0 neg]
% This clause covers 189 positive examples, of which 189 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 3 4 41 45 58 84 118 120 124

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 125,0/125,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,842094 (regressionFit = 0,842093, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 54,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,842094): faculty(A) :- courseprof(_, A).  [covers 54,0/125,0 pos, 0,0/0,0 neg]
%     Score = -0,825020 (regressionFit = 0,825019, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 67,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,825020): faculty(A) :- project(_, A).  [covers 67,0/125,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 4,30211e-16, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,008.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]
Comparing variance: 4.1503664471968466E-18 to score=0.0025 #egs=107.0
Comparing variance: -7.709882115452476E-19 to score=0.0025 #egs=18.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 8 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/125,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.07324622576333668;  // std dev = 1,12e-07, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( sameperson(A, A) )
%   | then return 0.17709649774527733;  // std dev = 2,11e-08, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


% Clauses:

faculty(A, -0.07324622576333668) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.17709649774527733) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.07324622576333704) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.07324622576333668) :-  /* #neg=189 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.17709649774527733) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.07324622576333704) :-  /* #neg=18 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 8 trees is 493 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.007725137213798864
Set score:0.001931284303449716
% Kept 107 of the 107 positive examples.
% Kept 202 of the 444 negative examples.
% Dataset size: 309
Computing probabilities
prob time:15 milliseconds
No hidden examples for : faculty
Time to build dataset: 15 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.011073219455197045
Set score:0.001931284303449716

% Have these 10 positive seeds: 13 26 31 34 92 133 166 190 192 257

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 309,0/309,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 309,0/309,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -2,099634 (regressionFit = 2,099633, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,099634): faculty(A) :- courseprof(_, A).  [covers 55,0/309,0 pos, 0,0/0,0 neg]
%     Score = -3,405129 (regressionFit = 3,405128, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 127,0/309,0 pos, 0,0/0,0 neg]
%     Score = -3,316107 (regressionFit = 3,316106, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 292,0/309,0 pos, 0,0/0,0 neg]
%     Score = -0,717575 (regressionFit = 0,717574, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,717575): faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]
Comparing variance: 1.9803978277097388E-17 to score=0.001931284303449716 #egs=185.0
Comparing variance: 0.005786887606643 to score=0.001931284303449716 #egs=124.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.001931284303449716
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 124,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,005787)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,005787) into the LAST position (#1) in the search queue.

% Time for loop #1: 13 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 185,0/309,0 pos, 0,0/0,0 neg]
% This clause covers 185 positive examples, of which 185 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 29 31 32 64 70 75 76 120

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,649205 (regressionFit = 0,649204, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,649205): faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
%     Score = -0,638097 (regressionFit = 0,638096, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 65,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,638097): faculty(A) :- project(_, A).  [covers 65,0/124,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = -1,46688e-14, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,006.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
Comparing variance: -1.3696209275749594E-16 to score=0.001931284303449716 #egs=107.0
Comparing variance: -8.163404592832033E-19 to score=0.001931284303449716 #egs=17.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.001931284303449716
%   Creating a FALSE-branch leaf because good enough fit since score < 0.001931284303449716

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.06842697784420261;  // std dev = 6,05e-08, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else if ( sameperson(A, A) )
%   | then return 0.1527438580936713;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


% Clauses:

faculty(A, -0.06842697784420261) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.1527438580936713) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.06842697784420272) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.06842697784420261) :-  /* #neg=185 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.1527438580936713) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.06842697784420272) :-  /* #neg=17 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Time taken to learn 9 trees is 535 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.005786887606642997
Set score:0.0014467219016607493
% Kept 107 of the 107 positive examples.
% Kept 218 of the 444 negative examples.
% Dataset size: 325
Computing probabilities
prob time:18 milliseconds
No hidden examples for : faculty
Time to build dataset: 18 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.008675128129140439
Set score:0.0014467219016607493

% Have these 10 positive seeds: 58 83 89 122 176 177 183 194 199 318

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 325,0/325,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 325,0/325,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -1,711871 (regressionFit = 1,711870, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/325,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,711871): faculty(A) :- courseprof(_, A).  [covers 55,0/325,0 pos, 0,0/0,0 neg]
%     Score = -2,657732 (regressionFit = 2,657731, penalties=1.12E-6) for clause:  faculty(A) :- courseta(_, A).  [covers 34,0/325,0 pos, 0,0/0,0 neg]
%     Score = -2,802104 (regressionFit = 2,802102, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 131,0/325,0 pos, 0,0/0,0 neg]
%     Score = -2,743037 (regressionFit = 2,743036, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 308,0/325,0 pos, 0,0/0,0 neg]
%     Score = -0,576254 (regressionFit = 0,576253, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,576254): faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]
Comparing variance: -2.209399053980411E-18 to score=0.0014467219016607493 #egs=201.0
Comparing variance: 0.0046472033584115755 to score=0.0014467219016607493 #egs=124.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0014467219016607493
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 124,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,004647)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,004647) into the LAST position (#1) in the search queue.

% Time for loop #1: 14 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      faculty(A) :- student(A).  [covers 201,0/325,0 pos, 0,0/0,0 neg]
% This clause covers 201 positive examples, of which 201 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 5 8 24 31 38 55 61 65 69 98

% target           = faculty(A)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]
% Most-general root: faculty(_).  [covers 124,0/124,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -0,521350 (regressionFit = 0,521348, penalties=1.12E-6) for clause:  faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,521350): faculty(A) :- courseprof(_, A).  [covers 55,0/124,0 pos, 0,0/0,0 neg]
%     Score = -0,512429 (regressionFit = 0,512428, penalties=1.12E-6) for clause:  faculty(A) :- project(_, A).  [covers 65,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,512429): faculty(A) :- project(_, A).  [covers 65,0/124,0 pos, 0,0/0,0 neg]
%     Score = -0,000001 (regressionFit = 4,64906e-15, penalties=1.0100000000000003E-6) for clause:  faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,000001): faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% The best node found: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,005.
% Will extend: faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
Comparing variance: 4.357884769556689E-17 to score=0.0014467219016607493 #egs=107.0
Comparing variance: -8.163404592832033E-19 to score=0.0014467219016607493 #egs=17.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0014467219016607493
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0014467219016607493

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      faculty(A) :- sameperson(A, A).  [covers 107,0/124,0 pos, 0,0/0,0 neg]
% This clause covers 107 positive examples, of which 107 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 14:10:46 10/20/22.  %%%%%


% FOR faculty(A):
%   if ( student(A) )
%   then return -0.06419184008202626;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( sameperson(A, A) )
%   | then return 0.13400703000801087;  // std dev = 6,83e-08, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.06419184008202618;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


% Clauses:

faculty(A, -0.06419184008202626) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.13400703000801087) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.06419184008202618) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.06419184008202626) :-  /* #neg=201 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.13400703000801087) :-  /* #pos=107 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.06419184008202618) :-  /* #neg=17 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model.ckpt
% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for faculty.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
faculty(A, Total) :- // A general accessor. 
   faculty(A, 1000000, Total), !.
faculty(A, Total) :- waitHere("This should not fail", faculty(A, Total)).

faculty(A, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_faculty_tree1(A, TreesToUse, Total1),
   getScore_faculty_tree2(A, TreesToUse, Total2),
   getScore_faculty_tree3(A, TreesToUse, Total3),
   getScore_faculty_tree4(A, TreesToUse, Total4),
   getScore_faculty_tree5(A, TreesToUse, Total5),
   getScore_faculty_tree6(A, TreesToUse, Total6),
   getScore_faculty_tree7(A, TreesToUse, Total7),
   getScore_faculty_tree8(A, TreesToUse, Total8),
   getScore_faculty_tree9(A, TreesToUse, Total9),
   getScore_faculty_tree10(A, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
faculty(A, TreesToUse, Total) :- waitHere("This should not fail", faculty(A, TreesToUse, Total)).

getScore_faculty_tree1(A, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_faculty_tree1(A, TreesToUse, Total1) :- faculty_tree1(A, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_faculty_tree2(A, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_faculty_tree2(A, TreesToUse, Total2) :- faculty_tree2(A, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_faculty_tree3(A, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_faculty_tree3(A, TreesToUse, Total3) :- faculty_tree3(A, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_faculty_tree4(A, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_faculty_tree4(A, TreesToUse, Total4) :- faculty_tree4(A, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_faculty_tree5(A, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_faculty_tree5(A, TreesToUse, Total5) :- faculty_tree5(A, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_faculty_tree6(A, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_faculty_tree6(A, TreesToUse, Total6) :- faculty_tree6(A, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_faculty_tree7(A, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_faculty_tree7(A, TreesToUse, Total7) :- faculty_tree7(A, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_faculty_tree8(A, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_faculty_tree8(A, TreesToUse, Total8) :- faculty_tree8(A, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_faculty_tree9(A, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_faculty_tree9(A, TreesToUse, Total9) :- faculty_tree9(A, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_faculty_tree10(A, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_faculty_tree10(A, TreesToUse, Total10) :- faculty_tree10(A, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(faculty, 2, [
   sameperson(a, a),
   student(a)]).
% Time taken to learn model for 'faculty': 587 milliseconds.
% Saving model in: data/webkb/fold1/train/models/bRDNs/faculty.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 646 milliseconds.

% Starting an INFERENCE run of bRDN.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/webkb/fold1/test/test_pos.txt, data/webkb/fold1/test/test_neg.txt, data/webkb/fold1/test/test_bk.txt, data/webkb/fold1/test/test_facts.txt]
%  for N=0: args[N]=data/webkb/fold1/test/test_pos.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/test/test_pos.txt, data/webkb/fold1/test/test_neg.txt, data/webkb/fold1/test/test_bk.txt, data/webkb/fold1/test/test_facts.txt]
%  for N=1: args[N]=data/webkb/fold1/test/test_neg.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/test/test_pos.txt, data/webkb/fold1/test/test_neg.txt, data/webkb/fold1/test/test_bk.txt, data/webkb/fold1/test/test_facts.txt]
%  for N=2: args[N]=data/webkb/fold1/test/test_bk.txt

% getInputArgWithDefaultValue: args=[data/webkb/fold1/test/test_pos.txt, data/webkb/fold1/test/test_neg.txt, data/webkb/fold1/test/test_bk.txt, data/webkb/fold1/test/test_facts.txt]
%  for N=3: args[N]=data/webkb/fold1/test/test_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 473 facts.
% Have read 46 examples from 'data/webkb/fold1/test' [data/webkb/fold1/test/test*].
% Have read 149 examples from 'data/webkb/fold1/test' [data/webkb/fold1/test/test*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 faculty(A)
%  targetPred:                faculty/1
%  targetArgTypes:            signature = [const], types = [+person]
%  targets:                   [faculty(A)]
%  targetPredicates:          [faculty/1]
%  targetArgSpecs:            [[A[+person]]]
%  variablesInTargets:        [[A]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 3 milliseconds

% Read 46 pos examples and 149 neg examples.
% Time to init learnOneClause: 4 milliseconds
% Old dirdata/webkb/fold1/train/models/

% Have 46 'raw' positive examples and kept 46.
% Have 149 'raw' negative examples and kept 149.

% processing backup's for faculty
%  POS EX = 46
%  NEG EX = 149

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0

% Getting bRDN's target predicates.
% Did not learn a model for 'faculty' this run.
%   loadModel (#0): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree0.tree
%   loadModel (#1): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree1.tree
%   loadModel (#2): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree2.tree
%   loadModel (#3): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree3.tree
%   loadModel (#4): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree4.tree
%   loadModel (#5): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree5.tree
%   loadModel (#6): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree6.tree
%   loadModel (#7): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree7.tree
%   loadModel (#8): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree8.tree
%   loadModel (#9): data/webkb/fold1/train/models/bRDNs/Trees/facultyTree9.tree
%  Done loading 10 models.

% for faculty |lookupPos| = 46
% for faculty |lookupNeg| = 149
% getJointExamples: |pos| = 46, |neg| = 149

% Starting inference in bRDN.
% Trees = 10

% Starting getMarginalProbabilities.
% [ LazyGroundClauseIndex ]  Building full index for student/1 with 148 assertions.
% [ LazyGroundClauseIndex ]  Building full index for sameperson/2 with 194 assertions.
 (Arithmetic) Mean Probability Assigned to Correct Output Class: 180,511/195,00 = 0,925696

 The weighted count of positive examples = 46,000 and the weighted count of negative examples = 149,000

printExamples: Writing out predictions (for Tuffy?) on 195 examples for 'faculty' to:
  data/webkb/fold1/test/results_faculty.db
 and to:
  data/webkb/fold1/test/query_faculty.db

% Computing Area Under Curves.
%Pos=46
%Neg=149
%LL:-5.838734790648558
%LL:-15.128239904060242
Best F1 = 1.0
% F1 = 1.0
% Threshold = 0.470619069968228

%   AUC ROC   = 1,000000
%   AUC PR    = 1,000000
%   CLL	      = -0,077581
%   Precision = 1,000000 at threshold = 0,500
%   Recall    = 1,000000
%   F1        = 1,000000

% Total inference time (10 trees): 48 milliseconds.
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
