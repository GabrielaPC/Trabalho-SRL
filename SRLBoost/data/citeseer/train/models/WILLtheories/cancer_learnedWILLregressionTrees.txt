usePrologVariables: true.

% maxTreeDepthInNodes                 = 4
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 50
% maxNodesToCreate                    = 50.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 6
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 21:47:10 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.8581489350995121) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.19148226843284552) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.8581489350995121) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.19148226843284552) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #2 @ 21:47:10 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.7194734122109545) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.16653882456488175) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.7194734122109545) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.16653882456488175) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #3 @ 21:47:11 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.5553664367462845) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.1420942428155648) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.5553664367462845) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.1420942428155648) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #4 @ 21:47:11 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.41751358415830997) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.11914890490746428) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.41751358415830997) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.11914890490746428) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #5 @ 21:47:11 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.32071184716014967) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.09841340278401862) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.32071184716014967) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.09841340278401862) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #6 @ 21:47:11 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.25517224256948945) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.08026654944252243) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.25517224256948945) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.08026654944252243) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #7 @ 21:47:12 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.20975771563253554) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.06479591611329232) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.20975771563253554) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.06479591611329232) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #8 @ 21:47:12 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.17709649774527736) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.05187916934404054) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.17709649774527736) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.05187916934404054) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #9 @ 21:47:12 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.15274385809367097) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.04126932998424626) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.15274385809367097) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.04126932998424626) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)

%%%%%  WILL-Produced Tree #10 @ 21:47:12 10/20/22.  %%%%%

% FOR cancer(A):
%   if ( smokes(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


% Clauses:

cancer(A, 0.13400703000801117) :- 
     smokes(A), 
     !. // Clause #1.

cancer(A, 0.032663748734830134) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_cancer(a, 0.13400703000801117) :-  /* #pos=3 */ 
   smokes(a),
   !. // Flattened version of clause #1.

flattened_cancer(underscore, 0.032663748734830134) :-  /* #neg=2 #pos=1 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for cancer.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
cancer(A, Total) :- // A general accessor. 
   cancer(A, 1000000, Total), !.
cancer(A, Total) :- waitHere("This should not fail", cancer(A, Total)).

cancer(A, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_cancer_tree1(A, TreesToUse, Total1),
   getScore_cancer_tree2(A, TreesToUse, Total2),
   getScore_cancer_tree3(A, TreesToUse, Total3),
   getScore_cancer_tree4(A, TreesToUse, Total4),
   getScore_cancer_tree5(A, TreesToUse, Total5),
   getScore_cancer_tree6(A, TreesToUse, Total6),
   getScore_cancer_tree7(A, TreesToUse, Total7),
   getScore_cancer_tree8(A, TreesToUse, Total8),
   getScore_cancer_tree9(A, TreesToUse, Total9),
   getScore_cancer_tree10(A, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
cancer(A, TreesToUse, Total) :- waitHere("This should not fail", cancer(A, TreesToUse, Total)).

getScore_cancer_tree1(A, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_cancer_tree1(A, TreesToUse, Total1) :- cancer_tree1(A, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_cancer_tree2(A, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_cancer_tree2(A, TreesToUse, Total2) :- cancer_tree2(A, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_cancer_tree3(A, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_cancer_tree3(A, TreesToUse, Total3) :- cancer_tree3(A, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_cancer_tree4(A, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_cancer_tree4(A, TreesToUse, Total4) :- cancer_tree4(A, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_cancer_tree5(A, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_cancer_tree5(A, TreesToUse, Total5) :- cancer_tree5(A, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_cancer_tree6(A, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_cancer_tree6(A, TreesToUse, Total6) :- cancer_tree6(A, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_cancer_tree7(A, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_cancer_tree7(A, TreesToUse, Total7) :- cancer_tree7(A, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_cancer_tree8(A, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_cancer_tree8(A, TreesToUse, Total8) :- cancer_tree8(A, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_cancer_tree9(A, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_cancer_tree9(A, TreesToUse, Total9) :- cancer_tree9(A, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_cancer_tree10(A, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_cancer_tree10(A, TreesToUse, Total10) :- cancer_tree10(A, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(cancer, 1, [
   smokes(a)]).
