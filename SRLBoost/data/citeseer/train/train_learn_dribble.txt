
% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/citeseer/train/train_pos.txt, data/citeseer/train/train_neg.txt, data/citeseer/train/train_bk.txt, data/citeseer/train/train_facts.txt]
%  for N=0: args[N]=data/citeseer/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/citeseer/train/train_pos.txt, data/citeseer/train/train_neg.txt, data/citeseer/train/train_bk.txt, data/citeseer/train/train_facts.txt]
%  for N=1: args[N]=data/citeseer/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/citeseer/train/train_pos.txt, data/citeseer/train/train_neg.txt, data/citeseer/train/train_bk.txt, data/citeseer/train/train_facts.txt]
%  for N=2: args[N]=data/citeseer/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/citeseer/train/train_pos.txt, data/citeseer/train/train_neg.txt, data/citeseer/train/train_bk.txt, data/citeseer/train/train_facts.txt]
%  for N=3: args[N]=data/citeseer/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 1.930 facts.
% Have read 1.656 examples from 'data/citeseer/train' [data/citeseer/train/train*].
% Have read 207 examples from 'data/citeseer/train' [data/citeseer/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 hasCat(A, B)
%  targetPred:                hasCat/2
%  targetArgTypes:            signature = [const, const], types = [+Id, #cat]
%  targets:                   [hasCat(A, B)]
%  targetPredicates:          [hasCat/2]
%  targetArgSpecs:            [[A[+Id], B[#cat]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '2' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'link', from 'link(2, 1938)',
%  which has types = [signature = [const, const], types = [+Id, -Id], signature = [const, const], types = [-Id, +Id]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.

%   *** WARNING ***  Constant '5' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'hasCat', from 'hasCat(5, 2)',
%  which has types = [signature = [const, const], types = [+Id, #cat]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.
% Time to collect constants: 91 milliseconds

% Read 1.656 pos examples and 207 neg examples.
% Time to init learnOneClause: 100 milliseconds
% Old dirnull
Setting model dir

% Have 1.656 'raw' positive examples and kept 1.656.
% Have 207 'raw' negative examples and kept 207.

% processing backup's for hasCat
%  POS EX = 1.656
%  NEG EX = 207

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/citeseer/train/models/
% Learning 10 trees in this iteration for hasCat

% Learn model for: hasCat
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209876543
Set score:0.0025
% Dataset size: 1.863
Computing probabilities
prob time:6 milliseconds
No hidden examples for : hasCat
Time to build dataset: 12 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209875999
Set score:0.0025

% Have these 10 positive seeds: 96 333 393 433 518 558 813 1065 1275 1285

% LearnOneClause Parameters:
%   Targets (1):
%    hasCat(+Id, #cat)
%  Modes (2):
%    link(+Id, -Id),
%    link(-Id, +Id)

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for link/2 with 1.128 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for link/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for link/2.
%     Score = -183,998598 (regressionFit = 183,998596, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,998598): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999758 (regressionFit = 183,999757, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994947 (regressionFit = 183,994945, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,994947): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999759 (regressionFit = 183,999757, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999759 (regressionFit = 183,999757, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994886 (regressionFit = 183,994883, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,994886): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09651243417477529 to score=0.0025 #egs=462.0
Comparing variance: 0.09950473838154311 to score=0.0025 #egs=1401.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.401,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099505)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099505) into the LAST position (#1) in the search queue.

% Time for loop #1: 3,030 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 462 positive examples, of which 462 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 55 171 222 516 520 696 720

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.401,0/1.401,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.401,0/1.401,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -139,269931 (regressionFit = 139,269930, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -139,269931): hasCat(A, _) :- link(A, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,399252 (regressionFit = 139,399251, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 345,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269932 (regressionFit = 139,269930, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304898 (regressionFit = 139,304895, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269932 (regressionFit = 139,269930, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,151722 (regressionFit = 139,151719, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -139,151722): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,269933 (regressionFit = 139,269930, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]
%     Score = -139,304899 (regressionFit = 139,304895, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.401,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12870392390012309 to score=0.0025 #egs=145.0
Comparing variance: 0.09593124974645481 to score=0.0025 #egs=1256.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.256,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,095931)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,095931) into the LAST position (#1) in the search queue.

% Time for loop #2: 856 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.401,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 139 226 451 485 501 629 687 828 835

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.256,0/1.256,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.256,0/1.256,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -120,467703 (regressionFit = 120,467702, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.256,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -120,467703): hasCat(A, _) :- link(A, _).  [covers 332,0/1.256,0 pos, 0,0/0,0 neg]
%     Score = -120,455624 (regressionFit = 120,455623, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -120,455624): hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]
%     Score = -120,467704 (regressionFit = 120,467702, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/1.256,0 pos, 0,0/0,0 neg]
%     Score = -120,467705 (regressionFit = 120,467702, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/1.256,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,096.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10249947490023445 to score=0.0025 #egs=345.0
Comparing variance: 0.09340648085783532 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 345,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,102499)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,102499) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,093406)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,093406) into the LAST position (#2) in the search queue.

% Time for loop #3: 270 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 345,0/1.256,0 pos, 0,0/0,0 neg]
% This clause covers 345 positive examples, of which 345 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 345,0/345,0 pos, 0,0/0,0 neg]'
%     Score = -120,455624 (regressionFit = 120,455623, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 345,0/345,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 8 10 24 99 121 143 159 183 194
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 345,0/345,0 pos, 0,0/0,0 neg]
%     Score = -35,285090 (regressionFit = 35,285088, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -35,285090): hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
%     Score = -35,285091 (regressionFit = 35,285088, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
%     Score = -35,285091 (regressionFit = 35,285088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 345,0/345,0 pos, 0,0/0,0 neg]
%     Score = -35,285091 (regressionFit = 35,285088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07638888888888869 to score=0.0025 #egs=60.0
Comparing variance: 0.10772545398584615 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 60,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,076389)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,076389) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 345,0/345,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #4: 210 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/345,0 pos, 0,0/0,0 neg]
% This clause covers 60 positive examples, of which 60 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 345,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -120,455624 (regressionFit = 120,455623, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 28 49 90 96 155 159 171 192 197 226
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -120,4556):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon1147, Anon1017))

% Have these 10 positive seeds: 313 366 469 470 500 559 675 676 681 747

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -85,039205 (regressionFit = 85,039203, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,039205): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10135723617361382 to score=0.0025 #egs=332.0
Comparing variance: 0.08875406051169928 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101357)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101357) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #6: 78 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -85,039205 (regressionFit = 85,039203, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 25 42 53 81 127 162 191 193
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619773 (regressionFit = 33,619771, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,619773): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,612581 (regressionFit = 33,612578, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,612581): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966726 to score=0.0025 #egs=19.0
Comparing variance: 0.09931713092917574 to score=0.0025 #egs=313.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 313,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,099317)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,099317) into position #1 in the search queue (new size=3).

% Time for loop #7: 238 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/313,0 pos, 0,0/0,0 neg]'
%     Score = -85,039205 (regressionFit = 85,039203, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 123 128 161 173 174 212 250
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -85,0392):
%  hasCat(A, _) :- link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon1517, Anon1585), link(Anon1585, Anon1645))

% Have these 10 positive seeds: 12 13 48 67 100 110 401 412 490 523

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]  score = -Infinity

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (hasCat(A, B) :- link(A, Anon1517))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/60,0 pos, 0,0/0,0 neg]'
%     Score = -35,285090 (regressionFit = 35,285088, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/60,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 14 19 22 27 34 43 53 55 56
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 60,0/60,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 60,0/60,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 60,0/60,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 60,0/60,0 pos, 0,0/0,0 neg]
%     Score = -4,555407 (regressionFit = 4,555404, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,555407): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,076.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10380622837370206 to score=0.0025 #egs=17.0
Comparing variance: 0.06489994591671301 to score=0.0025 #egs=43.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 43,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,064900)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/60,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,064900) into the LAST position (#1) in the search queue.

% Time for loop #10: 29 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #10, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 17,0/60,0 pos, 0,0/0,0 neg]
% This clause covers 17 positive examples, of which 17 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 60,0/43,0 pos, 0,0/0,0 neg]'
%     Score = -35,285090 (regressionFit = 35,285088, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/43,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 6 10 19 22 26 36 39 40 41
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 43,0/43,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -35,2851):
%  hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/43,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon2049, Anon1147))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 11:33:29 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, E) )
%   then return 0.7499238268743998;  // std dev = 6,677, 462,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=412 */
%   else if ( link(A, F), link(G, F), link(H, G) )
%   | then return 0.7064247971684755;  // std dev = 4,320, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | else if ( link(I, A) )
%   | | then if ( link(J, I) )
%   | | | then if ( link(K, J) )
%   | | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | | else return 0.7883814932390467;  // std dev = 0,255, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | else return 0.7353419175556489;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | else if ( link(A, L) )
%   | | | then if ( link(L, M), link(M, N) )
%   | | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | | else return 0.746327848837528;  // std dev = 0,315, 313,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=278 */
%   | | | else return 0.7597033392445856;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.7499238268743998) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #1.

hasCat(A, B, 0.7064247971684755) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.7405018762759829) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.7883814932390467) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #4.

hasCat(A, B, 0.7353419175556489) :- 
     link(C, A), 
     !. // Clause #5.

hasCat(A, B, 0.7002541982574071) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.746327848837528) :- 
     link(A, C), 
     !. // Clause #7.

hasCat(A, B, 0.7597033392445856) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.7499238268743998) :-  /* #neg=50 #pos=412 */ 
   link(uniqueVar1, a),
   link(uniqueVar1, uniqueVar2),
   link(uniqueVar2, underscore),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.7064247971684755) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar3),
   link(uniqueVar4, uniqueVar3),
   link(underscore, uniqueVar4),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.7405018762759829) :-  /* #neg=2 #pos=15 */ 
   link(uniqueVar5, a),
   link(uniqueVar6, uniqueVar5),
   link(underscore, uniqueVar6),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.7883814932390467) :-  /* #neg=3 #pos=40 */ 
   link(uniqueVar7, a),
   link(underscore, uniqueVar7),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.7353419175556489) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.7002541982574071) :-  /* #neg=3 #pos=16 */ 
   link(a, uniqueVar8),
   link(uniqueVar8, uniqueVar9),
   link(uniqueVar9, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.746327848837528) :-  /* #neg=35 #pos=278 */ 
   link(a, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(underscore, underscore, 0.7597033392445856) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   link(a, uniqueVar3)
%   link(uniqueVar5, a)
%   link(uniqueVar4, uniqueVar3)
%   link(underscore, uniqueVar4)
%   link(uniqueVar9, underscore)
%   link(underscore, uniqueVar6)
%   link(a, uniqueVar8)
%   link(uniqueVar2, underscore)
%   link(underscore, uniqueVar7)
%   link(underscore, a)
%   link(uniqueVar1, uniqueVar2)
%   link(uniqueVar7, a)
%   link(uniqueVar1, a)
%   link(a, underscore)
%   link(uniqueVar6, uniqueVar5)
%   link(uniqueVar8, uniqueVar9)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 1 trees is 5,280 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.064899945916713
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:212 milliseconds
No hidden examples for : hasCat
Time to build dataset: 229 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09867439634677916
Set score:0.0025

% Have these 10 positive seeds: 36 158 451 568 717 748 892 922 1013 1140

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,829934 (regressionFit = 183,829933, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,829934): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830248 (regressionFit = 183,830247, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829935 (regressionFit = 183,829933, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830276 (regressionFit = 183,830274, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621026 (regressionFit = 183,621024, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,621026): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829935 (regressionFit = 183,829933, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,731525 (regressionFit = 183,731522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830032 (regressionFit = 183,830029, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,823969 (regressionFit = 183,823966, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830032 (regressionFit = 183,830029, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830032 (regressionFit = 183,830029, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,829936 (regressionFit = 183,829933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830249 (regressionFit = 183,830247, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,621027 (regressionFit = 183,621024, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830250 (regressionFit = 183,830247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,827027 (regressionFit = 183,827024, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830250 (regressionFit = 183,830247, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830032 (regressionFit = 183,830029, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,823731 (regressionFit = 183,823728, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,731525 (regressionFit = 183,731522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,830277 (regressionFit = 183,830274, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07360000000000148 to score=0.0025 #egs=200.0
Comparing variance: 0.10156405514827292 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073600)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073600) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101564)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101564) into position #1 in the search queue (new size=2).

% Time for loop #1: 1,063 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 23 174 271 500 822 1244 1268 1366 1377 1397

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,856054 (regressionFit = 168,856053, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,856054): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856401 (regressionFit = 168,856400, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856055 (regressionFit = 168,856053, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859329 (regressionFit = 168,859327, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856055 (regressionFit = 168,856053, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,864343 (regressionFit = 168,864340, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,864343 (regressionFit = 168,864340, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,864343 (regressionFit = 168,864340, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856056 (regressionFit = 168,856053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856402 (regressionFit = 168,856400, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856402 (regressionFit = 168,856400, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886135 (regressionFit = 168,886133, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,826068 (regressionFit = 168,826065, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,826068): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,856403 (regressionFit = 168,856400, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,864343 (regressionFit = 168,864340, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,859330 (regressionFit = 168,859327, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,886136 (regressionFit = 168,886133, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,708436 (regressionFit = 168,708433, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,708436): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1361287049532603 to score=0.0025 #egs=80.0
Comparing variance: 0.09969560087143974 to score=0.0025 #egs=1583.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.583,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099696)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099696) into position #1 in the search queue (new size=2).

% Time for loop #2: 816 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 80 360 673 868 884 1055 1070 1284 1332 1381

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,741151 (regressionFit = 157,741150, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,741151): hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810923 (regressionFit = 157,810922, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741152 (regressionFit = 157,741150, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762736 (regressionFit = 157,762734, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741152 (regressionFit = 157,741150, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,774131 (regressionFit = 157,774128, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,658419 (regressionFit = 157,658416, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,658419): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,774131 (regressionFit = 157,774128, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,774131 (regressionFit = 157,774128, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,741153 (regressionFit = 157,741150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,774131 (regressionFit = 157,774128, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,724183 (regressionFit = 157,724180, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,762737 (regressionFit = 157,762734, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810924 (regressionFit = 157,810922, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810924 (regressionFit = 157,810922, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779818 (regressionFit = 157,779816, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779820 (regressionFit = 157,779816, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,808779 (regressionFit = 157,808776, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779819 (regressionFit = 157,779816, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,808779 (regressionFit = 157,808776, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 31,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,814936 (regressionFit = 157,814933, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779820 (regressionFit = 157,779816, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,808779 (regressionFit = 157,808776, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 31,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,808779 (regressionFit = 157,808776, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 31,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,810925 (regressionFit = 157,810922, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779820 (regressionFit = 157,779816, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,779820 (regressionFit = 157,779816, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1287039239001215 to score=0.0025 #egs=145.0
Comparing variance: 0.09665949053561233 to score=0.0025 #egs=1438.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.438,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096659)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,096659) into position #1 in the search queue (new size=2).

% Time for loop #3: 683 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.583,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 13 330 496 865 1017 1019 1040 1064 1136 1158

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.438,0/1.438,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.438,0/1.438,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -138,987091 (regressionFit = 138,987090, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,987091): hasCat(A, _) :- link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,964252 (regressionFit = 138,964251, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,964252): hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,964253 (regressionFit = 138,964251, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,964254 (regressionFit = 138,964251, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,985224 (regressionFit = 138,985221, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,964254 (regressionFit = 138,964251, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10228228190153967 to score=0.0025 #egs=527.0
Comparing variance: 0.09337155667478766 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,102282)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,102282) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,093372)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,093372) into position #2 in the search queue (new size=3).

% Time for loop #4: 227 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -138,964252 (regressionFit = 138,964251, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 1 117 144 180 200 307 363 394 457
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841305 (regressionFit = 53,841303, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,841305): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,896139 (regressionFit = 53,896136, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,896139 (regressionFit = 53,896136, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,902596 (regressionFit = 53,902593, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,896139 (regressionFit = 53,896136, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,896139 (regressionFit = 53,896136, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,841306 (regressionFit = 53,841303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08253466697867376 to score=0.0025 #egs=110.0
Comparing variance: 0.10734409913127752 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082535)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082535) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #5: 351 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -138,964252 (regressionFit = 138,964251, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 35 36 70 138 175 245 294 351 397
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337963 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398583823 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #6: 252 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -138,964252 (regressionFit = 138,964251, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 17 23 54 95 123 132 138 179 187 213
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -138,9643):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon5009, Anon5631), link(Anon5631, Anon5667))

% Have these 10 positive seeds: 24 55 67 186 191 219 300 353 374 415

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -85,026156 (regressionFit = 85,026155, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,026156): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026157 (regressionFit = 85,026155, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046400 (regressionFit = 85,046398, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026157 (regressionFit = 85,026155, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,026158 (regressionFit = 85,026155, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,024894 (regressionFit = 85,024891, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,024894): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,046401 (regressionFit = 85,046398, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966763 to score=0.0025 #egs=19.0
Comparing variance: 0.09248719191038968 to score=0.0025 #egs=892.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 892,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,092487)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,092487) into position #1 in the search queue (new size=3).

% Time for loop #8: 183 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 82 143 194 197 270 301 378 414 446 456

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -82,474864 (regressionFit = 82,474863, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,474864): hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474865 (regressionFit = 82,474863, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474865 (regressionFit = 82,474863, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,474866 (regressionFit = 82,474863, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,092.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0993171309291761 to score=0.0025 #egs=313.0
Comparing variance: 0.08875406051169084 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 313,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,099317)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,099317) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #9: 211 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% This clause covers 313 positive examples, of which 313 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon6473))
Created a leaf under (hasCat(A, B) :- link(A, Anon6473))
Created a leaf under (hasCat(A, B) :- link(Anon5179, Anon5009))
Created a leaf under (hasCat(A, B) :- link(A, Anon2503), link(Anon2539, A))

%%%%%  WILL-Produced Tree #2 @ 11:33:33 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A) )
%   then return 0.6607895262447849;  // std dev = 0,271, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.5786731096055515;  // std dev = 3,300, 80,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=67 */
%   | else if ( link(A, H), link(I, H), link(J, I) )
%   | | then return 0.5973302196535207;  // std dev = 4,320, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(L, K) )
%   | | | | then return 0.6469670867838201;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | else if ( link(K, M), link(M, N) )
%   | | | | | then return 0.6195774050326649;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.6207726865884273;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else if ( link(A, P), link(P, Q), link(Q, R) )
%   | | | | then return 0.5923177366262468;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | | else if ( link(A, S) )
%   | | | | | then return 0.6296583430259688;  // std dev = 0,315, 313,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=278 */
%   | | | | | else return 0.6404616470661376;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.6607895262447849) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.5786731096055515) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.5973302196535207) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.6469670867838201) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #4.

hasCat(A, B, 0.6195774050326649) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #5.

hasCat(A, B, 0.6207726865884273) :- 
     link(C, A), 
     !. // Clause #6.

hasCat(A, B, 0.5923177366262468) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.6296583430259688) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.6404616470661376) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.6607895262447849) :-  /* #neg=16 #pos=184 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.5786731096055515) :-  /* #neg=13 #pos=67 */ 
   link(uniqueVar10, a),
   link(uniqueVar11, uniqueVar10),
   link(underscore, uniqueVar11),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.5973302196535207) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar12),
   link(uniqueVar13, uniqueVar12),
   link(underscore, uniqueVar13),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.6469670867838201) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar14, a),
   link(underscore, uniqueVar14),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.6195774050326649) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar15, a),
   link(uniqueVar15, uniqueVar16),
   link(uniqueVar16, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.6207726865884273) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.5923177366262468) :-  /* #neg=3 #pos=16 */ 
   link(a, uniqueVar17),
   link(uniqueVar17, uniqueVar18),
   link(uniqueVar18, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.6296583430259688) :-  /* #neg=35 #pos=278 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.6404616470661376) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar11, uniqueVar10)
%   link(uniqueVar16, underscore)
%   link(uniqueVar10, a)
%   link(uniqueVar17, uniqueVar18)
%   link(uniqueVar18, underscore)
%   link(uniqueVar15, uniqueVar16)
%   link(a, uniqueVar12)
%   link(uniqueVar13, uniqueVar12)
%   link(underscore, uniqueVar13)
%   link(underscore, a)
%   link(uniqueVar14, a)
%   link(underscore, uniqueVar14)
%   link(underscore, uniqueVar11)
%   link(uniqueVar15, a)
%   link(a, underscore)
%   link(a, uniqueVar17)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 2 trees is 9,457 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09248719191037597
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:208 milliseconds
No hidden examples for : hasCat
Time to build dataset: 225 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09849792757089754
Set score:0.0025

% Have these 10 positive seeds: 8 380 633 710 720 765 1016 1149 1153 1230

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,500691 (regressionFit = 183,500690, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,500691): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501564 (regressionFit = 183,501563, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500957 (regressionFit = 183,500955, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381985 (regressionFit = 183,381983, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,381985): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500692 (regressionFit = 183,500690, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,440785 (regressionFit = 183,440782, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,348903 (regressionFit = 183,348900, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,348903): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,388964 (regressionFit = 183,388961, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,348903 (regressionFit = 183,348900, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495947 (regressionFit = 183,495944, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500694 (regressionFit = 183,500690, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500693 (regressionFit = 183,500690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,440785 (regressionFit = 183,440782, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,500958 (regressionFit = 183,500955, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501565 (regressionFit = 183,501563, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501565 (regressionFit = 183,501563, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495164 (regressionFit = 183,495162, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,388964 (regressionFit = 183,388961, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,199211 (regressionFit = 183,199208, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,199211): hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,420177 (regressionFit = 183,420174, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,499455 (regressionFit = 183,499452, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,348903 (regressionFit = 183,348900, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,420177 (regressionFit = 183,420174, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,199211 (regressionFit = 183,199208, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,199211): hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501184 (regressionFit = 183,501181, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,381986 (regressionFit = 183,381983, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,420177 (regressionFit = 183,420174, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,420177 (regressionFit = 183,420174, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,501566 (regressionFit = 183,501563, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,495165 (regressionFit = 183,495162, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.023225480563494005 to score=0.0025 #egs=41.0
Comparing variance: 0.10002577553413076 to score=0.0025 #egs=1822.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.822,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100026)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100026) into the LAST position (#1) in the search queue.

% Time for loop #1: 1,103 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 46 87 378 430 1050 1204 1336 1468 1815

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,244536 (regressionFit = 182,244535, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,244536): hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236010 (regressionFit = 182,236009, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,236010): hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219626 (regressionFit = 182,219624, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,219626): hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236011 (regressionFit = 182,236009, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236011 (regressionFit = 182,236009, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231396 (regressionFit = 182,231394, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,187926 (regressionFit = 182,187923, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,187926): hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,243308 (regressionFit = 182,243304, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,033835 (regressionFit = 182,033832, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,033835): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,187926 (regressionFit = 182,187923, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,033835 (regressionFit = 182,033832, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,230923 (regressionFit = 182,230920, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 421,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,033835 (regressionFit = 182,033832, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,033835 (regressionFit = 182,033832, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,236012 (regressionFit = 182,236009, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,231397 (regressionFit = 182,231394, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244537 (regressionFit = 182,244535, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225895 (regressionFit = 182,225892, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244537 (regressionFit = 182,244535, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244452 (regressionFit = 182,244449, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,217765 (regressionFit = 182,217762, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,243308 (regressionFit = 182,243304, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244452 (regressionFit = 182,244449, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,187926 (regressionFit = 182,187923, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,243025 (regressionFit = 182,243022, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 317,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244452 (regressionFit = 182,244449, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244452 (regressionFit = 182,244449, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,225896 (regressionFit = 182,225892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,219627 (regressionFit = 182,219624, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -182,244538 (regressionFit = 182,244535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13539727135286406 to score=0.0025 #egs=86.0
Comparing variance: 0.09815072953789651 to score=0.0025 #egs=1736.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.736,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098151)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098151) into the LAST position (#1) in the search queue.

% Time for loop #2: 1,013 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
% This clause covers 86 positive examples, of which 86 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 132 140 273 599 1067 1070 1457

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.736,0/1.736,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.736,0/1.736,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -170,372531 (regressionFit = 170,372529, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,372531): hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389393 (regressionFit = 170,389392, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,365709 (regressionFit = 170,365706, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 193,0/1.736,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,365709): hasCat(A, _) :- link(A, B), link(B, _).  [covers 193,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,371273 (regressionFit = 170,371271, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 152,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,372531 (regressionFit = 170,372529, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,388983 (regressionFit = 170,388980, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 47,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,388983 (regressionFit = 170,388980, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 47,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,371274 (regressionFit = 170,371271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 152,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389390 (regressionFit = 170,389387, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 40,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,365710 (regressionFit = 170,365706, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 193,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,372532 (regressionFit = 170,372529, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,371274 (regressionFit = 170,371271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 152,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,372532 (regressionFit = 170,372529, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,376048 (regressionFit = 170,376045, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 297,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389394 (regressionFit = 170,389392, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389394 (regressionFit = 170,389392, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359958 (regressionFit = 170,359956, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,359958): hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389390 (regressionFit = 170,389387, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 40,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359959 (regressionFit = 170,359956, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359959 (regressionFit = 170,359956, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,371274 (regressionFit = 170,371271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 152,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,385245 (regressionFit = 170,385242, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 335,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359959 (regressionFit = 170,359956, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,371274 (regressionFit = 170,371271, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 152,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,389395 (regressionFit = 170,389392, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359959 (regressionFit = 170,359956, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,359959 (regressionFit = 170,359956, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08386777450167582 to score=0.0025 #egs=151.0
Comparing variance: 0.09949269528842268 to score=0.0025 #egs=1585.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 151,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,083868)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,083868) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.585,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,099493)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,099493) into position #1 in the search queue (new size=2).

% Time for loop #3: 657 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
% This clause covers 151 positive examples, of which 151 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 27 381 438 504 577 960 1045 1253 1399

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,685393 (regressionFit = 157,685392, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,685393): hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,693020 (regressionFit = 157,693019, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,690628 (regressionFit = 157,690626, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670218 (regressionFit = 157,670216, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,670218): hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,685394 (regressionFit = 157,685392, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,680358 (regressionFit = 157,680355, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 36,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,644460 (regressionFit = 157,644457, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,644460): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670219 (regressionFit = 157,670216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670219 (regressionFit = 157,670216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,690629 (regressionFit = 157,690626, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,644460 (regressionFit = 157,644457, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,685395 (regressionFit = 157,685392, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670219 (regressionFit = 157,670216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,685395 (regressionFit = 157,685392, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,683922 (regressionFit = 157,683919, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,680358 (regressionFit = 157,680355, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 36,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,690629 (regressionFit = 157,690626, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,690629 (regressionFit = 157,690626, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,693021 (regressionFit = 157,693019, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,644460 (regressionFit = 157,644457, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670219 (regressionFit = 157,670216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,693022 (regressionFit = 157,693019, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,693855 (regressionFit = 157,693852, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 244,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,693022 (regressionFit = 157,693019, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06489994591671165 to score=0.0025 #egs=43.0
Comparing variance: 0.10042396869612302 to score=0.0025 #egs=1542.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.542,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,100424)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,100424) into position #1 in the search queue (new size=2).

% Time for loop #4: 470 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 13 261 451 644 677 796 900 921 1050 1137

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -154,829552 (regressionFit = 154,829550, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,829552): hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841544 (regressionFit = 154,841543, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829553 (regressionFit = 154,829550, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842005 (regressionFit = 154,842003, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852931 (regressionFit = 154,852928, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829553 (regressionFit = 154,829550, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829554 (regressionFit = 154,829550, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842006 (regressionFit = 154,842003, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829553 (regressionFit = 154,829550, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852931 (regressionFit = 154,852928, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829554 (regressionFit = 154,829550, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,809029 (regressionFit = 154,809026, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,809029): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829554 (regressionFit = 154,829550, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842006 (regressionFit = 154,842003, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842006 (regressionFit = 154,842003, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852932 (regressionFit = 154,852928, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829554 (regressionFit = 154,829550, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,829554 (regressionFit = 154,829550, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841545 (regressionFit = 154,841543, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841545 (regressionFit = 154,841543, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852931 (regressionFit = 154,852928, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,851547 (regressionFit = 154,851544, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 201,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852932 (regressionFit = 154,852928, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,841546 (regressionFit = 154,841543, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,851799 (regressionFit = 154,851796, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 21,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842006 (regressionFit = 154,842003, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,842006 (regressionFit = 154,842003, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,851799 (regressionFit = 154,851796, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 21,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,852931 (regressionFit = 154,852928, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11673224421084026 to score=0.0025 #egs=214.0
Comparing variance: 0.09776229380605884 to score=0.0025 #egs=1328.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.328,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,097762)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,097762) into position #1 in the search queue (new size=2).

% Time for loop #5: 597 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
% This clause covers 214 positive examples, of which 214 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 61 139 345 413 560 600 712 1057 1180 1311

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -129,793594 (regressionFit = 129,793592, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -129,793594): hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,793594 (regressionFit = 129,793592, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,793595 (regressionFit = 129,793592, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,817362 (regressionFit = 129,817359, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,793595 (regressionFit = 129,793592, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734434166449816 to score=0.0025 #egs=417.0
Comparing variance: 0.0933380919922536 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,093338)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,093338) into position #2 in the search queue (new size=3).

% Time for loop #6: 162 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -129,793594 (regressionFit = 129,793592, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 14 30 119 186 244 309 347 410
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 202 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 1 67 257 447 530 762 865

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -85,013583 (regressionFit = 85,013582, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,013583): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #8: 32 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon9291, A), link(Anon9577, Anon9291))

%%%%%  WILL-Produced Tree #3 @ 11:33:38 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, C) )
%   then return 0.5779368829078686;  // std dev = 0,976, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( link(E, A), link(F, E), link(F, A) )
%   | then return 0.44249696432907404;  // std dev = 3,412, 86,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=72 */
%   | else if ( link(G, A), link(H, G) )
%   | | then return 0.5069004998954597;  // std dev = 0,290, 151,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=137 */
%   | | else if ( link(A, I), link(J, A), link(J, I) )
%   | | | then return 0.5263435204072248;  // std dev = 1,671, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | else if ( link(A, K), link(L, K), link(M, L) )
%   | | | | then return 0.4778516190966012;  // std dev = 4,998, 214,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=185 */
%   | | | | else if ( link(N, A) )
%   | | | | | then if ( link(N, P), link(P, Q) )
%   | | | | | | then return 0.4847806421433294;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | | else return 0.4863774348347314;  // std dev = 5,541, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | | | else if ( link(A, R) )
%   | | | | | | then return 0.4911163332163449;  // std dev = 5,799, 332,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=294 */
%   | | | | | | else return 0.5002024238781309;  // std dev = 7,169, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.5779368829078686) :- 
     link(C, A), 
     link(C, D), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.44249696432907404) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.5069004998954597) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #3.

hasCat(A, B, 0.5263435204072248) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #4.

hasCat(A, B, 0.4778516190966012) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.4847806421433294) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.4863774348347314) :- 
     link(C, A), 
     !. // Clause #7.

hasCat(A, B, 0.4911163332163449) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.5002024238781309) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.5779368829078686) :-  /* #neg=1 #pos=40 */ 
   link(uniqueVar19, a),
   link(uniqueVar19, uniqueVar20),
   link(uniqueVar20, uniqueVar19),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.44249696432907404) :-  /* #neg=14 #pos=72 */ 
   link(uniqueVar21, a),
   link(uniqueVar22, uniqueVar21),
   link(uniqueVar22, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.5069004998954597) :-  /* #neg=14 #pos=137 */ 
   link(uniqueVar23, a),
   link(underscore, uniqueVar23),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.5263435204072248) :-  /* #neg=3 #pos=40 */ 
   link(a, uniqueVar24),
   link(uniqueVar25, a),
   link(uniqueVar25, uniqueVar24),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.4778516190966012) :-  /* #neg=29 #pos=185 */ 
   link(a, uniqueVar26),
   link(uniqueVar27, uniqueVar26),
   link(underscore, uniqueVar27),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.4847806421433294) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar28, a),
   link(uniqueVar28, uniqueVar29),
   link(uniqueVar29, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.4863774348347314) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.4911163332163449) :-  /* #neg=38 #pos=294 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.5002024238781309) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar25, a)
%   link(uniqueVar28, a)
%   link(uniqueVar28, uniqueVar29)
%   link(uniqueVar22, a)
%   link(uniqueVar27, uniqueVar26)
%   link(uniqueVar19, a)
%   link(uniqueVar23, a)
%   link(a, uniqueVar26)
%   link(uniqueVar29, underscore)
%   link(uniqueVar21, a)
%   link(uniqueVar25, uniqueVar24)
%   link(underscore, a)
%   link(underscore, uniqueVar23)
%   link(uniqueVar20, uniqueVar19)
%   link(a, underscore)
%   link(uniqueVar22, uniqueVar21)
%   link(a, uniqueVar24)
%   link(uniqueVar19, uniqueVar20)
%   link(underscore, uniqueVar27)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 3 trees is 13,966 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09333809199225357
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:266 milliseconds
No hidden examples for : hasCat
Time to build dataset: 283 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09832694596622635
Set score:0.0025

% Have these 10 positive seeds: 193 200 242 450 472 507 561 575 628 1414

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,181449 (regressionFit = 183,181448, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,181449): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183049 (regressionFit = 183,183048, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181450 (regressionFit = 183,181448, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,182763 (regressionFit = 183,182761, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094509 (regressionFit = 183,094506, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,094509): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181450 (regressionFit = 183,181448, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181451 (regressionFit = 183,181448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,182764 (regressionFit = 183,182761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181451 (regressionFit = 183,181448, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181451 (regressionFit = 183,181448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,177095 (regressionFit = 183,177092, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181452 (regressionFit = 183,181448, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,182764 (regressionFit = 183,182761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,182764 (regressionFit = 183,182761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181451 (regressionFit = 183,181448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,181451 (regressionFit = 183,181448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183050 (regressionFit = 183,183048, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183050 (regressionFit = 183,183048, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179614 (regressionFit = 183,179612, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179615 (regressionFit = 183,179612, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,133200 (regressionFit = 183,133197, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179615 (regressionFit = 183,179612, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,133200 (regressionFit = 183,133197, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,182569 (regressionFit = 183,182566, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179615 (regressionFit = 183,179612, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,094510 (regressionFit = 183,094506, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,133200 (regressionFit = 183,133197, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,133200 (regressionFit = 183,133197, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,183051 (regressionFit = 183,183048, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179615 (regressionFit = 183,179612, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,179615 (regressionFit = 183,179612, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0731040253420698 to score=0.0025 #egs=200.0
Comparing variance: 0.10130709646618762 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073104)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073104) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101307)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101307) into position #1 in the search queue (new size=2).

% Time for loop #1: 999 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 25 220 225 491 589 863 965 1059 1107 1241

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,462033 (regressionFit = 168,462031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,462033): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459118 (regressionFit = 168,459116, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,459118): hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459118 (regressionFit = 168,459116, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465118 (regressionFit = 168,465116, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,435084 (regressionFit = 168,435081, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,435084): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459119 (regressionFit = 168,459116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,459120 (regressionFit = 168,459116, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462034 (regressionFit = 168,462031, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466888 (regressionFit = 168,466886, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462034 (regressionFit = 168,462031, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,464987 (regressionFit = 168,464985, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462035 (regressionFit = 168,462031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462034 (regressionFit = 168,462031, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462035 (regressionFit = 168,462031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432665 (regressionFit = 168,432662, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,432665): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462035 (regressionFit = 168,462031, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,464987 (regressionFit = 168,464985, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,464987 (regressionFit = 168,464985, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462035 (regressionFit = 168,462031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,462035 (regressionFit = 168,462031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,465119 (regressionFit = 168,465116, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,366840 (regressionFit = 168,366837, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,366840): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,464987 (regressionFit = 168,464985, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,436786 (regressionFit = 168,436783, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,466889 (regressionFit = 168,466886, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13485859147232787 to score=0.0025 #egs=80.0
Comparing variance: 0.09954399844548388 to score=0.0025 #egs=1583.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.583,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099544)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099544) into position #1 in the search queue (new size=2).

% Time for loop #2: 798 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 34 215 231 265 266 303 564 593 655 754

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,553743 (regressionFit = 157,553742, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,553743): hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,577528 (regressionFit = 157,577526, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,577529 (regressionFit = 157,577526, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,577530 (regressionFit = 157,577526, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,577530 (regressionFit = 157,577526, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10967616013918506 to score=0.0025 #egs=477.0
Comparing variance: 0.09515209181445715 to score=0.0025 #egs=1106.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,109676)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,109676) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.106,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,095152)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,095152) into position #2 in the search queue (new size=3).

% Time for loop #3: 257 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% This clause covers 477 positive examples, of which 477 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -157,553743 (regressionFit = 157,553742, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 23 47 92 201 209 245 307 342
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314370 (regressionFit = 52,314368, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,314370): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,287383 (regressionFit = 52,287380, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,287383): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,314371 (regressionFit = 52,314368, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,286049 (regressionFit = 52,286046, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,286049): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,110.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12870392390011995 to score=0.0025 #egs=145.0
Comparing variance: 0.10127703894066628 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101277)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101277) into position #1 in the search queue (new size=3).

% Time for loop #4: 271 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -157,553743 (regressionFit = 157,553742, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 29 75 77 106 229 232 245 258 291 295
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -157,5537):
%  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon13859, Anon13713), link(Anon14117, Anon13859))

% Have these 10 positive seeds: 228 275 322 326 510 525 574 658 860 890

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,226116 (regressionFit = 105,226115, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,226116): hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,226117 (regressionFit = 105,226115, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,226118 (regressionFit = 105,226115, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,226118 (regressionFit = 105,226115, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,095.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10215846990212935 to score=0.0025 #egs=527.0
Comparing variance: 0.08875406051168833 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,102158)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,102158) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #6: 230 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -105,226116 (regressionFit = 105,226115, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 5 40 89 159 316 350 375 501
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809908 (regressionFit = 53,809906, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,809908): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,809909 (regressionFit = 53,809906, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08224891883870869 to score=0.0025 #egs=110.0
Comparing variance: 0.10734418481294643 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082249)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082249) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #7: 295 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -105,226116 (regressionFit = 105,226115, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 6 19 35 98 141 153 181 218 399
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337843 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398583967 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #8: 202 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -105,226116 (regressionFit = 105,226115, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 23 126 135 167 168 231 238 262
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -105,2261):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon14471, Anon14967), link(Anon14967, Anon15003))

% Have these 10 positive seeds: 42 75 132 156 179 212 230 301 339 358

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]  score = -Infinity

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (hasCat(A, B) :- link(Anon14471, A))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]'
%     Score = -53,809908 (regressionFit = 53,809906, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 0 4 43 55 64 67 69 79 81
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -9,024883 (regressionFit = 9,024880, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,024883): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,082.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11238293444328817 to score=0.0025 #egs=31.0
Comparing variance: 0.07013935852044838 to score=0.0025 #egs=79.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 79,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,070139)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,070139) into the LAST position (#2) in the search queue.

% Time for loop #11: 26 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #11, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/110,0 pos, 0,0/0,0 neg]
% This clause covers 31 positive examples, of which 31 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon11945), link(Anon11981, A))
Created a leaf under (hasCat(A, B) :- link(Anon14599, A))

%%%%%  WILL-Produced Tree #4 @ 11:33:41 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A) )
%   then return 0.39122385073979926;  // std dev = 0,270, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.3332885874051899;  // std dev = 3,285, 80,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=67 */
%   | else if ( link(A, H) )
%   | | then if ( link(I, H), link(J, I) )
%   | | | then return 0.3528740734527323;  // std dev = 4,320, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | else return 0.36996589089426946;  // std dev = 0,318, 332,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=294 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(L, K) )
%   | | | | then if ( link(L, A) )
%   | | | | | then return 0.36112204529427655;  // std dev = 1,867, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | | | | | else return 0.392912793568161;  // std dev = 0,265, 79,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | | | | else if ( link(K, M), link(M, N) )
%   | | | | | then return 0.3652207414339177;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.3665715708081913;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else return 0.37648359421002653;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.39122385073979926) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.3332885874051899) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.3528740734527323) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.36996589089426946) :- 
     link(A, C), 
     !. // Clause #4.

hasCat(A, B, 0.36112204529427655) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #5.

hasCat(A, B, 0.392912793568161) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.3652207414339177) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.3665715708081913) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.37648359421002653) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.39122385073979926) :-  /* #neg=16 #pos=184 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.3332885874051899) :-  /* #neg=13 #pos=67 */ 
   link(uniqueVar30, a),
   link(uniqueVar31, uniqueVar30),
   link(underscore, uniqueVar31),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.3528740734527323) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar32),
   link(uniqueVar33, uniqueVar32),
   link(underscore, uniqueVar33),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.36996589089426946) :-  /* #neg=38 #pos=294 */ 
   link(a, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.36112204529427655) :-  /* #neg=4 #pos=27 */ 
   link(uniqueVar34, a),
   link(uniqueVar35, uniqueVar34),
   link(uniqueVar35, a),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.392912793568161) :-  /* #neg=6 #pos=73 */ 
   link(uniqueVar36, a),
   link(underscore, uniqueVar36),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.3652207414339177) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar37, a),
   link(uniqueVar37, uniqueVar38),
   link(uniqueVar38, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.3665715708081913) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.37648359421002653) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar31)
%   link(uniqueVar31, uniqueVar30)
%   link(uniqueVar33, uniqueVar32)
%   link(uniqueVar37, a)
%   link(uniqueVar30, a)
%   link(underscore, a)
%   link(underscore, uniqueVar36)
%   link(uniqueVar35, uniqueVar34)
%   link(uniqueVar36, a)
%   link(uniqueVar34, a)
%   link(uniqueVar35, a)
%   link(a, underscore)
%   link(a, uniqueVar32)
%   link(uniqueVar37, uniqueVar38)
%   link(underscore, uniqueVar33)
%   link(uniqueVar38, underscore)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 4 trees is 17,640 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08224891883870869
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:290 milliseconds
No hidden examples for : hasCat
Time to build dataset: 302 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09826885310061872
Set score:0.0025

% Have these 10 positive seeds: 118 232 284 677 827 921 942 1078 1266 1289

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,074065 (regressionFit = 183,074064, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,074065): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074849 (regressionFit = 183,074847, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074066 (regressionFit = 183,074064, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074066 (regressionFit = 183,074064, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074067 (regressionFit = 183,074064, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074850 (regressionFit = 183,074847, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074850 (regressionFit = 183,074847, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070965 (regressionFit = 183,070963, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,070965): hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,037809 (regressionFit = 183,037807, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,037809): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,073303 (regressionFit = 183,073300, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074851 (regressionFit = 183,074847, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,037809 (regressionFit = 183,037807, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074765 (regressionFit = 183,074762, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074851 (regressionFit = 183,074847, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074850 (regressionFit = 183,074847, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,037809 (regressionFit = 183,037807, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074851 (regressionFit = 183,074847, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,037809 (regressionFit = 183,037807, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074851 (regressionFit = 183,074847, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,074851 (regressionFit = 183,074847, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,070966 (regressionFit = 183,070963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11712484658816236 to score=0.0025 #egs=108.0
Comparing variance: 0.09708736359961664 to score=0.0025 #egs=1755.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.755,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,097087)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,097087) into the LAST position (#1) in the search queue.

% Time for loop #1: 878 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 108 positive examples, of which 108 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 326 502 610 1067 1355 1671 1717 1744

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.755,0/1.755,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.755,0/1.755,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -170,384346 (regressionFit = 170,384344, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,384346): hasCat(A, _) :- link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384445 (regressionFit = 170,384444, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384347 (regressionFit = 170,384344, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387445 (regressionFit = 170,387443, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366758 (regressionFit = 170,366755, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,366758): hasCat(A, _) :- link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384347 (regressionFit = 170,384344, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366759 (regressionFit = 170,366755, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366759 (regressionFit = 170,366755, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384348 (regressionFit = 170,384344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387446 (regressionFit = 170,387443, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384347 (regressionFit = 170,384344, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366759 (regressionFit = 170,366755, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384348 (regressionFit = 170,384344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387313 (regressionFit = 170,387310, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 313,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384348 (regressionFit = 170,384344, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387446 (regressionFit = 170,387443, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387446 (regressionFit = 170,387443, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366759 (regressionFit = 170,366755, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384348 (regressionFit = 170,384344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384348 (regressionFit = 170,384344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384446 (regressionFit = 170,384444, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,340294 (regressionFit = 170,340291, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,340294): hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,340295 (regressionFit = 170,340291, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,340295 (regressionFit = 170,340291, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,381636 (regressionFit = 170,381633, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 61,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,366759 (regressionFit = 170,366755, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,384447 (regressionFit = 170,384444, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,377523 (regressionFit = 170,377519, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 354,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,340295 (regressionFit = 170,340291, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387446 (regressionFit = 170,387443, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,387446 (regressionFit = 170,387443, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,097.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07501886889397738 to score=0.0025 #egs=170.0
Comparing variance: 0.09942402762582732 to score=0.0025 #egs=1585.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,075019)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,075019) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.585,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099424)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099424) into position #1 in the search queue (new size=2).

% Time for loop #2: 819 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
% This clause covers 170 positive examples, of which 170 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 45 70 284 396 535 588 702 705 1023 1150

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,582749 (regressionFit = 157,582748, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,582749): hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586282 (regressionFit = 157,586281, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582750 (regressionFit = 157,582748, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586256 (regressionFit = 157,586254, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577478 (regressionFit = 157,577475, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,577478): hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582750 (regressionFit = 157,582748, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,566781 (regressionFit = 157,566778, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,566781): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577478 (regressionFit = 157,577475, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582861 (regressionFit = 157,582858, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 75,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586671 (regressionFit = 157,586668, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 14,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,566781 (regressionFit = 157,566778, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577478 (regressionFit = 157,577475, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,581750 (regressionFit = 157,581747, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582861 (regressionFit = 157,582858, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 75,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582861 (regressionFit = 157,582858, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 75,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577479 (regressionFit = 157,577475, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582751 (regressionFit = 157,582748, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,582861 (regressionFit = 157,582858, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 75,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586671 (regressionFit = 157,586668, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 14,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577978 (regressionFit = 157,577975, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 63,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586257 (regressionFit = 157,586254, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586283 (regressionFit = 157,586281, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586283 (regressionFit = 157,586281, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,566781 (regressionFit = 157,566778, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,566781): hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577478 (regressionFit = 157,577475, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586177 (regressionFit = 157,586174, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 244,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,577479 (regressionFit = 157,577475, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,586284 (regressionFit = 157,586281, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06489994591671193 to score=0.0025 #egs=43.0
Comparing variance: 0.1003735930254759 to score=0.0025 #egs=1542.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.542,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,100374)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,100374) into position #1 in the search queue (new size=2).

% Time for loop #3: 767 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 59 340 384 452 489 547 668 699 795 824

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -154,766249 (regressionFit = 154,766248, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,766249): hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772017 (regressionFit = 154,772016, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,773385 (regressionFit = 154,773383, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772018 (regressionFit = 154,772016, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772018 (regressionFit = 154,772016, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,775308 (regressionFit = 154,775305, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 201,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,772019 (regressionFit = 154,772016, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,773386 (regressionFit = 154,773383, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10732173481097618 to score=0.0025 #egs=546.0
Comparing variance: 0.0965548001001575 to score=0.0025 #egs=996.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 546,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107322)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107322) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 996,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,096555)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,096555) into position #2 in the search queue (new size=3).

% Time for loop #4: 332 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% This clause covers 546 positive examples, of which 546 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]'
%     Score = -154,766249 (regressionFit = 154,766248, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 151 166 171 257 311 369 490
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597634 (regressionFit = 58,597632, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,597634): hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,595579 (regressionFit = 58,595577, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,595579): hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,595580 (regressionFit = 58,595577, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,595580 (regressionFit = 58,595577, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,596118 (regressionFit = 58,596115, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,596118 (regressionFit = 58,596115, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,596118 (regressionFit = 58,596115, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,595580 (regressionFit = 58,595577, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,596118 (regressionFit = 58,596115, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,597635 (regressionFit = 58,597632, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,595580 (regressionFit = 58,595577, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,587755 (regressionFit = 58,587752, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,587755): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11664976343415119 to score=0.0025 #egs=214.0
Comparing variance: 0.1012792240244039 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,101279)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,101279) into position #1 in the search queue (new size=3).

% Time for loop #5: 296 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
% This clause covers 214 positive examples, of which 214 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 546,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -154,766249 (regressionFit = 154,766248, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 7 37 43 50 52 70 119 121 154
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574956 (regressionFit = 33,574954, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,574956): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574957 (regressionFit = 33,574954, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,612581 (regressionFit = 33,612578, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574957 (regressionFit = 33,574954, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574957 (regressionFit = 33,574954, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574957 (regressionFit = 33,574954, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574957 (regressionFit = 33,574954, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08318926489984743 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629478 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,083189)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,083189) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #6: 117 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -154,766249 (regressionFit = 154,766248, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 1 66 176 194 203 224 228 235
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -154,7662):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon18073, Anon18949))

% Have these 10 positive seeds: 10 147 214 324 449 494 512 562 593 696

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,151037 (regressionFit = 96,151036, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,151037): hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151038 (regressionFit = 96,151036, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151038 (regressionFit = 96,151036, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,163872 (regressionFit = 96,163869, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,151039 (regressionFit = 96,151036, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734396762298411 to score=0.0025 #egs=417.0
Comparing variance: 0.08875406051169134 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #8: 216 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -96,151037 (regressionFit = 96,151036, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 79 89 118 120 144 255 274 296 303 371
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1065197428833794 to score=0.0025 #egs=132.0
Comparing variance: 0.1077254539858422 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #9: 219 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon19503, Anon19749), link(Anon19749, Anon19785))
Created a leaf under (hasCat(A, B) :- link(Anon19503, A))
Created a leaf under (hasCat(A, B) :- link(Anon18073, Anon18949))
Created a leaf under (hasCat(A, B) :- link(Anon16455, A), link(Anon16857, Anon16455))

%%%%%  WILL-Produced Tree #5 @ 11:33:45 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(D, C), link(D, A) )
%   then return 0.26234242582212886;  // std dev = 3,557, 108,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=93 */
%   else if ( link(E, A), link(F, E) )
%   | then return 0.2974039542166813;  // std dev = 0,274, 170,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=156 */
%   | else if ( link(G, A), link(G, H), link(A, H) )
%   | | then return 0.30115052913049256;  // std dev = 1,671, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( link(A, I) )
%   | | | then if ( link(J, I), link(K, J) )
%   | | | | then return 0.2704004827393416;  // std dev = 4,996, 214,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=185 */
%   | | | | else if ( link(I, L) )
%   | | | | | then return 0.3069041755673856;  // std dev = 0,288, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | | else return 0.27373469233698233;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | else if ( link(M, A) )
%   | | | | then if ( link(M, N), link(N, P) )
%   | | | | | then return 0.2754236547931493;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.2763296536538527;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | | else return 0.2845503940323708;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.26234242582212886) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.2974039542166813) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.30115052913049256) :- 
     link(C, A), 
     link(C, D), 
     link(A, D), 
     !. // Clause #3.

hasCat(A, B, 0.2704004827393416) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #4.

hasCat(A, B, 0.3069041755673856) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.27373469233698233) :- 
     link(A, C), 
     !. // Clause #6.

hasCat(A, B, 0.2754236547931493) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.2763296536538527) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.2845503940323708) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.26234242582212886) :-  /* #neg=15 #pos=93 */ 
   link(uniqueVar39, a),
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar40, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.2974039542166813) :-  /* #neg=14 #pos=156 */ 
   link(uniqueVar41, a),
   link(underscore, uniqueVar41),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.30115052913049256) :-  /* #neg=3 #pos=40 */ 
   link(uniqueVar42, a),
   link(uniqueVar42, uniqueVar43),
   link(a, uniqueVar43),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.2704004827393416) :-  /* #neg=29 #pos=185 */ 
   link(a, uniqueVar44),
   link(uniqueVar45, uniqueVar44),
   link(underscore, uniqueVar45),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.3069041755673856) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar46),
   link(uniqueVar46, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.27373469233698233) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.2754236547931493) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar47, a),
   link(uniqueVar47, uniqueVar48),
   link(uniqueVar48, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.2763296536538527) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.2845503940323708) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar40, uniqueVar39)
%   link(underscore, uniqueVar45)
%   link(uniqueVar40, a)
%   link(a, uniqueVar46)
%   link(underscore, uniqueVar41)
%   link(uniqueVar42, uniqueVar43)
%   link(uniqueVar47, a)
%   link(a, uniqueVar43)
%   link(a, uniqueVar44)
%   link(underscore, a)
%   link(uniqueVar39, a)
%   link(uniqueVar47, uniqueVar48)
%   link(a, underscore)
%   link(uniqueVar42, a)
%   link(uniqueVar48, underscore)
%   link(uniqueVar41, a)
%   link(uniqueVar45, uniqueVar44)
%   link(uniqueVar46, underscore)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 5 trees is 21,736 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10734396762298415
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:365 milliseconds
No hidden examples for : hasCat
Time to build dataset: 380 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0982514567734941
Set score:0.0025

% Have these 10 positive seeds: 11 36 100 113 741 767 1038 1099 1370 1501

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,041062 (regressionFit = 183,041060, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,041062): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042353 (regressionFit = 183,042352, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041063 (regressionFit = 183,041060, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042463 (regressionFit = 183,042461, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982811 (regressionFit = 182,982809, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,982811): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041063 (regressionFit = 183,041060, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,019527 (regressionFit = 183,019524, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,967451 (regressionFit = 182,967448, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,967451): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,039018 (regressionFit = 183,039015, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041064 (regressionFit = 183,041060, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,967451 (regressionFit = 182,967448, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041063 (regressionFit = 183,041060, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041064 (regressionFit = 183,041060, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,037661 (regressionFit = 183,037658, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041064 (regressionFit = 183,041060, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,039018 (regressionFit = 183,039015, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,039018 (regressionFit = 183,039015, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041064 (regressionFit = 183,041060, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041064 (regressionFit = 183,041060, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042354 (regressionFit = 183,042352, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,967451 (regressionFit = 182,967448, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982812 (regressionFit = 182,982809, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042355 (regressionFit = 183,042352, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,041973 (regressionFit = 183,041970, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042355 (regressionFit = 183,042352, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,039018 (regressionFit = 183,039015, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,039044 (regressionFit = 183,039041, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,019527 (regressionFit = 183,019524, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,042464 (regressionFit = 183,042461, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.059528985005996043 to score=0.0025 #egs=94.0
Comparing variance: 0.10026666113542143 to score=0.0025 #egs=1769.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100267)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100267) into the LAST position (#1) in the search queue.

% Time for loop #1: 706 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 301 355 511 589 764 781 1214 1237 1451

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -177,369381 (regressionFit = 177,369380, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,369381): hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,367642 (regressionFit = 177,367640, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,367642): hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,367642 (regressionFit = 177,367640, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,367643 (regressionFit = 177,367640, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,362555 (regressionFit = 177,362552, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,362555): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,367643 (regressionFit = 177,367640, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,363882 (regressionFit = 177,363880, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,369382 (regressionFit = 177,369380, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,348979 (regressionFit = 177,348976, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,348979): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,363883 (regressionFit = 177,363880, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,348979 (regressionFit = 177,348976, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,363883 (regressionFit = 177,363880, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,369383 (regressionFit = 177,369380, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,369383 (regressionFit = 177,369380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,366528 (regressionFit = 177,366525, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07311800556693325 to score=0.0025 #egs=24.0
Comparing variance: 0.10062701645008122 to score=0.0025 #egs=1745.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.745,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,100627)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,100627) into the LAST position (#1) in the search queue.

% Time for loop #2: 528 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 24,0/1.769,0 pos, 0,0/0,0 neg]
% This clause covers 24 positive examples, of which 24 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 103 208 308 404 889 1055 1378 1573

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.745,0/1.745,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.745,0/1.745,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -175,588566 (regressionFit = 175,588565, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 559,0/1.745,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -175,588566): hasCat(A, _) :- link(A, _).  [covers 559,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586300 (regressionFit = 175,586298, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -175,586300): hasCat(A, _) :- link(_, A).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586300 (regressionFit = 175,586298, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584834 (regressionFit = 175,584832, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -175,584834): hasCat(A, _) :- link(B, A), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,501994 (regressionFit = 175,501991, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -175,501994): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,540028 (regressionFit = 175,540025, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 91,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,501994 (regressionFit = 175,501991, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -175,501994): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,575934 (regressionFit = 175,575931, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 358,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,501994 (regressionFit = 175,501991, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,501994 (regressionFit = 175,501991, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586301 (regressionFit = 175,586298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,586302 (regressionFit = 175,586298, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 703,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,584835 (regressionFit = 175,584832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 217,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,571895 (regressionFit = 175,571892, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 162,0/1.745,0 pos, 0,0/0,0 neg]
%     Score = -175,571896 (regressionFit = 175,571892, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 162,0/1.745,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13625821340200175 to score=0.0025 #egs=85.0
Comparing variance: 0.09874701378475748 to score=0.0025 #egs=1660.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.660,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,098747)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,098747) into the LAST position (#1) in the search queue.

% Time for loop #3: 594 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.745,0 pos, 0,0/0,0 neg]
% This clause covers 85 positive examples, of which 85 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 478 508 536 589 819 1130 1219 1406 1510 1619

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.660,0/1.660,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.660,0/1.660,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -163,904683 (regressionFit = 163,904682, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -163,904683): hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920018 (regressionFit = 163,920016, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904684 (regressionFit = 163,904682, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906052 (regressionFit = 163,906050, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919967 (regressionFit = 163,919964, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904684 (regressionFit = 163,904682, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,879790 (regressionFit = 163,879787, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -163,879790): hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906053 (regressionFit = 163,906050, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,897384 (regressionFit = 163,897381, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 218,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,879790 (regressionFit = 163,879787, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906053 (regressionFit = 163,906050, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,879790 (regressionFit = 163,879787, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906053 (regressionFit = 163,906050, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,904685 (regressionFit = 163,904682, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,879790 (regressionFit = 163,879787, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -163,879790): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906053 (regressionFit = 163,906050, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,906053 (regressionFit = 163,906050, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 159,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,917934 (regressionFit = 163,917931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 27,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,917934 (regressionFit = 163,917931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 27,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920019 (regressionFit = 163,920016, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920019 (regressionFit = 163,920016, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908537 (regressionFit = 163,908534, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908537 (regressionFit = 163,908534, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919637 (regressionFit = 163,919634, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 41,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920020 (regressionFit = 163,920016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920046 (regressionFit = 163,920043, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 273,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920020 (regressionFit = 163,920016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920019 (regressionFit = 163,920016, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,919968 (regressionFit = 163,919964, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 87,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920020 (regressionFit = 163,920016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920020 (regressionFit = 163,920016, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,920020 (regressionFit = 163,920016, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 618,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,908538 (regressionFit = 163,908534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 132,0/1.660,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13245715388079016 to score=0.0025 #egs=57.0
Comparing variance: 0.09752322464426226 to score=0.0025 #egs=1603.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.603,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097523)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,097523) into the LAST position (#1) in the search queue.

% Time for loop #4: 797 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/1.660,0 pos, 0,0/0,0 neg]
% This clause covers 57 positive examples, of which 57 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 101 368 383 644 714 989 1022 1239 1277

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.603,0/1.603,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.603,0/1.603,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -156,328371 (regressionFit = 156,328370, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 608,0/1.603,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -156,328371): hasCat(A, _) :- link(_, A).  [covers 608,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,328372 (regressionFit = 156,328370, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 608,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,320456 (regressionFit = 156,320454, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -156,320456): hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,320457 (regressionFit = 156,320454, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,320458 (regressionFit = 156,320454, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,328373 (regressionFit = 156,328370, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 608,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,329349 (regressionFit = 156,329346, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 263,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,320458 (regressionFit = 156,320454, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
%     Score = -156,328373 (regressionFit = 156,328370, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 608,0/1.603,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08233287453626452 to score=0.0025 #egs=132.0
Comparing variance: 0.09888002373645882 to score=0.0025 #egs=1471.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 132,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082333)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082333) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.471,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,098880)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,098880) into position #1 in the search queue (new size=2).

% Time for loop #5: 263 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/1.603,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 123 260 404 425 443 505 648 746 784 972

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.471,0/1.471,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.471,0/1.471,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -145,451162 (regressionFit = 145,451161, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -145,451162): hasCat(A, _) :- link(A, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446138 (regressionFit = 145,446136, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -145,446138): hasCat(A, _) :- link(_, A).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451918 (regressionFit = 145,451916, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446139 (regressionFit = 145,446136, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446139 (regressionFit = 145,446136, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446140 (regressionFit = 145,446136, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451671 (regressionFit = 145,451668, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 191,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446140 (regressionFit = 145,446136, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446139 (regressionFit = 145,446136, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446140 (regressionFit = 145,446136, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446140 (regressionFit = 145,446136, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,446140 (regressionFit = 145,446136, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 476,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451163 (regressionFit = 145,451161, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449813 (regressionFit = 145,449811, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451163 (regressionFit = 145,451161, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,400753 (regressionFit = 145,400750, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -145,400753): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,450374 (regressionFit = 145,450371, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 11,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451886 (regressionFit = 145,451883, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 143,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,449814 (regressionFit = 145,449811, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 96,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451164 (regressionFit = 145,451161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 475,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,450374 (regressionFit = 145,450371, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 11,0/1.471,0 pos, 0,0/0,0 neg]
%     Score = -145,451919 (regressionFit = 145,451916, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 59,0/1.471,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14335633655429572 to score=0.0025 #egs=23.0
Comparing variance: 0.09813781363279926 to score=0.0025 #egs=1448.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.448,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,098138)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,098138) into position #1 in the search queue (new size=2).

% Time for loop #6: 504 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 23,0/1.471,0 pos, 0,0/0,0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 6 positive seeds: 180 272 718 720 993 1007

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.448,0/1.448,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.448,0/1.448,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -142,103532 (regressionFit = 142,103531, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -142,103532): hasCat(A, _) :- link(A, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,093539 (regressionFit = 142,093538, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 476,0/1.448,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -142,093539): hasCat(A, _) :- link(_, A).  [covers 476,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,093540 (regressionFit = 142,093538, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 476,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,093541 (regressionFit = 142,093538, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 476,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,101939 (regressionFit = 142,101936, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 191,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,093541 (regressionFit = 142,093538, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 476,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103533 (regressionFit = 142,103531, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070201 (regressionFit = 142,070199, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -142,070201): hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103533 (regressionFit = 142,103531, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070202 (regressionFit = 142,070199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070202 (regressionFit = 142,070199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070202 (regressionFit = 142,070199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070202 (regressionFit = 142,070199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,070202 (regressionFit = 142,070199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]
%     Score = -142,103534 (regressionFit = 142,103531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 452,0/1.448,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 449 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 73,0/1.448,0 pos, 0,0/0,0 neg]
% This clause covers 73 positive examples, of which 73 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/132,0 pos, 0,0/0,0 neg]'
%     Score = -156,320456 (regressionFit = 156,320454, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/132,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 12 19 32 70 72 78 83 87 89 107
%     Score = -10,852599 (regressionFit = 10,852595, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,852599): hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%     Score = -10,859270 (regressionFit = 10,859267, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 41,0/132,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,082.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09876543209876544 to score=0.0025 #egs=18.0
Comparing variance: 0.07960366395263024 to score=0.0025 #egs=114.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,079604)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 132,0/132,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,079604) into the LAST position (#1) in the search queue.

% Time for loop #8: 34 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 18,0/132,0 pos, 0,0/0,0 neg]
% This clause covers 18 positive examples, of which 18 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon24533))

%%%%%  WILL-Produced Tree #6 @ 11:33:50 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A), link(D, C) )
%   then return 0.2435220559679178;  // std dev = 2,366, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   else if ( link(A, E), link(E, F), link(F, E) )
%   | then return 0.24510875102546148;  // std dev = 1,325, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else if ( link(G, A), link(G, H), link(H, A) )
%   | | then return 0.18199657746826936;  // std dev = 3,403, 85,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=71 */
%   | | else if ( link(A, I), link(I, J), link(A, J) )
%   | | | then return 0.18964043446338436;  // std dev = 2,748, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   | | | else if ( link(K, A), link(L, K) )
%   | | | | then if ( link(A, M) )
%   | | | | | then return 0.19758084221133823;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | | | else return 0.2289980195539604;  // std dev = 0,282, 114,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=104 */
%   | | | | else if ( link(A, N), link(N, P), link(P, Q) )
%   | | | | | then return 0.1688948178031948;  // std dev = 1,816, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | | | else if ( link(A, R), link(R, S) )
%   | | | | | | then return 0.23754098476153876;  // std dev = 2,502, 73,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=66 */
%   | | | | | | else return 0.21560529074178025;  // std dev = 11,654, 1.375,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=1.222 */


% Clauses:

hasCat(A, B, 0.2435220559679178) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.24510875102546148) :- 
     link(A, C), 
     link(C, D), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.18199657746826936) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.18964043446338436) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #4.

hasCat(A, B, 0.19758084221133823) :- 
     link(C, A), 
     link(D, C), 
     link(A, E), 
     !. // Clause #5.

hasCat(A, B, 0.2289980195539604) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.1688948178031948) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.23754098476153876) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #8.

hasCat(A, B, 0.21560529074178025) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.2435220559679178) :-  /* #neg=6 #pos=88 */ 
   link(a, uniqueVar49),
   link(uniqueVar50, a),
   link(uniqueVar50, uniqueVar49),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.24510875102546148) :-  /* #neg=2 #pos=22 */ 
   link(a, uniqueVar51),
   link(uniqueVar51, uniqueVar52),
   link(uniqueVar52, uniqueVar51),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.18199657746826936) :-  /* #neg=14 #pos=71 */ 
   link(uniqueVar53, a),
   link(uniqueVar53, uniqueVar54),
   link(uniqueVar54, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.18964043446338436) :-  /* #neg=9 #pos=48 */ 
   link(a, uniqueVar55),
   link(uniqueVar55, uniqueVar56),
   link(a, uniqueVar56),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.19758084221133823) :-  /* #neg=2 #pos=16 */ 
   link(uniqueVar57, a),
   link(underscore, uniqueVar57),
   link(a, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.2289980195539604) :-  /* #neg=10 #pos=104 */ 
   link(uniqueVar58, a),
   link(underscore, uniqueVar58),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.1688948178031948) :-  /* #neg=4 #pos=19 */ 
   link(a, uniqueVar59),
   link(uniqueVar59, uniqueVar60),
   link(uniqueVar60, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.23754098476153876) :-  /* #neg=7 #pos=66 */ 
   link(a, uniqueVar61),
   link(uniqueVar61, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.21560529074178025) :-  /* #neg=153 #pos=1.222 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar52, uniqueVar51)
%   link(uniqueVar55, uniqueVar56)
%   link(uniqueVar58, a)
%   link(a, uniqueVar61)
%   link(uniqueVar50, a)
%   link(uniqueVar59, uniqueVar60)
%   link(a, uniqueVar51)
%   link(a, uniqueVar56)
%   link(uniqueVar61, underscore)
%   link(uniqueVar53, a)
%   link(uniqueVar53, uniqueVar54)
%   link(uniqueVar54, a)
%   link(uniqueVar50, uniqueVar49)
%   link(a, uniqueVar49)
%   link(underscore, uniqueVar58)
%   link(a, uniqueVar59)
%   link(uniqueVar60, underscore)
%   link(uniqueVar51, uniqueVar52)
%   link(underscore, uniqueVar57)
%   link(uniqueVar57, a)
%   link(a, underscore)
%   link(a, uniqueVar55)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 6 trees is 26,028 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0823328745362645
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:494 milliseconds
No hidden examples for : hasCat
Time to build dataset: 507 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09820992436044244
Set score:0.0025

% Have these 10 positive seeds: 179 227 342 394 425 646 666 1171 1318 1370

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,964761 (regressionFit = 182,964760, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,964761): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965089 (regressionFit = 182,965088, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965002 (regressionFit = 182,965000, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911778 (regressionFit = 182,911776, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,911778): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,964762 (regressionFit = 182,964760, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965003 (regressionFit = 182,965000, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,964763 (regressionFit = 182,964760, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,964763 (regressionFit = 182,964760, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,962903 (regressionFit = 182,962900, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965003 (regressionFit = 182,965000, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960897 (regressionFit = 182,960894, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965003 (regressionFit = 182,965000, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965090 (regressionFit = 182,965088, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965090 (regressionFit = 182,965088, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960900 (regressionFit = 182,960897, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,950727 (regressionFit = 182,950724, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960900 (regressionFit = 182,960897, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,963864 (regressionFit = 182,963861, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,950727 (regressionFit = 182,950724, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,964424 (regressionFit = 182,964421, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911779 (regressionFit = 182,911776, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,950727 (regressionFit = 182,950724, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,950727 (regressionFit = 182,950724, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,965091 (regressionFit = 182,965088, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,960901 (regressionFit = 182,960897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07307462398528683 to score=0.0025 #egs=200.0
Comparing variance: 0.10120075231545583 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073075)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073075) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101201)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101201) into position #1 in the search queue (new size=2).

% Time for loop #1: 928 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 101 213 281 354 442 689 924 938 1170 1258

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,287077 (regressionFit = 168,287076, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,287077): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287167 (regressionFit = 168,287165, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287078 (regressionFit = 168,287076, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287079 (regressionFit = 168,287076, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287167 (regressionFit = 168,287165, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292703 (regressionFit = 168,292701, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,272640 (regressionFit = 168,272637, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,272640): hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,276546 (regressionFit = 168,276543, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287168 (regressionFit = 168,287165, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,287169 (regressionFit = 168,287165, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,272640 (regressionFit = 168,272637, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,292704 (regressionFit = 168,292701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07046304325696796 to score=0.0025 #egs=13.0
Comparing variance: 0.10142825283373717 to score=0.0025 #egs=1650.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.650,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,101428)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,101428) into position #1 in the search queue (new size=2).

% Time for loop #2: 582 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 13 positive examples, of which 13 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 75 214 433 473 495 635 941 1088 1274 1397

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.650,0/1.650,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.650,0/1.650,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -167,348473 (regressionFit = 167,348472, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -167,348473): hasCat(A, _) :- link(A, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342826 (regressionFit = 167,342824, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -167,342826): hasCat(A, _) :- link(_, A).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342827 (regressionFit = 167,342824, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342827 (regressionFit = 167,342824, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345347 (regressionFit = 167,345344, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,324850 (regressionFit = 167,324847, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 249,0/1.650,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -167,324850): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 249,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345348 (regressionFit = 167,345344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,342828 (regressionFit = 167,342824, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 594,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345348 (regressionFit = 167,345344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345348 (regressionFit = 167,345344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345348 (regressionFit = 167,345344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345347 (regressionFit = 167,345344, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,345348 (regressionFit = 167,345344, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 177,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,241727 (regressionFit = 167,241724, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -167,241727): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348474 (regressionFit = 167,348472, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348515 (regressionFit = 167,348513, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348474 (regressionFit = 167,348472, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348516 (regressionFit = 167,348513, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,326904 (regressionFit = 167,326901, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348516 (regressionFit = 167,348513, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348516 (regressionFit = 167,348513, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348475 (regressionFit = 167,348472, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348516 (regressionFit = 167,348513, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]
%     Score = -167,348516 (regressionFit = 167,348513, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.650,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14570687375802577 to score=0.0025 #egs=67.0
Comparing variance: 0.09948159404552621 to score=0.0025 #egs=1583.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.583,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,099482)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,099482) into position #1 in the search queue (new size=2).

% Time for loop #3: 668 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 67,0/1.650,0 pos, 0,0/0,0 neg]
% This clause covers 67 positive examples, of which 67 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 40 136 155 217 294 297 362 497 1065 1392

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,460897 (regressionFit = 157,460896, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,460897): hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478717 (regressionFit = 157,478716, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460898 (regressionFit = 157,460896, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466826 (regressionFit = 157,466824, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460898 (regressionFit = 157,460896, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466827 (regressionFit = 157,466824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466827 (regressionFit = 157,466824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466827 (regressionFit = 157,466824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,460899 (regressionFit = 157,460896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466827 (regressionFit = 157,466824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,466827 (regressionFit = 157,466824, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478718 (regressionFit = 157,478716, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478718 (regressionFit = 157,478716, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,479295 (regressionFit = 157,479292, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,478719 (regressionFit = 157,478716, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10954228371014524 to score=0.0025 #egs=477.0
Comparing variance: 0.09512588283459254 to score=0.0025 #egs=1106.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,109542)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,109542) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.106,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,095126)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,095126) into position #2 in the search queue (new size=3).

% Time for loop #4: 546 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% This clause covers 477 positive examples, of which 477 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -157,460897 (regressionFit = 157,460896, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 135 194 203 252 258 297 299 313 395
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248901 (regressionFit = 52,248899, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,248901): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,251047 (regressionFit = 52,251044, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248902 (regressionFit = 52,248899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248902 (regressionFit = 52,248899, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,251047 (regressionFit = 52,251044, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248902 (regressionFit = 52,248899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,251047 (regressionFit = 52,251044, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248902 (regressionFit = 52,248899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,251047 (regressionFit = 52,251044, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,248902 (regressionFit = 52,248899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,230049 (regressionFit = 52,230046, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,230049): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,110.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1285865539398913 to score=0.0025 #egs=145.0
Comparing variance: 0.10115962582932801 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,101160)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,101160) into position #1 in the search queue (new size=3).

% Time for loop #5: 320 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -157,460897 (regressionFit = 157,460896, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 22 77 109 170 188 269 277 322 329 331
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554391 (regressionFit = 33,554389, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,554391): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,574044 (regressionFit = 33,574041, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,554392 (regressionFit = 33,554389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08280843345289227 to score=0.0025 #egs=54.0
Comparing variance: 0.1046141504062936 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,082808)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,082808) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #6: 155 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -157,460897 (regressionFit = 157,460896, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 13 28 64 135 144 172 181 199 202 246
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -157,4609):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon27033, Anon28021))

% Have these 10 positive seeds: 29 239 334 552 776 798 802 803 813 879

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,199250 (regressionFit = 105,199249, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,199250): hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,199251 (regressionFit = 105,199249, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,200168 (regressionFit = 105,200166, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,199252 (regressionFit = 105,199249, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,200169 (regressionFit = 105,200166, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,199252 (regressionFit = 105,199249, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,200169 (regressionFit = 105,200166, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,200169 (regressionFit = 105,200166, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,095.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10210749183889739 to score=0.0025 #egs=527.0
Comparing variance: 0.08875406051169138 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,102107)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,102107) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #8: 233 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -105,199250 (regressionFit = 105,199249, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 82 100 200 230 267 292 370 392 407 413
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791422 (regressionFit = 53,791420, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,791422): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,810613 (regressionFit = 53,810610, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,791423 (regressionFit = 53,791420, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08208225675013474 to score=0.0025 #egs=110.0
Comparing variance: 0.10734381797926708 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,082082)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,082082) into position #3 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=5).

% Time for loop #9: 257 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon28703, Anon28495))
Created a leaf under (hasCat(A, B) :- link(Anon28495, A))
Created a leaf under (hasCat(A, B) :- link(Anon27033, Anon28021))
Created a leaf under (hasCat(A, B) :- link(Anon28703, Anon28495))
Created a leaf under (hasCat(A, B) :- link(A, Anon24933), link(Anon24969, A))

%%%%%  WILL-Produced Tree #7 @ 11:33:54 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A) )
%   then return 0.18583471684908837;  // std dev = 0,270, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(E, F), link(F, E) )
%   | then return 0.2115432969714104;  // std dev = 0,957, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( link(G, A), link(H, G), link(I, H) )
%   | | then return 0.12765428905953877;  // std dev = 3,124, 67,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=55 */
%   | | else if ( link(A, J) )
%   | | | then if ( link(K, J), link(L, K) )
%   | | | | then return 0.15454309786357492;  // std dev = 4,318, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | | else if ( link(J, M) )
%   | | | | | then return 0.19096589097400385;  // std dev = 0,288, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | | else return 0.1649489042589438;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | else if ( link(N, A) )
%   | | | | then if ( link(P, N) )
%   | | | | | then return 0.18078756142754224;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | | else return 0.16592456393563765;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | | else return 0.17504052969312195;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.18583471684908837) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.2115432969714104) :- 
     link(C, A), 
     link(C, D), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.12765428905953877) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.15454309786357492) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #4.

hasCat(A, B, 0.19096589097400385) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.1649489042589438) :- 
     link(A, C), 
     !. // Clause #6.

hasCat(A, B, 0.18078756142754224) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #7.

hasCat(A, B, 0.16592456393563765) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.17504052969312195) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.18583471684908837) :-  /* #neg=16 #pos=184 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.2115432969714104) :-  /* #neg=1 #pos=12 */ 
   link(uniqueVar62, a),
   link(uniqueVar62, uniqueVar63),
   link(uniqueVar63, uniqueVar62),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.12765428905953877) :-  /* #neg=12 #pos=55 */ 
   link(uniqueVar64, a),
   link(uniqueVar65, uniqueVar64),
   link(underscore, uniqueVar65),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.15454309786357492) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar66),
   link(uniqueVar67, uniqueVar66),
   link(underscore, uniqueVar67),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.19096589097400385) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar68),
   link(uniqueVar68, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.1649489042589438) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.18078756142754224) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar69, a),
   link(underscore, uniqueVar69),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.16592456393563765) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.17504052969312195) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar69)
%   link(uniqueVar62, a)
%   link(uniqueVar69, a)
%   link(uniqueVar64, a)
%   link(uniqueVar65, uniqueVar64)
%   link(a, uniqueVar66)
%   link(underscore, a)
%   link(uniqueVar63, uniqueVar62)
%   link(uniqueVar68, underscore)
%   link(uniqueVar62, uniqueVar63)
%   link(a, underscore)
%   link(underscore, uniqueVar65)
%   link(underscore, uniqueVar67)
%   link(a, uniqueVar68)
%   link(uniqueVar67, uniqueVar66)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 7 trees is 30,315 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1021074918388974
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:466 milliseconds
No hidden examples for : hasCat
Time to build dataset: 487 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09818108472261886
Set score:0.0025

% Have these 9 positive seeds: 189 353 687 747 905 974 1649 1662 1857

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,911229 (regressionFit = 182,911228, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,911229): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911360 (regressionFit = 182,911359, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911361 (regressionFit = 182,911359, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911361 (regressionFit = 182,911359, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906371 (regressionFit = 182,906369, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,906371): hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911307 (regressionFit = 182,911304, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911115 (regressionFit = 182,911112, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911362 (regressionFit = 182,911359, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,906372 (regressionFit = 182,906369, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09133917305700477 to score=0.0025 #egs=278.0
Comparing variance: 0.09937796780795485 to score=0.0025 #egs=1585.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,091339)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,091339) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.585,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099378)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099378) into position #1 in the search queue (new size=2).

% Time for loop #1: 541 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 278 positive examples, of which 278 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 6 positive seeds: 802 886 1073 1184 1266 1349

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,508616 (regressionFit = 157,508615, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,508616): hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,512703 (regressionFit = 157,512702, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508846 (regressionFit = 157,508844, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508617 (regressionFit = 157,508615, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508847 (regressionFit = 157,508844, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508618 (regressionFit = 157,508615, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508618 (regressionFit = 157,508615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,506962 (regressionFit = 157,506959, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,506962): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508847 (regressionFit = 157,508844, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,508847 (regressionFit = 157,508844, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10800765003121704 to score=0.0025 #egs=257.0
Comparing variance: 0.0977025552144561 to score=0.0025 #egs=1328.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.328,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097703)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097703) into position #1 in the search queue (new size=2).

% Time for loop #2: 298 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
% This clause covers 257 positive examples, of which 257 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 194 197 295 362 399 416 444 488 507 645

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -129,736801 (regressionFit = 129,736800, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -129,736801): hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736802 (regressionFit = 129,736800, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736803 (regressionFit = 129,736800, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,745859 (regressionFit = 129,745856, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736803 (regressionFit = 129,736800, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734380018201428 to score=0.0025 #egs=417.0
Comparing variance: 0.0932759988684169 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,107344) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,093276)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,093276) into position #2 in the search queue (new size=3).

% Time for loop #3: 156 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -129,736801 (regressionFit = 129,736800, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 24 110 172 198 264 343 383
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337897 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398584121 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #4: 183 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -129,736801 (regressionFit = 129,736800, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 17 65 70 99 118 136 174 229 230 250
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -129,7368):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon29981, Anon30127), link(Anon30127, Anon30163))

% Have these 10 positive seeds: 11 67 74 110 133 167 182 232 289 313

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -84,967904 (regressionFit = 84,967902, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -84,967904): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962840 (regressionFit = 84,962838, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -84,962840): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967904 (regressionFit = 84,967902, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962841 (regressionFit = 84,962838, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,953827 (regressionFit = 84,953824, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -84,953827): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962841 (regressionFit = 84,962838, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962841 (regressionFit = 84,962838, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967906 (regressionFit = 84,967902, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962841 (regressionFit = 84,962838, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,962841 (regressionFit = 84,962838, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,967905 (regressionFit = 84,967902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966763 to score=0.0025 #egs=19.0
Comparing variance: 0.09240752027277234 to score=0.0025 #egs=892.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 892,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,092408)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,092408) into position #1 in the search queue (new size=2).

% Time for loop #6: 142 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 68 69 205 331 409 494 515 523 673 841

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -82,424575 (regressionFit = 82,424574, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,424575): hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424576 (regressionFit = 82,424574, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372305 (regressionFit = 82,372303, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,372305): hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424576 (regressionFit = 82,424574, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,372306 (regressionFit = 82,372303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424577 (regressionFit = 82,424574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,092.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
Comparing variance: 0.053877551020408164 to score=0.0025 #egs=35.0
Comparing variance: 0.09391667320372718 to score=0.0025 #egs=857.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 35,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,053878)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,053878) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 857,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,093917)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,093917) into position #1 in the search queue (new size=3).

% Time for loop #7: 124 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 41 75 109 256 332 366 407 410 467 584

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 857,0/857,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 857,0/857,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -80,471336 (regressionFit = 80,471335, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -80,471336): hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471337 (regressionFit = 80,471335, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471337 (regressionFit = 80,471335, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%     Score = -80,471338 (regressionFit = 80,471335, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 278,0/857,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,094.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10461415040629377 to score=0.0025 #egs=278.0
Comparing variance: 0.0887540605116922 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,088754) into position #3 in the search queue (new size=4).

% Time for loop #8: 120 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 278,0/857,0 pos, 0,0/0,0 neg]
% This clause covers 278 positive examples, of which 278 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -80,471336 (regressionFit = 80,471335, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 14 35 41 57 84 91 98 111 119 120
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -80,4713):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(A, Anon31243))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -182,906371 (regressionFit = 182,906369, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 35 39 57 59 199 258
%     Score = -25,248790 (regressionFit = 25,248787, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -25,248790): hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -25,349078 (regressionFit = 25,349075, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -25,387565 (regressionFit = 25,387562, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/278,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,091.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]
Comparing variance: 8.773322930255567E-6 to score=0.0025 #egs=24.0
Comparing variance: 0.09940384523687355 to score=0.0025 #egs=254.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 254,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099404)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,099404) into position #1 in the search queue (new size=3).

% Time for loop #10: 57 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #10, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/278,0 pos, 0,0/0,0 neg]
% This clause covers 24 positive examples, of which 24 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon29275))
Created a leaf under (hasCat(A, B) :- link(A, Anon31243))
Created a leaf under (hasCat(A, B) :- link(A, Anon30857), link(Anon30857, Anon30879))

%%%%%  WILL-Produced Tree #8 @ 11:33:56 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(D, C) )
%   then if ( link(A, C) )
%   | then return 0.21516629203605211;  // std dev = 0,015, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.13426970545815173;  // std dev = 0,315, 254,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=225 */
%   else if ( link(A, E), link(F, E), link(G, F) )
%   | then return 0.1318417683198224;  // std dev = 5,269, 257,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=225 */
%   | else if ( link(H, A) )
%   | | then if ( link(H, I), link(I, J) )
%   | | | then return 0.13296512654911624;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | else return 0.1331816447246391;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | else if ( link(A, K), link(K, L), link(L, M) )
%   | | | then return 0.10705104716628004;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( link(A, N), link(N, P) )
%   | | | | then return 0.17926424421963177;  // std dev = 0,232, 35,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | | else if ( link(A, Q) )
%   | | | | | then return 0.13265773953471746;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | | | else return 0.1416697529956602;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.21516629203605211) :- 
     link(C, A), 
     link(D, C), 
     link(A, C), 
     !. // Clause #1.

hasCat(A, B, 0.13426970545815173) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.1318417683198224) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.13296512654911624) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.1331816447246391) :- 
     link(C, A), 
     !. // Clause #5.

hasCat(A, B, 0.10705104716628004) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.17926424421963177) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #7.

hasCat(A, B, 0.13265773953471746) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.1416697529956602) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.21516629203605211) :-  /* #pos=24 */ 
   link(uniqueVar70, a),
   link(underscore, uniqueVar70),
   link(a, uniqueVar70),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.13426970545815173) :-  /* #neg=29 #pos=225 */ 
   link(uniqueVar71, a),
   link(underscore, uniqueVar71),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.1318417683198224) :-  /* #neg=32 #pos=225 */ 
   link(a, uniqueVar72),
   link(uniqueVar73, uniqueVar72),
   link(underscore, uniqueVar73),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.13296512654911624) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar74, a),
   link(uniqueVar74, uniqueVar75),
   link(uniqueVar75, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.1331816447246391) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.10705104716628004) :-  /* #neg=3 #pos=16 */ 
   link(a, uniqueVar76),
   link(uniqueVar76, uniqueVar77),
   link(uniqueVar77, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.17926424421963177) :-  /* #neg=2 #pos=33 */ 
   link(a, uniqueVar78),
   link(uniqueVar78, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.13265773953471746) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.1416697529956602) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar74, a)
%   link(uniqueVar74, uniqueVar75)
%   link(uniqueVar71, a)
%   link(uniqueVar78, underscore)
%   link(a, uniqueVar70)
%   link(a, uniqueVar76)
%   link(underscore, uniqueVar71)
%   link(uniqueVar70, a)
%   link(uniqueVar76, uniqueVar77)
%   link(a, uniqueVar72)
%   link(a, uniqueVar78)
%   link(underscore, a)
%   link(uniqueVar77, underscore)
%   link(underscore, uniqueVar70)
%   link(underscore, uniqueVar73)
%   link(uniqueVar73, uniqueVar72)
%   link(a, underscore)
%   link(uniqueVar75, underscore)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 8 trees is 32,564 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09133917305700476
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:537 milliseconds
No hidden examples for : hasCat
Time to build dataset: 548 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09816488938057476
Set score:0.0025

% Have these 10 positive seeds: 23 176 191 279 395 454 464 496 678 704

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,881061 (regressionFit = 182,881059, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,881061): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881064 (regressionFit = 182,881063, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881062 (regressionFit = 182,881059, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878953 (regressionFit = 182,878951, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,878953): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881062 (regressionFit = 182,881059, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,877546 (regressionFit = 182,877543, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,877546): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,818705 (regressionFit = 182,818703, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,818705): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,879478 (regressionFit = 182,879475, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,877546 (regressionFit = 182,877543, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881063 (regressionFit = 182,881059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,818705 (regressionFit = 182,818703, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,818705): hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881062 (regressionFit = 182,881059, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881063 (regressionFit = 182,881059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,879793 (regressionFit = 182,879790, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881063 (regressionFit = 182,881059, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,877546 (regressionFit = 182,877543, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,877546 (regressionFit = 182,877543, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,878954 (regressionFit = 182,878951, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881063 (regressionFit = 182,881059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881063 (regressionFit = 182,881059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881065 (regressionFit = 182,881063, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881065 (regressionFit = 182,881063, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,880772 (regressionFit = 182,880769, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881066 (regressionFit = 182,881063, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04548529261357766 to score=0.0025 #egs=39.0
Comparing variance: 0.09925700446298613 to score=0.0025 #egs=1824.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.824,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099257)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099257) into the LAST position (#1) in the search queue.

% Time for loop #1: 818 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 39 positive examples, of which 39 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 6 positive seeds: 512 530 540 958 1008 1784

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -181,043355 (regressionFit = 181,043354, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,043355): hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043281 (regressionFit = 181,043280, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,043281): hasCat(A, _) :- link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034304 (regressionFit = 181,034301, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,034304): hasCat(A, _) :- link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043282 (regressionFit = 181,043280, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043282 (regressionFit = 181,043280, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043586 (regressionFit = 181,043584, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,025123 (regressionFit = 181,025120, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,025123): hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,036205 (regressionFit = 181,036202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 54,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043610 (regressionFit = 181,043607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,025123 (regressionFit = 181,025120, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,025123): hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,002104 (regressionFit = 181,002101, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,002104): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,041959 (regressionFit = 181,041956, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 437,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,002104 (regressionFit = 181,002101, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,002104 (regressionFit = 181,002101, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043283 (regressionFit = 181,043280, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043356 (regressionFit = 181,043354, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019556 (regressionFit = 181,019554, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043356 (regressionFit = 181,043354, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019557 (regressionFit = 181,019554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,036205 (regressionFit = 181,036202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 54,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019557 (regressionFit = 181,019554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019557 (regressionFit = 181,019554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,025123 (regressionFit = 181,025120, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043077 (regressionFit = 181,043074, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 306,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019557 (regressionFit = 181,019554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,019557 (regressionFit = 181,019554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,034305 (regressionFit = 181,034301, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043357 (regressionFit = 181,043354, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043610 (regressionFit = 181,043607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,002104 (regressionFit = 181,002101, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,043587 (regressionFit = 181,043584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,002000 (regressionFit = 181,001996, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,002000): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12579855620440777 to score=0.0025 #egs=100.0
Comparing variance: 0.09769265711789495 to score=0.0025 #egs=1724.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.724,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097693)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097693) into the LAST position (#1) in the search queue.

% Time for loop #2: 866 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 100,0/1.824,0 pos, 0,0/0,0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 242 300 385 532 704 983 1003 1428 1460 1472

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.724,0/1.724,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.724,0/1.724,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,416453 (regressionFit = 168,416452, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 618,0/1.724,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,416453): hasCat(A, _) :- link(A, _).  [covers 618,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421758 (regressionFit = 168,421757, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,416454 (regressionFit = 168,416452, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 618,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,416455 (regressionFit = 168,416452, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 618,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421759 (regressionFit = 168,421757, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421759 (regressionFit = 168,421757, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409597 (regressionFit = 168,409594, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,409597): hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409598 (regressionFit = 168,409594, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409597 (regressionFit = 168,409594, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409598 (regressionFit = 168,409594, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,419728 (regressionFit = 168,419725, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 354,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409598 (regressionFit = 168,409594, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,421760 (regressionFit = 168,421757, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 682,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409598 (regressionFit = 168,409594, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%     Score = -168,409598 (regressionFit = 168,409594, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08253420994101457 to score=0.0025 #egs=153.0
Comparing variance: 0.09916095495860233 to score=0.0025 #egs=1571.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 153,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,082534)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,082534) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.571,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,099161)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,099161) into position #1 in the search queue (new size=2).

% Time for loop #3: 558 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 153,0/1.724,0 pos, 0,0/0,0 neg]
% This clause covers 153 positive examples, of which 153 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 30 233 254 280 487 683 927 1072 1086 1316

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.571,0/1.571,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.571,0/1.571,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -155,777770 (regressionFit = 155,777768, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -155,777770): hasCat(A, _) :- link(A, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,781206 (regressionFit = 155,781205, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777771 (regressionFit = 155,777768, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776310 (regressionFit = 155,776308, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -155,776310): hasCat(A, _) :- link(A, B), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777771 (regressionFit = 155,777768, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,774598 (regressionFit = 155,774595, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -155,774598): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777772 (regressionFit = 155,777768, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777771 (regressionFit = 155,777768, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777772 (regressionFit = 155,777768, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776956 (regressionFit = 155,776953, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 243,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777772 (regressionFit = 155,777768, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,776311 (regressionFit = 155,776308, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 168,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777772 (regressionFit = 155,777768, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,777772 (regressionFit = 155,777768, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 575,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,781207 (regressionFit = 155,781205, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 529,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,781208 (regressionFit = 155,781205, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 529,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,780573 (regressionFit = 155,780570, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 244,0/1.571,0 pos, 0,0/0,0 neg]
%     Score = -155,781208 (regressionFit = 155,781205, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 529,0/1.571,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12070752628078112 to score=0.0025 #egs=49.0
Comparing variance: 0.09846250090628729 to score=0.0025 #egs=1522.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.522,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,098463)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,098463) into position #1 in the search queue (new size=2).

% Time for loop #4: 478 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 49,0/1.571,0 pos, 0,0/0,0 neg]
% This clause covers 49 positive examples, of which 49 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 171 243 370 597 647 680 690 728 933 1220

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.522,0/1.522,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.522,0/1.522,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -149,857892 (regressionFit = 149,857891, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 526,0/1.522,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,857892): hasCat(A, _) :- link(A, _).  [covers 526,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854900 (regressionFit = 149,854899, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,854900): hasCat(A, _) :- link(_, A).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,858936 (regressionFit = 149,858933, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 105,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854901 (regressionFit = 149,854899, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854901 (regressionFit = 149,854899, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,858937 (regressionFit = 149,858933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 105,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,859713 (regressionFit = 149,859710, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 237,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,858937 (regressionFit = 149,858933, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 105,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854902 (regressionFit = 149,854899, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 522,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,857893 (regressionFit = 149,857891, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 526,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,857894 (regressionFit = 149,857891, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 526,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,858937 (regressionFit = 149,858933, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 105,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,857894 (regressionFit = 149,857891, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 526,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,854669 (regressionFit = 149,854666, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,854669): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]
%     Score = -149,858937 (regressionFit = 149,858933, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 105,0/1.522,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10643003928360496 to score=0.0025 #egs=213.0
Comparing variance: 0.09716200759252387 to score=0.0025 #egs=1309.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.309,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,097162)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,097162) into position #1 in the search queue (new size=2).

% Time for loop #5: 436 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 213,0/1.522,0 pos, 0,0/0,0 neg]
% This clause covers 213 positive examples, of which 213 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 131 146 411 703 736 954 1147 1291

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.309,0/1.309,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.309,0/1.309,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -127,185035 (regressionFit = 127,185034, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -127,185035): hasCat(A, _) :- link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,171861 (regressionFit = 127,171859, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -127,171861): hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,171861 (regressionFit = 127,171859, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,171862 (regressionFit = 127,171859, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,181848 (regressionFit = 127,181845, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,171862 (regressionFit = 127,171859, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734379077290641 to score=0.0025 #egs=417.0
Comparing variance: 0.09238733023351677 to score=0.0025 #egs=892.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 892,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,092387)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,092387) into position #2 in the search queue (new size=3).

% Time for loop #6: 161 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -127,171861 (regressionFit = 127,171859, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 36 39 47 57 182 193 254 269 321 357
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 182 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 4 78 235 359 472 476 504 511 515 525

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -82,406582 (regressionFit = 82,406581, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,406582): hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406583 (regressionFit = 82,406581, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,369844 (regressionFit = 82,369842, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,369844): hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406583 (regressionFit = 82,406581, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,369846 (regressionFit = 82,369842, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,369846 (regressionFit = 82,369842, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,369846 (regressionFit = 82,369842, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,369846 (regressionFit = 82,369842, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,406584 (regressionFit = 82,406581, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,092.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #8: 148 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon33881, A), link(Anon33959, Anon33881))

%%%%%  WILL-Produced Tree #9 @ 11:34:00 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, C), link(C, D) )
%   then return 0.15227015153324905;  // std dev = 1,332, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.09170854112897703;  // std dev = 3,547, 100,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=85 */
%   | else if ( link(H, A), link(I, H) )
%   | | then return 0.12162759692064691;  // std dev = 0,287, 153,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=139 */
%   | | else if ( link(A, J), link(J, K), link(K, L) )
%   | | | then return 0.10015622241298353;  // std dev = 2,432, 49,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=42 */
%   | | | else if ( link(A, M), link(N, M), link(P, N) )
%   | | | | then return 0.10791856721574009;  // std dev = 4,761, 213,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=187 */
%   | | | | else if ( link(Q, A) )
%   | | | | | then if ( link(Q, R), link(R, S) )
%   | | | | | | then return 0.10859134863844119;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | | else return 0.10864956275406339;  // std dev = 5,541, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | | | else if ( link(A, T), link(T, U) )
%   | | | | | | then return 0.1484425853741794;  // std dev = 1,373, 35,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | | | | else return 0.11410153209689951;  // std dev = 8,971, 857,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=767 */


% Clauses:

hasCat(A, B, 0.15227015153324905) :- 
     link(A, C), 
     link(D, C), 
     link(C, D), 
     !. // Clause #1.

hasCat(A, B, 0.09170854112897703) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.12162759692064691) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #3.

hasCat(A, B, 0.10015622241298353) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.10791856721574009) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.10859134863844119) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.10864956275406339) :- 
     link(C, A), 
     !. // Clause #7.

hasCat(A, B, 0.1484425853741794) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #8.

hasCat(A, B, 0.11410153209689951) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.15227015153324905) :-  /* #neg=2 #pos=37 */ 
   link(a, uniqueVar79),
   link(uniqueVar80, uniqueVar79),
   link(uniqueVar79, uniqueVar80),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.09170854112897703) :-  /* #neg=15 #pos=85 */ 
   link(uniqueVar81, a),
   link(uniqueVar82, uniqueVar81),
   link(underscore, uniqueVar82),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.12162759692064691) :-  /* #neg=14 #pos=139 */ 
   link(uniqueVar83, a),
   link(underscore, uniqueVar83),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.10015622241298353) :-  /* #neg=7 #pos=42 */ 
   link(a, uniqueVar84),
   link(uniqueVar84, uniqueVar85),
   link(uniqueVar85, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.10791856721574009) :-  /* #neg=26 #pos=187 */ 
   link(a, uniqueVar86),
   link(uniqueVar87, uniqueVar86),
   link(underscore, uniqueVar87),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.10859134863844119) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar88, a),
   link(uniqueVar88, uniqueVar89),
   link(uniqueVar89, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.10864956275406339) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.1484425853741794) :-  /* #neg=2 #pos=33 */ 
   link(a, uniqueVar90),
   link(uniqueVar90, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.11410153209689951) :-  /* #neg=90 #pos=767 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar82)
%   link(uniqueVar84, uniqueVar85)
%   link(uniqueVar80, uniqueVar79)
%   link(uniqueVar83, a)
%   link(uniqueVar85, underscore)
%   link(uniqueVar87, uniqueVar86)
%   link(a, uniqueVar86)
%   link(uniqueVar90, underscore)
%   link(underscore, uniqueVar87)
%   link(uniqueVar89, underscore)
%   link(underscore, uniqueVar83)
%   link(uniqueVar88, a)
%   link(underscore, a)
%   link(a, uniqueVar90)
%   link(uniqueVar82, uniqueVar81)
%   link(uniqueVar81, a)
%   link(a, uniqueVar84)
%   link(uniqueVar79, uniqueVar80)
%   link(a, uniqueVar79)
%   link(uniqueVar88, uniqueVar89)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 9 trees is 36,792 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09238733023351678
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:537 milliseconds
No hidden examples for : hasCat
Time to build dataset: 548 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09816017654630617
Set score:0.0025

% Have these 10 positive seeds: 84 870 1096 1119 1120 1142 1144 1197 1213 1450

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,872403 (regressionFit = 182,872402, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,872403): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871730 (regressionFit = 182,871729, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,871730): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,821096 (regressionFit = 182,821094, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,821096): hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871731 (regressionFit = 182,871729, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,813339 (regressionFit = 182,813336, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,813339): hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,821097 (regressionFit = 182,821094, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,821097 (regressionFit = 182,821094, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,813339 (regressionFit = 182,813336, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,821097 (regressionFit = 182,821094, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871732 (regressionFit = 182,871729, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871312 (regressionFit = 182,871309, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871732 (regressionFit = 182,871729, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872404 (regressionFit = 182,872402, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,813339 (regressionFit = 182,813336, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,813339): hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872405 (regressionFit = 182,872402, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,821097 (regressionFit = 182,821094, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872405 (regressionFit = 182,872402, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871074 (regressionFit = 182,871071, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0593009276389173 to score=0.0025 #egs=94.0
Comparing variance: 0.10019166115541422 to score=0.0025 #egs=1769.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100192)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100192) into the LAST position (#1) in the search queue.

% Time for loop #1: 531 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 656 749 846 1039 1231 1327 1596 1645 1737

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -177,232539 (regressionFit = 177,232538, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,232539): hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237497 (regressionFit = 177,237496, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232540 (regressionFit = 177,232538, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217104 (regressionFit = 177,217102, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,217104): hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232540 (regressionFit = 177,232538, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238055 (regressionFit = 177,238052, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238055 (regressionFit = 177,238052, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,230501 (regressionFit = 177,230498, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238055 (regressionFit = 177,238052, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238055 (regressionFit = 177,238052, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,217105 (regressionFit = 177,217102, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,232541 (regressionFit = 177,232538, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237498 (regressionFit = 177,237496, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237498 (regressionFit = 177,237496, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238991 (regressionFit = 177,238988, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,234108 (regressionFit = 177,234105, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238992 (regressionFit = 177,238988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,237499 (regressionFit = 177,237496, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238992 (regressionFit = 177,238988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238992 (regressionFit = 177,238988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238991 (regressionFit = 177,238988, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,238992 (regressionFit = 177,238988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11059576062682842 to score=0.0025 #egs=186.0
Comparing variance: 0.09895533170366706 to score=0.0025 #egs=1583.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 186,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,110596)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,110596) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.583,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098955)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098955) into the LAST position (#2) in the search queue.

% Time for loop #2: 732 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
% This clause covers 186 positive examples, of which 186 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/186,0 pos, 0,0/0,0 neg]'
%     Score = -177,217104 (regressionFit = 177,217102, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/186,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 57 60 66 93 110 146 172 173 185
%     Score = -20,566680 (regressionFit = 20,566677, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -20,566680): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/186,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 186,0/186,0 pos, 0,0/0,0 neg]
%     Score = -20,570424 (regressionFit = 20,570421, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/186,0 pos, 0,0/0,0 neg]
%     Score = -20,568704 (regressionFit = 20,568701, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 40,0/186,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/186,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 186,0/186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,111.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11845856993742862 to score=0.0025 #egs=65.0
Comparing variance: 0.10633777154361058 to score=0.0025 #egs=121.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 121,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,106338)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/186,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,106338) into position #1 in the search queue (new size=2).

% Time for loop #3: 53 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/186,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/121,0 pos, 0,0/0,0 neg]'
%     Score = -177,217104 (regressionFit = 177,217102, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 7 10 40 51 62 68
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -12,849376 (regressionFit = 12,849373, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,849376): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 121,0/121,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,106.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12089425193391157 to score=0.0025 #egs=41.0
Comparing variance: 0.09865885498539359 to score=0.0025 #egs=80.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 80,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,098659)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,098659) into the LAST position (#2) in the search queue.

% Time for loop #4: 23 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 41,0/121,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 380 533 554 608 727 778 946 978 1098 1121

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -156,646202 (regressionFit = 156,646200, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -156,646202): hasCat(A, _) :- link(A, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640691 (regressionFit = 156,640689, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -156,640691): hasCat(A, _) :- link(_, A).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632262 (regressionFit = 156,632260, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -156,632262): hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640691 (regressionFit = 156,640689, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640692 (regressionFit = 156,640689, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646284 (regressionFit = 156,646282, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632263 (regressionFit = 156,632260, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632263 (regressionFit = 156,632260, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640693 (regressionFit = 156,640689, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,638288 (regressionFit = 156,638285, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 328,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640693 (regressionFit = 156,640689, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646285 (regressionFit = 156,646282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640692 (regressionFit = 156,640689, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632263 (regressionFit = 156,632260, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640693 (regressionFit = 156,640689, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640693 (regressionFit = 156,640689, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,640693 (regressionFit = 156,640689, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 673,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646285 (regressionFit = 156,646282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646285 (regressionFit = 156,646282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646203 (regressionFit = 156,646200, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646203 (regressionFit = 156,646200, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646204 (regressionFit = 156,646200, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646203 (regressionFit = 156,646200, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632263 (regressionFit = 156,632260, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646204 (regressionFit = 156,646200, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,635175 (regressionFit = 156,635172, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 119,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646204 (regressionFit = 156,646200, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,632263 (regressionFit = 156,632260, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646204 (regressionFit = 156,646200, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646204 (regressionFit = 156,646200, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 397,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646285 (regressionFit = 156,646282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -156,646285 (regressionFit = 156,646282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 208,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08272475549548822 to score=0.0025 #egs=66.0
Comparing variance: 0.09965222557506283 to score=0.0025 #egs=1517.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 66,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,082725)
%         ILP node to extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,082725) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.517,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,099652)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,099652) into position #1 in the search queue (new size=3).

% Time for loop #5: 581 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(_, A), link(A, _).  [covers 66,0/1.583,0 pos, 0,0/0,0 neg]
% This clause covers 66 positive examples, of which 66 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 238 600 674 753 774 1081 1160 1176 1182 1262

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.517,0/1.517,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.517,0/1.517,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -151,169299 (regressionFit = 151,169298, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -151,169299): hasCat(A, _) :- link(A, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161031 (regressionFit = 151,161030, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -151,161031): hasCat(A, _) :- link(_, A).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161032 (regressionFit = 151,161030, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161032 (regressionFit = 151,161030, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169303 (regressionFit = 151,169301, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,149648 (regressionFit = 151,149645, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -151,149648): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,161033 (regressionFit = 151,161030, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169300 (regressionFit = 151,169298, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169300 (regressionFit = 151,169298, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,171670 (regressionFit = 151,171667, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169301 (regressionFit = 151,169298, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 331,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,169304 (regressionFit = 151,169301, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.517,0 pos, 0,0/0,0 neg]
%     Score = -151,126700 (regressionFit = 151,126697, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -151,126700): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1343538879702812 to score=0.0025 #egs=80.0
Comparing variance: 0.09768850798906537 to score=0.0025 #egs=1437.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.437,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097689)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,097689) into position #2 in the search queue (new size=3).

% Time for loop #6: 492 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.517,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 121,0/80,0 pos, 0,0/0,0 neg]'
%     Score = -177,217104 (regressionFit = 177,217102, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 80,0/80,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 6 12 13 16 22 24 32 52 55
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%     Score = -7,814688 (regressionFit = 7,814685, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,814688): hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 80,0/80,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1381035016185611 to score=0.0025 #egs=18.0
Comparing variance: 0.08594873854728943 to score=0.0025 #egs=62.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 62,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,085949)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 80,0/80,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,085949) into position #2 in the search queue (new size=3).

% Time for loop #7: 21 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 18,0/80,0 pos, 0,0/0,0 neg]
% This clause covers 18 positive examples, of which 18 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 383 408 494 847 1035 1084 1419

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.437,0/1.437,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.437,0/1.437,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -140,371459 (regressionFit = 140,371457, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 331,0/1.437,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -140,371459): hasCat(A, _) :- link(A, _).  [covers 331,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376180 (regressionFit = 140,376179, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,371460 (regressionFit = 140,371457, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 331,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,371461 (regressionFit = 140,371457, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 331,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,371461 (regressionFit = 140,371457, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 331,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,378066 (regressionFit = 140,378063, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376181 (regressionFit = 140,376179, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376181 (regressionFit = 140,376179, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,368577 (regressionFit = 140,368574, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -140,368577): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,368577 (regressionFit = 140,368574, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,377533 (regressionFit = 140,377529, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,368578 (regressionFit = 140,368574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,376182 (regressionFit = 140,376179, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,368578 (regressionFit = 140,368574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
%     Score = -140,368578 (regressionFit = 140,368574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08214260062346875 to score=0.0025 #egs=110.0
Comparing variance: 0.09896977269833386 to score=0.0025 #egs=1327.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082143)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082143) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.327,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,098970)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,098970) into position #1 in the search queue (new size=4).

% Time for loop #8: 411 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.437,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon39453, A), link(Anon39571, Anon39453))
Created a leaf under (hasCat(A, B) :- link(Anon39299, A))
Created a leaf under (hasCat(A, B) :- link(Anon37939, A), link(A, Anon37977))
Created a leaf under (hasCat(A, B) :- link(Anon39453, A), link(Anon39571, Anon39453))

%%%%%  WILL-Produced Tree #10 @ 11:34:04 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, C), link(D, A) )
%   then return 0.11820014448281736;  // std dev = 2,361, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   else if ( link(A, E), link(E, F) )
%   | then if ( link(A, F) )
%   | | then return 0.08863078749694472;  // std dev = 2,775, 65,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=56 */
%   | | else if ( link(F, G) )
%   | | | then return 0.06194535992369115;  // std dev = 2,226, 41,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=35 */
%   | | | else if ( link(H, A) )
%   | | | | then return 0.029392002737056222;  // std dev = 1,577, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | | else return 0.10417895450826327;  // std dev = 0,293, 62,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   | else if ( link(I, A), link(A, J) )
%   | | then return 0.10795425116099301;  // std dev = 0,288, 66,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=60 */
%   | | else if ( link(K, A), link(L, K), link(M, L) )
%   | | | then return 0.06979095707107781;  // std dev = 3,278, 80,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=67 */
%   | | | else if ( link(N, A), link(P, N) )
%   | | | | then return 0.10343160382645468;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | else return 0.09360360282827093;  // std dev = 0,315, 1.327,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=1.179 */


% Clauses:

hasCat(A, B, 0.11820014448281736) :- 
     link(A, C), 
     link(D, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.08863078749694472) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #2.

hasCat(A, B, 0.06194535992369115) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.029392002737056222) :- 
     link(A, C), 
     link(C, D), 
     link(E, A), 
     !. // Clause #4.

hasCat(A, B, 0.10417895450826327) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.10795425116099301) :- 
     link(C, A), 
     link(A, D), 
     !. // Clause #6.

hasCat(A, B, 0.06979095707107781) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #7.

hasCat(A, B, 0.10343160382645468) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #8.

hasCat(A, B, 0.09360360282827093) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.11820014448281736) :-  /* #neg=6 #pos=88 */ 
   link(a, uniqueVar91),
   link(uniqueVar92, uniqueVar91),
   link(uniqueVar92, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.08863078749694472) :-  /* #neg=9 #pos=56 */ 
   link(a, uniqueVar93),
   link(uniqueVar93, uniqueVar94),
   link(a, uniqueVar94),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.06194535992369115) :-  /* #neg=6 #pos=35 */ 
   link(a, uniqueVar95),
   link(uniqueVar95, uniqueVar96),
   link(uniqueVar96, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.029392002737056222) :-  /* #neg=3 #pos=15 */ 
   link(a, uniqueVar97),
   link(uniqueVar97, underscore),
   link(underscore, a),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.10417895450826327) :-  /* #neg=6 #pos=56 */ 
   link(a, uniqueVar98),
   link(uniqueVar98, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.10795425116099301) :-  /* #neg=6 #pos=60 */ 
   link(underscore, a),
   link(a, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.06979095707107781) :-  /* #neg=13 #pos=67 */ 
   link(uniqueVar99, a),
   link(uniqueVar100, uniqueVar99),
   link(underscore, uniqueVar100),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.10343160382645468) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar101, a),
   link(underscore, uniqueVar101),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.09360360282827093) :-  /* #neg=148 #pos=1.179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar101, a)
%   link(underscore, uniqueVar100)
%   link(uniqueVar93, uniqueVar94)
%   link(uniqueVar92, uniqueVar91)
%   link(a, uniqueVar94)
%   link(uniqueVar98, underscore)
%   link(uniqueVar97, underscore)
%   link(underscore, a)
%   link(uniqueVar99, a)
%   link(uniqueVar92, a)
%   link(uniqueVar95, uniqueVar96)
%   link(a, underscore)
%   link(uniqueVar96, underscore)
%   link(a, uniqueVar97)
%   link(a, uniqueVar95)
%   link(a, uniqueVar98)
%   link(underscore, uniqueVar101)
%   link(a, uniqueVar93)
%   link(a, uniqueVar91)
%   link(uniqueVar100, uniqueVar99)

% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for hasCat.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
hasCat(A, B, Total) :- // A general accessor. 
   hasCat(A, B, 1000000, Total), !.
hasCat(A, B, Total) :- waitHere("This should not fail", hasCat(A, B, Total)).

hasCat(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_hasCat_tree1(A, B, TreesToUse, Total1),
   getScore_hasCat_tree2(A, B, TreesToUse, Total2),
   getScore_hasCat_tree3(A, B, TreesToUse, Total3),
   getScore_hasCat_tree4(A, B, TreesToUse, Total4),
   getScore_hasCat_tree5(A, B, TreesToUse, Total5),
   getScore_hasCat_tree6(A, B, TreesToUse, Total6),
   getScore_hasCat_tree7(A, B, TreesToUse, Total7),
   getScore_hasCat_tree8(A, B, TreesToUse, Total8),
   getScore_hasCat_tree9(A, B, TreesToUse, Total9),
   getScore_hasCat_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
hasCat(A, B, TreesToUse, Total) :- waitHere("This should not fail", hasCat(A, B, TreesToUse, Total)).

getScore_hasCat_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_hasCat_tree1(A, B, TreesToUse, Total1) :- hasCat_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_hasCat_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_hasCat_tree2(A, B, TreesToUse, Total2) :- hasCat_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_hasCat_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_hasCat_tree3(A, B, TreesToUse, Total3) :- hasCat_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_hasCat_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_hasCat_tree4(A, B, TreesToUse, Total4) :- hasCat_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_hasCat_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_hasCat_tree5(A, B, TreesToUse, Total5) :- hasCat_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_hasCat_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_hasCat_tree6(A, B, TreesToUse, Total6) :- hasCat_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_hasCat_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_hasCat_tree7(A, B, TreesToUse, Total7) :- hasCat_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_hasCat_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_hasCat_tree8(A, B, TreesToUse, Total8) :- hasCat_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_hasCat_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_hasCat_tree9(A, B, TreesToUse, Total9) :- hasCat_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_hasCat_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_hasCat_tree10(A, B, TreesToUse, Total10) :- hasCat_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(hasCat, 164, [
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar74, uniqueVar75),
   link(uniqueVar16, underscore),
   link(uniqueVar28, a),
   link(uniqueVar71, a),
   link(uniqueVar22, a),
   link(uniqueVar83, a),
   link(uniqueVar90, underscore),
   link(underscore, uniqueVar87),
   link(uniqueVar64, a),
   link(uniqueVar54, a),
   link(uniqueVar65, uniqueVar64),
   link(underscore, uniqueVar13),
   link(uniqueVar21, a),
   link(uniqueVar39, a),
   link(uniqueVar81, a),
   link(uniqueVar47, uniqueVar48),
   link(uniqueVar57, a),
   link(a, uniqueVar32),
   link(uniqueVar38, underscore),
   link(uniqueVar10, a),
   link(uniqueVar18, underscore),
   link(uniqueVar31, uniqueVar30),
   link(a, uniqueVar61),
   link(a, uniqueVar51),
   link(uniqueVar70, a),
   link(uniqueVar76, uniqueVar77),
   link(a, uniqueVar66),
   link(uniqueVar77, underscore),
   link(uniqueVar79, uniqueVar80),
   link(a, uniqueVar68),
   link(uniqueVar19, uniqueVar20),
   link(uniqueVar6, uniqueVar5),
   link(uniqueVar41, a),
   link(uniqueVar8, uniqueVar9),
   link(a, uniqueVar17),
   link(underscore, uniqueVar27),
   link(underscore, uniqueVar82),
   link(a, uniqueVar3),
   link(underscore, uniqueVar31),
   link(uniqueVar17, uniqueVar18),
   link(a, uniqueVar76),
   link(uniqueVar15, uniqueVar16),
   link(uniqueVar61, underscore),
   link(uniqueVar87, uniqueVar86),
   link(underscore, uniqueVar41),
   link(underscore, uniqueVar6),
   link(uniqueVar53, a),
   link(a, uniqueVar26),
   link(uniqueVar89, underscore),
   link(uniqueVar30, a),
   link(uniqueVar92, uniqueVar91),
   link(uniqueVar2, underscore),
   link(uniqueVar50, uniqueVar49),
   link(uniqueVar97, underscore),
   link(uniqueVar14, a),
   link(underscore, uniqueVar14),
   link(uniqueVar35, uniqueVar34),
   link(uniqueVar82, uniqueVar81),
   link(underscore, uniqueVar70),
   link(underscore, uniqueVar73),
   link(uniqueVar35, a),
   link(underscore, uniqueVar57),
   link(a, underscore),
   link(a, uniqueVar93),
   link(uniqueVar45, uniqueVar44),
   link(a, uniqueVar91),
   link(uniqueVar88, uniqueVar89),
   link(uniqueVar52, uniqueVar51),
   link(uniqueVar74, a),
   link(uniqueVar101, a),
   link(uniqueVar4, uniqueVar3),
   link(uniqueVar33, uniqueVar32),
   link(a, uniqueVar46),
   link(uniqueVar37, a),
   link(underscore, uniqueVar83),
   link(underscore, uniqueVar7),
   link(underscore, a),
   link(a, uniqueVar59),
   link(underscore, uniqueVar23),
   link(uniqueVar36, a),
   link(uniqueVar60, underscore),
   link(uniqueVar68, underscore),
   link(a, uniqueVar84),
   link(uniqueVar20, uniqueVar19),
   link(uniqueVar51, uniqueVar52),
   link(uniqueVar37, uniqueVar38),
   link(uniqueVar48, underscore),
   link(uniqueVar11, uniqueVar10),
   link(uniqueVar28, uniqueVar29),
   link(underscore, uniqueVar69),
   link(a, uniqueVar70),
   link(uniqueVar80, uniqueVar79),
   link(uniqueVar59, uniqueVar60),
   link(a, uniqueVar56),
   link(a, uniqueVar12),
   link(uniqueVar42, uniqueVar43),
   link(uniqueVar19, a),
   link(uniqueVar47, a),
   link(uniqueVar53, uniqueVar54),
   link(uniqueVar88, a),
   link(a, uniqueVar90),
   link(uniqueVar7, a),
   link(uniqueVar1, a),
   link(uniqueVar62, uniqueVar63),
   link(uniqueVar92, a),
   link(a, uniqueVar24),
   link(underscore, uniqueVar65),
   link(underscore, uniqueVar67),
   link(underscore, uniqueVar33),
   link(uniqueVar46, underscore),
   link(uniqueVar100, uniqueVar99),
   link(uniqueVar84, uniqueVar85),
   link(uniqueVar58, a),
   link(uniqueVar27, uniqueVar26),
   link(uniqueVar23, a),
   link(a, uniqueVar78),
   link(uniqueVar98, underscore),
   link(uniqueVar63, uniqueVar62),
   link(uniqueVar15, a),
   link(a, uniqueVar97),
   link(uniqueVar67, uniqueVar66),
   link(a, uniqueVar79),
   link(uniqueVar78, underscore),
   link(uniqueVar55, uniqueVar56),
   link(underscore, uniqueVar71),
   link(uniqueVar50, a),
   link(underscore, uniqueVar4),
   link(uniqueVar85, underscore),
   link(uniqueVar62, a),
   link(a, uniqueVar86),
   link(uniqueVar93, uniqueVar94),
   link(a, uniqueVar43),
   link(a, uniqueVar94),
   link(uniqueVar29, underscore),
   link(underscore, uniqueVar36),
   link(uniqueVar99, a),
   link(uniqueVar1, uniqueVar2),
   link(uniqueVar22, uniqueVar21),
   link(uniqueVar42, a),
   link(a, uniqueVar95),
   link(a, uniqueVar98),
   link(underscore, uniqueVar101),
   link(uniqueVar75, underscore),
   link(uniqueVar25, a),
   link(uniqueVar5, a),
   link(underscore, uniqueVar45),
   link(uniqueVar9, underscore),
   link(uniqueVar40, a),
   link(underscore, uniqueVar100),
   link(a, uniqueVar8),
   link(uniqueVar69, a),
   link(a, uniqueVar72),
   link(uniqueVar13, uniqueVar12),
   link(a, uniqueVar49),
   link(underscore, uniqueVar58),
   link(uniqueVar25, uniqueVar24),
   link(a, uniqueVar44),
   link(underscore, uniqueVar11),
   link(uniqueVar34, a),
   link(uniqueVar73, uniqueVar72),
   link(uniqueVar95, uniqueVar96),
   link(a, uniqueVar55),
   link(uniqueVar96, underscore)]).
% Time taken to learn model for 'hasCat': 40,259 seconds.
% Saving model in: data/citeseer/train/models/bRDNs/hasCat.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 40,726 seconds.
