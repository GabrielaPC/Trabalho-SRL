
% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=0: args[N]=SRLBoost/data/citeseer/train/train_pos.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=1: args[N]=SRLBoost/data/citeseer/train/train_neg.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=2: args[N]=SRLBoost/data/citeseer/train/train_bk.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=3: args[N]=SRLBoost/data/citeseer/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 1.930 facts.
% Have read 1.656 examples from 'SRLBoost/data/citeseer/train' [SRLBoost/data/citeseer/train/train*].
% Have read 207 examples from 'SRLBoost/data/citeseer/train' [SRLBoost/data/citeseer/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 hasCat(A, B)
%  targetPred:                hasCat/2
%  targetArgTypes:            signature = [const, const], types = [+Id, #cat]
%  targets:                   [hasCat(A, B)]
%  targetPredicates:          [hasCat/2]
%  targetArgSpecs:            [[A[+Id], B[#cat]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '2' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'link', from 'link(2, 1938)',
%  which has types = [signature = [const, const], types = [+Id, -Id], signature = [const, const], types = [-Id, +Id]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.

%   *** WARNING ***  Constant '5' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'hasCat', from 'hasCat(5, 2)',
%  which has types = [signature = [const, const], types = [+Id, #cat]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.
% Time to collect constants: 145 milliseconds

% Read 1.656 pos examples and 207 neg examples.
% Time to init learnOneClause: 157 milliseconds
% Old dirnull
Setting model dir

% Have 1.656 'raw' positive examples and kept 1.656.
% Have 207 'raw' negative examples and kept 207.

% processing backup's for hasCat
%  POS EX = 1.656
%  NEG EX = 207

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
SRLBoost/data/citeseer/train/models/
% Learning 10 trees in this iteration for hasCat

% Learn model for: hasCat
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209876543
Set score:0.0025
% Dataset size: 1.863
Computing probabilities
prob time:17 milliseconds
No hidden examples for : hasCat
Time to build dataset: 28 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209875999
Set score:0.0025

% Have these 10 positive seeds: 41 86 95 1005 1082 1199 1212 1384 1431 1454

% LearnOneClause Parameters:
%   Targets (1):
%    hasCat(+Id, #cat)
%  Modes (2):
%    link(+Id, -Id),
%    link(-Id, +Id)

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for link/2 with 1.128 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for link/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for link/2.
%     Score = -183,998598 (regressionFit = 183,998596, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,998598): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999758 (regressionFit = 183,999757, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,783141 (regressionFit = 183,783139, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,783141): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,778697 (regressionFit = 183,778695, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,778697): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,778697 (regressionFit = 183,778695, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,783142 (regressionFit = 183,783139, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999608 (regressionFit = 183,999605, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999759 (regressionFit = 183,999757, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999759 (regressionFit = 183,999757, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984917 (regressionFit = 183,984915, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984918 (regressionFit = 183,984915, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984918 (regressionFit = 183,984915, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,989416 (regressionFit = 183,989413, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,778697 (regressionFit = 183,778695, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,783142 (regressionFit = 183,783139, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994886 (regressionFit = 183,994883, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984918 (regressionFit = 183,984915, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,783142 (regressionFit = 183,783139, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999760 (regressionFit = 183,999757, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984918 (regressionFit = 183,984915, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,984918 (regressionFit = 183,984915, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.059755545495699926 to score=0.0025 #egs=94.0
Comparing variance: 0.10071321269743147 to score=0.0025 #egs=1769.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100713)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100713) into the LAST position (#1) in the search queue.

% Time for loop #1: 2,865 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 158 518 618 753 826 913 938 942 964 1028

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -178,125553 (regressionFit = 178,125551, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -178,125553): hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,140720 (regressionFit = 178,140719, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125554 (regressionFit = 178,125551, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125554 (regressionFit = 178,125551, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125555 (regressionFit = 178,125551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125554 (regressionFit = 178,125551, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125555 (regressionFit = 178,125551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,105434 (regressionFit = 178,105431, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -178,105434): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125555 (regressionFit = 178,125551, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125555 (regressionFit = 178,125551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -178,125555 (regressionFit = 178,125551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11123632958207523 to score=0.0025 #egs=251.0
Comparing variance: 0.09893617390611704 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098936)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098936) into the LAST position (#1) in the search queue.

% Time for loop #2: 724 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
% This clause covers 251 positive examples, of which 251 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 11 111 120 194 496 651 868 936 1081 1083

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -150,071888 (regressionFit = 150,071887, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -150,071888): hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071889 (regressionFit = 150,071887, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071889 (regressionFit = 150,071887, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,164587 (regressionFit = 150,164585, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071890 (regressionFit = 150,071887, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,077439 (regressionFit = 150,077436, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071890 (regressionFit = 150,071887, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,164588 (regressionFit = 150,164585, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071890 (regressionFit = 150,071887, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071890 (regressionFit = 150,071887, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071890 (regressionFit = 150,071887, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,071891 (regressionFit = 150,071887, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,164588 (regressionFit = 150,164585, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,164588 (regressionFit = 150,164585, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10704873673154937 to score=0.0025 #egs=607.0
Comparing variance: 0.09340648085783532 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 607,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,107049)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,107049) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,093406)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,093406) into the LAST position (#2) in the search queue.

% Time for loop #3: 486 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 607 positive examples, of which 607 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]'
%     Score = -150,071888 (regressionFit = 150,071887, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 30 70 94 100 357 386 536 542 602
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978382 (regressionFit = 64,978379, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,978382): hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,768786 (regressionFit = 64,768783, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,768786): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978382 (regressionFit = 64,978379, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,826782 (regressionFit = 64,826779, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,768786 (regressionFit = 64,768783, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,950108 (regressionFit = 64,950105, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,768786 (regressionFit = 64,768783, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,768786 (regressionFit = 64,768783, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,978383 (regressionFit = 64,978379, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14179362880886343 to score=0.0025 #egs=76.0
Comparing variance: 0.10168072889513183 to score=0.0025 #egs=531.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101681)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101681) into position #1 in the search queue (new size=2).

% Time for loop #4: 384 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/531,0 pos, 0,0/0,0 neg]'
%     Score = -150,071888 (regressionFit = 150,071887, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 28 122 166 178 213 254 307 324 354 414
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885399 (regressionFit = 53,885397, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,885399): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,991354 (regressionFit = 53,991351, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,885400 (regressionFit = 53,885397, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08002462296091357 to score=0.0025 #egs=114.0
Comparing variance: 0.10734434035505466 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,080025)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,080025) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=3).

% Time for loop #5: 413 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 531,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -150,071888 (regressionFit = 150,071887, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 122 150 156 172 176 224 278 305 330
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288338292 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398584615 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #6: 221 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -150,071888 (regressionFit = 150,071887, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 15 17 29 65 149 182 187 204 236
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -150,0719):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon923, Anon2133), link(Anon2133, Anon2169))

% Have these 10 positive seeds: 25 87 289 385 389 464 603 644 688 696

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -85,039205 (regressionFit = 85,039203, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,039205): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039206 (regressionFit = 85,039203, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039206 (regressionFit = 85,039203, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039207 (regressionFit = 85,039203, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039206 (regressionFit = 85,039203, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039207 (regressionFit = 85,039203, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039207 (regressionFit = 85,039203, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039207 (regressionFit = 85,039203, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,039207 (regressionFit = 85,039203, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10135723617361382 to score=0.0025 #egs=332.0
Comparing variance: 0.08875406051169928 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101357)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101357) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #8: 115 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -85,039205 (regressionFit = 85,039203, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 113 137 141 154 217 277 294
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -85,0392):
%  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(A, Anon2447))

% Have these 10 positive seeds: 16 46 206 263 266 297 348 386 394 402

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]  score = -Infinity

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (hasCat(A, B) :- link(A, Anon2447))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]'
%     Score = -53,885399 (regressionFit = 53,885397, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 22 31 34 47 53 56 83 102 103
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,087164 (regressionFit = 9,087161, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,087164): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,080.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10122448979591983 to score=0.0025 #egs=35.0
Comparing variance: 0.07018106072744623 to score=0.0025 #egs=79.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 79,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,070181)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,070181) into the LAST position (#1) in the search queue.

% Time for loop #11: 25 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #11, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon2879, Anon1745))

%%%%%  WILL-Produced Tree #1 @ 20:40:49 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A), link(D, C) )
%   then return 0.7943191478654691;  // std dev = 2,370, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   else if ( link(A, E), link(F, E), link(G, F) )
%   | then return 0.7306588952588713;  // std dev = 5,284, 251,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=219 */
%   | else if ( link(H, A) )
%   | | then if ( link(I, H), link(I, A) )
%   | | | then return 0.6870963035205655;  // std dev = 3,283, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | | | else if ( link(J, H) )
%   | | | | then if ( link(K, J) )
%   | | | | | then return 0.7438632208137973;  // std dev = 1,882, 35,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | | | | else return 0.7821995680109053;  // std dev = 0,265, 79,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | | | | else if ( link(H, L), link(L, M) )
%   | | | | | then return 0.7369368138873891;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.7353419175556489;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | else if ( link(A, N) )
%   | | | then return 0.7436911037742071;  // std dev = 0,318, 332,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=294 */
%   | | | else return 0.7597033392445856;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.7943191478654691) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.7306588952588713) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.6870963035205655) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.7438632208137973) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #4.

hasCat(A, B, 0.7821995680109053) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #5.

hasCat(A, B, 0.7369368138873891) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.7353419175556489) :- 
     link(C, A), 
     !. // Clause #7.

hasCat(A, B, 0.7436911037742071) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.7597033392445856) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.7943191478654691) :-  /* #neg=6 #pos=88 */ 
   link(a, uniqueVar1),
   link(uniqueVar2, a),
   link(uniqueVar2, uniqueVar1),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.7306588952588713) :-  /* #neg=32 #pos=219 */ 
   link(a, uniqueVar3),
   link(uniqueVar4, uniqueVar3),
   link(underscore, uniqueVar4),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.6870963035205655) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar5, a),
   link(uniqueVar6, uniqueVar5),
   link(uniqueVar6, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.7438632208137973) :-  /* #neg=4 #pos=31 */ 
   link(uniqueVar7, a),
   link(uniqueVar8, uniqueVar7),
   link(underscore, uniqueVar8),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.7821995680109053) :-  /* #neg=6 #pos=73 */ 
   link(uniqueVar9, a),
   link(underscore, uniqueVar9),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.7369368138873891) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar10, a),
   link(uniqueVar10, uniqueVar11),
   link(uniqueVar11, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.7353419175556489) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.7436911037742071) :-  /* #neg=38 #pos=294 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.7597033392445856) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(a, uniqueVar3)
%   link(a, underscore)
%   link(uniqueVar6, uniqueVar5)
%   link(underscore, uniqueVar8)
%   link(uniqueVar6, a)
%   link(underscore, uniqueVar9)
%   link(underscore, a)
%   link(a, uniqueVar1)
%   link(uniqueVar10, a)
%   link(uniqueVar9, a)
%   link(uniqueVar2, a)
%   link(uniqueVar4, uniqueVar3)
%   link(uniqueVar7, a)
%   link(underscore, uniqueVar4)
%   link(uniqueVar10, uniqueVar11)
%   link(uniqueVar8, uniqueVar7)
%   link(uniqueVar11, underscore)
%   link(uniqueVar5, a)
%   link(uniqueVar2, uniqueVar1)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 1 trees is 5,644 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08002462296091362
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:143 milliseconds
No hidden examples for : hasCat
Time to build dataset: 168 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09861713075029271
Set score:0.0025

% Have these 10 positive seeds: 277 501 1002 1024 1142 1197 1370 1422 1454 1477

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,722800): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,723384 (regressionFit = 183,723383, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,722801 (regressionFit = 183,722799, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,722802 (regressionFit = 183,722799, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,722802 (regressionFit = 183,722799, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,723385 (regressionFit = 183,723383, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,723386 (regressionFit = 183,723383, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09951310581236548 to score=0.0025 #egs=677.0
Comparing variance: 0.09810491258578136 to score=0.0025 #egs=1186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 677,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099513)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,099513) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.186,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,098105)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,098105) into the LAST position (#2) in the search queue.

% Time for loop #1: 531 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 677 positive examples, of which 677 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]'
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 83 132 159 241 260 295 404 534 580 593
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080077 (regressionFit = 67,080075, penalties=2.0300000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -67,080077): hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367143 (regressionFit = 67,367140, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124899 (regressionFit = 67,124896, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(A, _).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(B, _).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(_, B).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(A, B).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,338475 (regressionFit = 67,338472, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(B, C).  [covers 3,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,271992 (regressionFit = 67,271989, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,203840 (regressionFit = 67,203837, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,209523 (regressionFit = 67,209520, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,370096 (regressionFit = 67,370093, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,338475 (regressionFit = 67,338472, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, A).  [covers 3,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,225461 (regressionFit = 67,225458, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,368781 (regressionFit = 67,368778, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,370096 (regressionFit = 67,370093, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,370096 (regressionFit = 67,370093, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,370096 (regressionFit = 67,370093, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,080078 (regressionFit = 67,080075, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,225461 (regressionFit = 67,225458, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,367144 (regressionFit = 67,367140, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,203840 (regressionFit = 67,203837, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,124900 (regressionFit = 67,124896, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -67,368363 (regressionFit = 67,368360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/677,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
Comparing variance: 3.6757270441093816E-5 to score=0.0025 #egs=24.0
Comparing variance: 0.10272464488673123 to score=0.0025 #egs=653.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 653,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,102725)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,102725) into position #1 in the search queue (new size=2).

% Time for loop #2: 438 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/677,0 pos, 0,0/0,0 neg]
% This clause covers 24 positive examples, of which 24 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 677,0/653,0 pos, 0,0/0,0 neg]'
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 49 63 129 187 339 407 490 520 556
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034589 (regressionFit = 67,034587, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -67,034589): hasCat(A, _) :- link(A, B), link(B, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955500 (regressionFit = 66,955498, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,955500): hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955501 (regressionFit = 66,955498, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,986657 (regressionFit = 66,986654, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 80,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955501 (regressionFit = 66,955498, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955501 (regressionFit = 66,955498, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,068286 (regressionFit = 67,068283, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034590 (regressionFit = 67,034587, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034590 (regressionFit = 67,034587, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,068286 (regressionFit = 67,068283, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 78,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034590 (regressionFit = 67,034587, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,068286 (regressionFit = 67,068283, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 78,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034590 (regressionFit = 67,034587, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955501 (regressionFit = 66,955498, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,068286 (regressionFit = 67,068283, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 78,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,034590 (regressionFit = 67,034587, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 201,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,986657 (regressionFit = 66,986654, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 80,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -66,955501 (regressionFit = 66,955498, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%     Score = -67,075891 (regressionFit = 67,075888, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 321,0/653,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,103.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08250426588685368 to score=0.0025 #egs=176.0
Comparing variance: 0.10992609390646099 to score=0.0025 #egs=477.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 176,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,082504)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,082504) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,109926)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 653,0/653,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,109926) into position #1 in the search queue (new size=3).

% Time for loop #3: 368 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 176,0/653,0 pos, 0,0/0,0 neg]
% This clause covers 176 positive examples, of which 176 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 653,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 7 23 72 99 100 101 102 166 180 389
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412040 (regressionFit = 52,412038, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,412040): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,408831 (regressionFit = 52,408828, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,408831): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,361226 (regressionFit = 52,361223, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,361226): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,408831 (regressionFit = 52,408828, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,408831 (regressionFit = 52,408828, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,408831 (regressionFit = 52,408828, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,412041 (regressionFit = 52,412038, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,312674 (regressionFit = 52,312671, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,312674): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,110.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12870392390011479 to score=0.0025 #egs=145.0
Comparing variance: 0.10135723617360758 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101357)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101357) into position #1 in the search queue (new size=3).

% Time for loop #4: 237 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 11 42 80 132 164 186 283 317
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619773 (regressionFit = 33,619771, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,619773): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,619774 (regressionFit = 33,619771, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08401920438957537 to score=0.0025 #egs=54.0
Comparing variance: 0.1046141504062925 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,084019)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,084019) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #5: 129 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -183,722800 (regressionFit = 183,722799, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 38 107 121 188 223 232 271
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -183,7228):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon3241, Anon5437))

% Have these 8 positive seeds: 222 379 624 876 1023 1061 1103 1143

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -116,245554 (regressionFit = 116,245553, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -116,245554): hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245555 (regressionFit = 116,245553, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245555 (regressionFit = 116,245553, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335556 (regressionFit = 116,335554, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,268445 (regressionFit = 116,268442, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,245556 (regressionFit = 116,245553, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,335557 (regressionFit = 116,335554, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10684835515530688 to score=0.0025 #egs=607.0
Comparing variance: 0.08875406051169084 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 607,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,106848)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,106848) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #7: 386 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
% This clause covers 607 positive examples, of which 607 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]'
%     Score = -116,245554 (regressionFit = 116,245553, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 162 176 183 220 233 249 298 397 554
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856842 (regressionFit = 64,856840, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,856842): hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,718968 (regressionFit = 64,718965, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,718968): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,737602 (regressionFit = 64,737598, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,718968 (regressionFit = 64,718965, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,718968): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,837287 (regressionFit = 64,837284, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,718968 (regressionFit = 64,718965, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,718968 (regressionFit = 64,718965, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,856843 (regressionFit = 64,856840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14179362880886667 to score=0.0025 #egs=76.0
Comparing variance: 0.10158690919242386 to score=0.0025 #egs=531.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,101587)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,101587) into position #1 in the search queue (new size=4).

% Time for loop #8: 236 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/531,0 pos, 0,0/0,0 neg]'
%     Score = -116,245554 (regressionFit = 116,245553, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 98 124 154 203 328 336 402 434
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,942107 (regressionFit = 53,942104, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,942107): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10006730347428469 to score=0.0025 #egs=186.0
Comparing variance: 0.10240459624478 to score=0.0025 #egs=345.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 345,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,102405)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,102405) into position #1 in the search queue (new size=4).

% Time for loop #9: 90 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
% This clause covers 186 positive examples, of which 186 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon5831, Anon6719), link(Anon6719, Anon6755))
Created a leaf under (hasCat(A, B) :- link(Anon5831, A))
Created a leaf under (hasCat(A, B) :- link(Anon3241, Anon5437))
Created a leaf under (hasCat(A, B) :- link(Anon4323, A))

%%%%%  WILL-Produced Tree #2 @ 20:40:52 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C) )
%   then if ( link(C, A) )
%   | then return 0.7372980169519187;  // std dev = 0,030, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( link(D, A) )
%   | | then return 0.6479727023467107;  // std dev = 0,287, 176,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=160 */
%   | | else if ( link(E, C), link(F, E) )
%   | | | then return 0.5927474540443447;  // std dev = 4,320, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | else if ( link(C, G) )
%   | | | | then return 0.6493919463471829;  // std dev = 0,290, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | else return 0.6232795029685575;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   else if ( link(H, A) )
%   | then if ( link(H, I), link(I, A) )
%   | | then return 0.58161742223357;  // std dev = 3,283, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | | else if ( link(H, J), link(J, K) )
%   | | | then return 0.6285541641466588;  // std dev = 4,314, 186,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=165 */
%   | | | else return 0.626431251007158;  // std dev = 0,320, 345,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=305 */
%   | else return 0.6404616470661376;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.7372980169519187) :- 
     link(A, C), 
     link(C, A), 
     !. // Clause #1.

hasCat(A, B, 0.6479727023467107) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.5927474540443447) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.6493919463471829) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.6232795029685575) :- 
     link(A, C), 
     !. // Clause #5.

hasCat(A, B, 0.58161742223357) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #6.

hasCat(A, B, 0.6285541641466588) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.626431251007158) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.6404616470661376) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.7372980169519187) :-  /* #pos=24 */ 
   link(a, uniqueVar12),
   link(uniqueVar12, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.6479727023467107) :-  /* #neg=16 #pos=160 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.5927474540443447) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar13),
   link(uniqueVar14, uniqueVar13),
   link(underscore, uniqueVar14),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.6493919463471829) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar15),
   link(uniqueVar15, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.6232795029685575) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.58161742223357) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar16, a),
   link(uniqueVar16, uniqueVar17),
   link(uniqueVar17, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.6285541641466588) :-  /* #neg=21 #pos=165 */ 
   link(uniqueVar18, a),
   link(uniqueVar18, uniqueVar19),
   link(uniqueVar19, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.626431251007158) :-  /* #neg=40 #pos=305 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.6404616470661376) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar18, uniqueVar19)
%   link(a, uniqueVar12)
%   link(uniqueVar18, a)
%   link(a, underscore)
%   link(uniqueVar15, underscore)
%   link(a, uniqueVar13)
%   link(uniqueVar16, uniqueVar17)
%   link(uniqueVar14, uniqueVar13)
%   link(underscore, a)
%   link(uniqueVar19, underscore)
%   link(underscore, uniqueVar14)
%   link(uniqueVar17, a)
%   link(uniqueVar16, a)
%   link(uniqueVar12, a)
%   link(a, uniqueVar15)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 2 trees is 8,315 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1015869091924238
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:67 milliseconds
No hidden examples for : hasCat
Time to build dataset: 72 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09840749822088313
Set score:0.0025

% Have these 8 positive seeds: 60 235 347 768 990 1173 1299 1554

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,332706 (regressionFit = 183,332705, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,332706): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332675 (regressionFit = 183,332674, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,332675): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,234272 (regressionFit = 183,234270, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,234272): hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332676 (regressionFit = 183,332674, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332676 (regressionFit = 183,332674, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317061 (regressionFit = 183,317059, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307802 (regressionFit = 183,307799, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,327586 (regressionFit = 183,327583, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,234273 (regressionFit = 183,234270, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307802 (regressionFit = 183,307799, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,327746 (regressionFit = 183,327742, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,234273 (regressionFit = 183,234270, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307802 (regressionFit = 183,307799, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307802 (regressionFit = 183,307799, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332677 (regressionFit = 183,332674, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,317062 (regressionFit = 183,317059, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332707 (regressionFit = 183,332705, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332708 (regressionFit = 183,332705, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,234273 (regressionFit = 183,234270, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,332708 (regressionFit = 183,332705, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,333064 (regressionFit = 183,333061, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07306802476603938 to score=0.0025 #egs=200.0
Comparing variance: 0.10139546920530333 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073068)
%         ILP node to extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073068) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101395)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101395) into position #1 in the search queue (new size=2).

% Time for loop #1: 320 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 446 510 687 869 929 1239 1257 1290 1352 1413

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,585801 (regressionFit = 168,585800, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,585801): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608200 (regressionFit = 168,608199, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585802 (regressionFit = 168,585800, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,576301 (regressionFit = 168,576299, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,576301): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585802 (regressionFit = 168,585800, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,576302 (regressionFit = 168,576299, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,576302 (regressionFit = 168,576299, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,576302 (regressionFit = 168,576299, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,576302 (regressionFit = 168,576299, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,585803 (regressionFit = 168,585800, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608201 (regressionFit = 168,608199, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608201 (regressionFit = 168,608199, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620666 (regressionFit = 168,620663, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,540447 (regressionFit = 168,540444, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,540447): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,578485 (regressionFit = 168,578482, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,599396 (regressionFit = 168,599393, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,540447 (regressionFit = 168,540444, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,540447 (regressionFit = 168,540444, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,608202 (regressionFit = 168,608199, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,578485 (regressionFit = 168,578482, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 13,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,540447 (regressionFit = 168,540444, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,540447): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,620667 (regressionFit = 168,620663, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,524708 (regressionFit = 168,524705, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,524708): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13521501279404174 to score=0.0025 #egs=80.0
Comparing variance: 0.09962571315622153 to score=0.0025 #egs=1583.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.583,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099626)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099626) into position #1 in the search queue (new size=2).

% Time for loop #2: 228 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 320 561 594 702 734 913 1062 1075 1076 1191

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.583,0/1.583,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,653090 (regressionFit = 157,653089, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,653090): hasCat(A, _) :- link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707075 (regressionFit = 157,707074, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653091 (regressionFit = 157,653089, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653309 (regressionFit = 157,653306, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653091 (regressionFit = 157,653089, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,676944 (regressionFit = 157,676941, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653310 (regressionFit = 157,653306, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,676944 (regressionFit = 157,676941, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653310 (regressionFit = 157,653306, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,676944 (regressionFit = 157,676941, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653310 (regressionFit = 157,653306, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653092 (regressionFit = 157,653089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,676944 (regressionFit = 157,676941, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653310 (regressionFit = 157,653306, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,607150 (regressionFit = 157,607147, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,607150): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653310 (regressionFit = 157,653306, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,653309 (regressionFit = 157,653306, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707076 (regressionFit = 157,707074, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707076 (regressionFit = 157,707074, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707365 (regressionFit = 157,707362, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]
%     Score = -157,707077 (regressionFit = 157,707074, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1349151876789976 to score=0.0025 #egs=56.0
Comparing variance: 0.09826581301378935 to score=0.0025 #egs=1527.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.527,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,098266)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,098266) into position #1 in the search queue (new size=2).

% Time for loop #3: 278 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.583,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 5 positive seeds: 51 118 904 1118 1226

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.527,0/1.527,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.527,0/1.527,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -150,047778 (regressionFit = 150,047777, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -150,047778): hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
%     Score = -150,047779 (regressionFit = 150,047777, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
%     Score = -150,047780 (regressionFit = 150,047777, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
%     Score = -150,051776 (regressionFit = 150,051773, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.527,0 pos, 0,0/0,0 neg]
%     Score = -150,047780 (regressionFit = 150,047777, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10223130364193028 to score=0.0025 #egs=527.0
Comparing variance: 0.09617188015558088 to score=0.0025 #egs=1000.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,102231)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,102231) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.000,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,096172)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,096172) into position #2 in the search queue (new size=3).

% Time for loop #4: 171 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.527,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -150,047778 (regressionFit = 150,047777, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 32 37 129 180 214 283 421 505
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799481 (regressionFit = 53,799479, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,799481): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,873044 (regressionFit = 53,873041, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,873044 (regressionFit = 53,873041, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,875154 (regressionFit = 53,875151, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,873044 (regressionFit = 53,873041, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,873044 (regressionFit = 53,873041, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 31,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,799482 (regressionFit = 53,799479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0821552148615967 to score=0.0025 #egs=110.0
Comparing variance: 0.10734389858457347 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082155)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082155) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #5: 251 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -150,047778 (regressionFit = 150,047777, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 64 152 177 240 276 374 379
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -150,0478):
%  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon9503, Anon9355))

% Have these 8 positive seeds: 1 132 384 468 501 586 655 819

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.000,0/1.000,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.000,0/1.000,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,133114 (regressionFit = 96,133113, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,133114): hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133115 (regressionFit = 96,133113, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133115 (regressionFit = 96,133113, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%     Score = -96,133116 (regressionFit = 96,133113, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,096.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10628150154726122 to score=0.0025 #egs=421.0
Comparing variance: 0.08875406051169672 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 421,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,106282)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,106282) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #7: 153 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 421,0/1.000,0 pos, 0,0/0,0 neg]
% This clause covers 421 positive examples, of which 421 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]'
%     Score = -96,133114 (regressionFit = 96,133113, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 37 53 165 184 296 303 310 319 326
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744462 (regressionFit = 44,744460, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,744462): hasCat(A, _) :- link(A, B), link(B, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,671850 (regressionFit = 44,671847, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,671850): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,671850 (regressionFit = 44,671847, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,671850 (regressionFit = 44,671847, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,671850 (regressionFit = 44,671847, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,744463 (regressionFit = 44,744460, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 90,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%     Score = -44,693193 (regressionFit = 44,693190, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 108,0/421,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,106.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1466836734693877 to score=0.0025 #egs=28.0
Comparing variance: 0.10321807752589 to score=0.0025 #egs=393.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 393,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,103218)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 421,0/421,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,103218) into position #1 in the search queue (new size=4).

% Time for loop #8: 175 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/421,0 pos, 0,0/0,0 neg]
% This clause covers 28 positive examples, of which 28 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 421,0/393,0 pos, 0,0/0,0 neg]'
%     Score = -96,133114 (regressionFit = 96,133113, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 393,0/393,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 7 74 93 141 182 260 262 289
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536130 (regressionFit = 40,536128, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -40,536130): hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536131 (regressionFit = 40,536128, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536131 (regressionFit = 40,536128, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536131 (regressionFit = 40,536128, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536131 (regressionFit = 40,536128, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,536131 (regressionFit = 40,536128, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
%     Score = -40,551063 (regressionFit = 40,551060, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 80,0/393,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,103.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #9: 183 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 62,0/393,0 pos, 0,0/0,0 neg]
% This clause covers 62 positive examples, of which 62 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon10137))
Created a leaf under (hasCat(A, B) :- link(Anon9503, Anon9355))
Created a leaf under (hasCat(A, B) :- link(Anon7143, A), link(A, Anon7181))

%%%%%  WILL-Produced Tree #3 @ 20:40:54 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(A, D) )
%   then return 0.5140048535067528;  // std dev = 0,270, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.4566778468911538;  // std dev = 3,289, 80,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=67 */
%   | else if ( link(A, H), link(H, I), link(I, J) )
%   | | then return 0.45059852817388285;  // std dev = 2,749, 56,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=47 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(L, K) )
%   | | | | then return 0.5148840616075218;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | else return 0.48525363891590495;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | else if ( link(A, M) )
%   | | | | then if ( link(M, N), link(A, N) )
%   | | | | | then return 0.4383717644411219;  // std dev = 2,027, 28,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | | | | else if ( link(M, P) )
%   | | | | | | then return 0.5108009662860754;  // std dev = 2,319, 62,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   | | | | | | else return 0.48740757449123673;  // std dev = 5,929, 331,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=291 */
%   | | | | else return 0.5002024238781309;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.5140048535067528) :- 
     link(C, A), 
     link(A, D), 
     !. // Clause #1.

hasCat(A, B, 0.4566778468911538) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.45059852817388285) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.5148840616075218) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #4.

hasCat(A, B, 0.48525363891590495) :- 
     link(C, A), 
     !. // Clause #5.

hasCat(A, B, 0.4383717644411219) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #6.

hasCat(A, B, 0.5108009662860754) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #7.

hasCat(A, B, 0.48740757449123673) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.5002024238781309) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.5140048535067528) :-  /* #neg=16 #pos=184 */ 
   link(underscore, a),
   link(a, underscore),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.4566778468911538) :-  /* #neg=13 #pos=67 */ 
   link(uniqueVar20, a),
   link(uniqueVar21, uniqueVar20),
   link(underscore, uniqueVar21),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.45059852817388285) :-  /* #neg=9 #pos=47 */ 
   link(a, uniqueVar22),
   link(uniqueVar22, uniqueVar23),
   link(uniqueVar23, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.5148840616075218) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar24, a),
   link(underscore, uniqueVar24),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.48525363891590495) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.4383717644411219) :-  /* #neg=5 #pos=23 */ 
   link(a, uniqueVar25),
   link(uniqueVar25, uniqueVar26),
   link(a, uniqueVar26),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.5108009662860754) :-  /* #neg=6 #pos=56 */ 
   link(a, uniqueVar27),
   link(uniqueVar27, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.48740757449123673) :-  /* #neg=40 #pos=291 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.5002024238781309) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(a, underscore)
%   link(a, uniqueVar22)
%   link(uniqueVar22, uniqueVar23)
%   link(uniqueVar20, a)
%   link(a, uniqueVar25)
%   link(a, uniqueVar27)
%   link(uniqueVar23, underscore)
%   link(underscore, a)
%   link(a, uniqueVar26)
%   link(underscore, uniqueVar24)
%   link(uniqueVar24, a)
%   link(uniqueVar27, underscore)
%   link(uniqueVar21, uniqueVar20)
%   link(uniqueVar25, uniqueVar26)
%   link(underscore, uniqueVar21)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 3 trees is 10,350 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10321807752589127
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:173 milliseconds
No hidden examples for : hasCat
Time to build dataset: 186 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09827639776072239
Set score:0.0025

% Have these 10 positive seeds: 11 365 366 619 778 888 1004 1039 1080 1158

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,088706 (regressionFit = 183,088705, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,088706): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088552 (regressionFit = 183,088551, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,088552): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035766 (regressionFit = 183,035764, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,035766): hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088553 (regressionFit = 183,088551, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088553 (regressionFit = 183,088551, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,038642 (regressionFit = 183,038639, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035767 (regressionFit = 183,035764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035767 (regressionFit = 183,035764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,038642 (regressionFit = 183,038639, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035767 (regressionFit = 183,035764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,086995 (regressionFit = 183,086992, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035767 (regressionFit = 183,035764, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088554 (regressionFit = 183,088551, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088707 (regressionFit = 183,088705, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,038642 (regressionFit = 183,038639, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088708 (regressionFit = 183,088705, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,035767 (regressionFit = 183,035764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088708 (regressionFit = 183,088705, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,088872 (regressionFit = 183,088869, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07305756620186812 to score=0.0025 #egs=200.0
Comparing variance: 0.1012773605881067 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073058)
%         ILP node to extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073058) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101277)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101277) into position #1 in the search queue (new size=2).

% Time for loop #1: 599 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 130 275 316 359 680 774 802 821 893 896

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,405766 (regressionFit = 168,405764, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,405766): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418094 (regressionFit = 168,418093, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405767 (regressionFit = 168,405764, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400347 (regressionFit = 168,400345, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,400347): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405767 (regressionFit = 168,405764, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,419156 (regressionFit = 168,419153, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423770 (regressionFit = 168,423767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 14,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,373421 (regressionFit = 168,373418, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,373421): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,419156 (regressionFit = 168,419153, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405768 (regressionFit = 168,405764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423770 (regressionFit = 168,423767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 14,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405767 (regressionFit = 168,405764, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405768 (regressionFit = 168,405764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,358838 (regressionFit = 168,358835, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,358838): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405768 (regressionFit = 168,405764, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,419156 (regressionFit = 168,419153, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,419156 (regressionFit = 168,419153, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,400348 (regressionFit = 168,400345, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405768 (regressionFit = 168,405764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405768 (regressionFit = 168,405764, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418095 (regressionFit = 168,418093, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418095 (regressionFit = 168,418093, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424230 (regressionFit = 168,424228, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,362559 (regressionFit = 168,362556, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,409977 (regressionFit = 168,409974, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,362559 (regressionFit = 168,362556, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,362559 (regressionFit = 168,362556, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,418096 (regressionFit = 168,418093, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,362559 (regressionFit = 168,362556, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,424231 (regressionFit = 168,424228, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,373501 (regressionFit = 168,373498, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1285638607001749 to score=0.0025 #egs=145.0
Comparing variance: 0.09862784895302125 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098628)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098628) into position #1 in the search queue (new size=2).

% Time for loop #2: 592 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 9 84 406 907 916 920 970 1030 1098 1207

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -149,716908 (regressionFit = 149,716907, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,716908): hasCat(A, _) :- link(A, _).  [covers 332,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696808 (regressionFit = 149,696807, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,696808): hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696809 (regressionFit = 149,696807, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696809 (regressionFit = 149,696807, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716511 (regressionFit = 149,716509, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,693034 (regressionFit = 149,693031, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,693034): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,696810 (regressionFit = 149,696807, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,716512 (regressionFit = 149,716509, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,703940 (regressionFit = 149,703937, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,703941 (regressionFit = 149,703937, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,685916 (regressionFit = 149,685913, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,685916): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,703940 (regressionFit = 149,703937, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966751 to score=0.0025 #egs=19.0
Comparing variance: 0.09817184629972862 to score=0.0025 #egs=1499.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.499,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,098172)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,098172) into position #1 in the search queue (new size=2).

% Time for loop #3: 346 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 104 219 319 443 489 532 706 783 998 1014

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.499,0/1.499,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.499,0/1.499,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -147,158965 (regressionFit = 147,158964, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/1.499,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -147,158965): hasCat(A, _) :- link(A, _).  [covers 313,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134235 (regressionFit = 147,134234, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -147,134235): hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134236 (regressionFit = 147,134234, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134236 (regressionFit = 147,134234, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158619 (regressionFit = 147,158616, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158620 (regressionFit = 147,158616, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,134237 (regressionFit = 147,134234, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158620 (regressionFit = 147,158616, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158620 (regressionFit = 147,158616, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158966 (regressionFit = 147,158964, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158967 (regressionFit = 147,158964, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/1.499,0 pos, 0,0/0,0 neg]
%     Score = -147,158967 (regressionFit = 147,158964, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/1.499,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1065893507832319 to score=0.0025 #egs=607.0
Comparing variance: 0.09241535627282815 to score=0.0025 #egs=892.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 607,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106589)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106589) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 892,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,092415)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,092415) into position #2 in the search queue (new size=3).

% Time for loop #4: 375 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 607,0/1.499,0 pos, 0,0/0,0 neg]
% This clause covers 607 positive examples, of which 607 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]'
%     Score = -147,134235 (regressionFit = 147,134234, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 189 275 332 365 392 499 547
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697471 (regressionFit = 64,697469, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,697471): hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,644152 (regressionFit = 64,644149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,644152): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,644152 (regressionFit = 64,644149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,644152): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,691462 (regressionFit = 64,691459, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,644152 (regressionFit = 64,644149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,644152 (regressionFit = 64,644149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,697472 (regressionFit = 64,697469, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14134617852515918 to score=0.0025 #egs=76.0
Comparing variance: 0.10151005504563676 to score=0.0025 #egs=531.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,101510)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,101510) into position #1 in the search queue (new size=3).

% Time for loop #5: 317 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/531,0 pos, 0,0/0,0 neg]'
%     Score = -147,134235 (regressionFit = 147,134234, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 55 66 130 169 182 369 376 409 414 461
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854732 (regressionFit = 53,854730, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,854732): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,899369 (regressionFit = 53,899366, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,901683 (regressionFit = 53,901680, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,854733 (regressionFit = 53,854730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07975727468137388 to score=0.0025 #egs=114.0
Comparing variance: 0.10734388600062308 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,079757)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,079757) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #6: 228 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 531,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -147,134235 (regressionFit = 147,134234, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 47 74 96 108 203 227 235 362 372
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 136 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 12 156 215 270 380 628 641 801 875

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -82,432316 (regressionFit = 82,432315, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,432316): hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,432317 (regressionFit = 82,432315, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,432318 (regressionFit = 82,432315, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,432318 (regressionFit = 82,432315, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,092.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09918119550012663 to score=0.0025 #egs=313.0
Comparing variance: 0.08875406051168833 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 313,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,099181)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,099181) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #8: 75 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% This clause covers 313 positive examples, of which 313 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon14851))
Created a leaf under (hasCat(A, B) :- link(A, Anon14851))
Created a leaf under (hasCat(A, B) :- link(Anon14297, Anon13425))
Created a leaf under (hasCat(A, B) :- link(Anon11359, A), link(A, Anon11397))

%%%%%  WILL-Produced Tree #4 @ 20:40:57 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(A, D) )
%   then return 0.38674846672134217;  // std dev = 0,270, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(A, E), link(F, E), link(G, F) )
%   | then return 0.3491986346079863;  // std dev = 4,318, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | else if ( link(A, H), link(H, I), link(I, J) )
%   | | then return 0.3311866046686154;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(K, L), link(L, A) )
%   | | | | then return 0.341658815489248;  // std dev = 3,278, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | | | | else if ( link(M, K) )
%   | | | | | then return 0.38858860254954175;  // std dev = 0,282, 114,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=104 */
%   | | | | | else if ( link(K, N), link(N, P) )
%   | | | | | | then return 0.36610444610392334;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | | else return 0.3654384467897873;  // std dev = 5,541, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else if ( link(A, Q) )
%   | | | | then return 0.37320600271756255;  // std dev = 0,315, 313,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=278 */
%   | | | | else return 0.37648359421002653;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.38674846672134217) :- 
     link(C, A), 
     link(A, D), 
     !. // Clause #1.

hasCat(A, B, 0.3491986346079863) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.3311866046686154) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.341658815489248) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #4.

hasCat(A, B, 0.38858860254954175) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #5.

hasCat(A, B, 0.36610444610392334) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.3654384467897873) :- 
     link(C, A), 
     !. // Clause #7.

hasCat(A, B, 0.37320600271756255) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.37648359421002653) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.38674846672134217) :-  /* #neg=16 #pos=184 */ 
   link(underscore, a),
   link(a, underscore),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.3491986346079863) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar28),
   link(uniqueVar29, uniqueVar28),
   link(underscore, uniqueVar29),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.3311866046686154) :-  /* #neg=3 #pos=16 */ 
   link(a, uniqueVar30),
   link(uniqueVar30, uniqueVar31),
   link(uniqueVar31, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.341658815489248) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar32, a),
   link(uniqueVar32, uniqueVar33),
   link(uniqueVar33, a),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.38858860254954175) :-  /* #neg=10 #pos=104 */ 
   link(uniqueVar34, a),
   link(underscore, uniqueVar34),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.36610444610392334) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar35, a),
   link(uniqueVar35, uniqueVar36),
   link(uniqueVar36, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.3654384467897873) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.37320600271756255) :-  /* #neg=35 #pos=278 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.37648359421002653) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar34)
%   link(a, underscore)
%   link(uniqueVar35, uniqueVar36)
%   link(a, uniqueVar30)
%   link(uniqueVar36, underscore)
%   link(underscore, uniqueVar29)
%   link(uniqueVar29, uniqueVar28)
%   link(underscore, a)
%   link(uniqueVar34, a)
%   link(uniqueVar35, a)
%   link(uniqueVar32, a)
%   link(uniqueVar31, underscore)
%   link(uniqueVar33, a)
%   link(uniqueVar30, uniqueVar31)
%   link(uniqueVar32, uniqueVar33)
%   link(a, uniqueVar28)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 4 trees is 13,240 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09241535627282818
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:220 milliseconds
No hidden examples for : hasCat
Time to build dataset: 234 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09822608806258169
Set score:0.0025

% Have these 10 positive seeds: 14 81 146 303 533 933 957 1431 1447 1504

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,995072 (regressionFit = 182,995071, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,995072): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994989 (regressionFit = 182,994988, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,994989): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866699 (regressionFit = 182,866697, penalties=2.0300000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,866699): hasCat(A, _) :- link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959815 (regressionFit = 182,959813, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994990 (regressionFit = 182,994988, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994990 (regressionFit = 182,994988, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986139 (regressionFit = 182,986137, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(A, _).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(B, _).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(_, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(_, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,954587 (regressionFit = 182,954584, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982379 (regressionFit = 182,982376, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959733 (regressionFit = 182,959730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959733 (regressionFit = 182,959730, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,984307 (regressionFit = 182,984304, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994586 (regressionFit = 182,994583, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,954587 (regressionFit = 182,954584, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,984307 (regressionFit = 182,984304, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,772037 (regressionFit = 182,772034, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,772037): hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994035 (regressionFit = 182,994032, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,984307 (regressionFit = 182,984304, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,984307 (regressionFit = 182,984304, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994991 (regressionFit = 182,994988, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,986140 (regressionFit = 182,986137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995073 (regressionFit = 182,995071, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994031 (regressionFit = 182,994029, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995073 (regressionFit = 182,995071, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,991711 (regressionFit = 182,991708, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,992548 (regressionFit = 182,992545, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,982379 (regressionFit = 182,982376, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,991711 (regressionFit = 182,991708, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,911691 (regressionFit = 182,911688, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,954587 (regressionFit = 182,954584, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995201 (regressionFit = 182,995198, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,991711 (regressionFit = 182,991708, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,866700 (regressionFit = 182,866697, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,991711 (regressionFit = 182,991708, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,994032 (regressionFit = 182,994029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,959816 (regressionFit = 182,959813, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,995074 (regressionFit = 182,995071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.022251331115907044 to score=0.0025 #egs=41.0
Comparing variance: 0.09981324325629974 to score=0.0025 #egs=1822.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.822,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099813)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099813) into the LAST position (#1) in the search queue.

% Time for loop #1: 851 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 14 307 308 331 418 466 754 1345 1505 1708

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -181,855808 (regressionFit = 181,855807, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,855808): hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855183 (regressionFit = 181,855182, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,855183): hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856696 (regressionFit = 181,856693, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855184 (regressionFit = 181,855182, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855184 (regressionFit = 181,855182, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853450 (regressionFit = 181,853448, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,853450): hasCat(A, _) :- link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,858330 (regressionFit = 181,858327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 60,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,794005 (regressionFit = 181,794002, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,794005): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856697 (regressionFit = 181,856693, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,794005 (regressionFit = 181,794002, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,851194 (regressionFit = 181,851190, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 421,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856697 (regressionFit = 181,856693, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,794005 (regressionFit = 181,794002, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,794005 (regressionFit = 181,794002, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855185 (regressionFit = 181,855182, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,853451 (regressionFit = 181,853448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835462 (regressionFit = 181,835459, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855809 (regressionFit = 181,855807, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,845790 (regressionFit = 181,845787, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835463 (regressionFit = 181,835459, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855810 (regressionFit = 181,855807, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856697 (regressionFit = 181,856693, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,855810 (regressionFit = 181,855807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,849674 (regressionFit = 181,849671, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 317,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856697 (regressionFit = 181,856693, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,845790 (regressionFit = 181,845787, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,856697 (regressionFit = 181,856693, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,858330 (regressionFit = 181,858327, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 60,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13467829993126934 to score=0.0025 #egs=86.0
Comparing variance: 0.09804819575477253 to score=0.0025 #egs=1736.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.736,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098048)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098048) into the LAST position (#1) in the search queue.

% Time for loop #2: 640 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
% This clause covers 86 positive examples, of which 86 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 32 308 361 581 809 857 906 954 960 1051

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.736,0/1.736,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.736,0/1.736,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -170,201536 (regressionFit = 170,201534, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,201536): hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,211669 (regressionFit = 170,211668, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201537 (regressionFit = 170,201534, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201537 (regressionFit = 170,201534, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,201538 (regressionFit = 170,201534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,211670 (regressionFit = 170,211668, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,204692 (regressionFit = 170,204690, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,204693 (regressionFit = 170,204690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,204693 (regressionFit = 170,204690, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,211671 (regressionFit = 170,211668, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,211507 (regressionFit = 170,211504, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 335,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,204693 (regressionFit = 170,204690, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 151,0/1.736,0 pos, 0,0/0,0 neg]
%     Score = -170,211671 (regressionFit = 170,211668, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 680,0/1.736,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1032765060587312 to score=0.0025 #egs=629.0
Comparing variance: 0.09506830365159805 to score=0.0025 #egs=1107.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 629,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,103277)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,103277) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.107,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,095068)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,095068) into the LAST position (#2) in the search queue.

% Time for loop #3: 489 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 629,0/1.736,0 pos, 0,0/0,0 neg]
% This clause covers 629 positive examples, of which 629 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]'
%     Score = -170,201536 (regressionFit = 170,201534, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 31 39 235 247 416 469
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,948466 (regressionFit = 64,948464, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,948466): hasCat(A, _) :- link(A, B), link(B, _).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950868 (regressionFit = 64,950866, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,958319 (regressionFit = 64,958316, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 47,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,948467 (regressionFit = 64,948464, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950869 (regressionFit = 64,950866, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,958319 (regressionFit = 64,958316, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 47,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,947266 (regressionFit = 64,947263, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,947266): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950869 (regressionFit = 64,950866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950869 (regressionFit = 64,950866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,960628 (regressionFit = 64,960625, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 40,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,948467 (regressionFit = 64,948464, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,948467 (regressionFit = 64,948464, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950869 (regressionFit = 64,950866, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,948467 (regressionFit = 64,948464, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 193,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,947266 (regressionFit = 64,947263, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,950869 (regressionFit = 64,950866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 152,0/629,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%     Score = -64,955010 (regressionFit = 64,955007, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 297,0/629,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,103.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07100591715976323 to score=0.0025 #egs=65.0
Comparing variance: 0.10697141520229729 to score=0.0025 #egs=564.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 564,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106971)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 629,0/629,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106971) into position #1 in the search queue (new size=2).

% Time for loop #4: 319 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/629,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 629,0/564,0 pos, 0,0/0,0 neg]'
%     Score = -170,201536 (regressionFit = 170,201534, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]

% Have these 3 positive seeds: 115 307 508
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -170,2015):
%  hasCat(A, _) :- link(A, _).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon17943, A), link(Anon17943, Anon17537))

% Have these 8 positive seeds: 338 347 373 425 530 585 1006 1021

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.107,0/1.107,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.107,0/1.107,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,231799 (regressionFit = 105,231798, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,231799): hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
%     Score = -105,231800 (regressionFit = 105,231798, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
%     Score = -105,231801 (regressionFit = 105,231798, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
%     Score = -105,231801 (regressionFit = 105,231798, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,095.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1019757514687811 to score=0.0025 #egs=528.0
Comparing variance: 0.08875406051169134 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 528,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101976)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101976) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into the LAST position (#2) in the search queue.

% Time for loop #6: 159 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 528,0/1.107,0 pos, 0,0/0,0 neg]
% This clause covers 528 positive examples, of which 528 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]'
%     Score = -105,231799 (regressionFit = 105,231798, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 30 45 90 109 120 199 258 293 322 359
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,822705 (regressionFit = 53,822703, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,822705): hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,822706 (regressionFit = 53,822703, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,842953 (regressionFit = 53,842950, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 183,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,822706 (regressionFit = 53,822703, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,822706 (regressionFit = 53,822703, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
%     Score = -53,822706 (regressionFit = 53,822703, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0816244672965182 to score=0.0025 #egs=111.0
Comparing variance: 0.10734385423741848 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 111,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,081624)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,081624) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 528,0/528,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=3).

% Time for loop #7: 230 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/528,0 pos, 0,0/0,0 neg]
% This clause covers 111 positive examples, of which 111 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 528,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -105,231799 (regressionFit = 105,231798, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 47 74 126 201 222 322 346 377 383 384
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337987 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398584209 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #8: 162 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -105,231799 (regressionFit = 105,231798, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 47 48 57 100 173 192 219 225 267
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -105,2318):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon18687, Anon19163), link(Anon19163, Anon19199))

% Have these 10 positive seeds: 23 50 54 182 241 340 379 402 403 449

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 579,0/579,0 pos, 0,0/0,0 neg]  score = -Infinity

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (hasCat(A, B) :- link(Anon18687, A))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/111,0 pos, 0,0/0,0 neg]'
%     Score = -53,822705 (regressionFit = 53,822703, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/111,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 6 35 41 48 53 58 74 80 86 89
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 111,0/111,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 111,0/111,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 111,0/111,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 111,0/111,0 pos, 0,0/0,0 neg]
%     Score = -9,044705 (regressionFit = 9,044702, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,044705): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,082.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10937903582306155 to score=0.0025 #egs=32.0
Comparing variance: 0.07018446850819264 to score=0.0025 #egs=79.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 79,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,070184)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 111,0/111,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,070184) into the LAST position (#1) in the search queue.

% Time for loop #11: 24 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #11, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 32,0/111,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon19519, Anon18815))

%%%%%  WILL-Produced Tree #5 @ 20:41:00 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, C) )
%   then return 0.3533008029740992;  // std dev = 0,955, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( link(E, A), link(F, E), link(F, A) )
%   | then return 0.2517125820448252;  // std dev = 3,403, 86,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=72 */
%   | else if ( link(A, G) )
%   | | then if ( link(H, A), link(H, G) )
%   | | | then return 0.2905564058577281;  // std dev = 2,148, 65,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | | | else return 0.27524740544310156;  // std dev = 0,327, 564,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=495 */
%   | | else if ( link(I, A) )
%   | | | then if ( link(J, I) )
%   | | | | then if ( link(K, J) )
%   | | | | | then return 0.27234118086956083;  // std dev = 1,871, 32,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   | | | | | else return 0.29852458017045036;  // std dev = 0,265, 79,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | | | | else if ( link(I, L), link(L, M) )
%   | | | | | then return 0.27605886576904287;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.27551412945489484;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else return 0.2845503940323708;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.3533008029740992) :- 
     link(C, A), 
     link(C, D), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.2517125820448252) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.2905564058577281) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #3.

hasCat(A, B, 0.27524740544310156) :- 
     link(A, C), 
     !. // Clause #4.

hasCat(A, B, 0.27234118086956083) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.29852458017045036) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.27605886576904287) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.27551412945489484) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.2845503940323708) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.3533008029740992) :-  /* #neg=1 #pos=40 */ 
   link(uniqueVar37, a),
   link(uniqueVar37, uniqueVar38),
   link(uniqueVar38, uniqueVar37),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.2517125820448252) :-  /* #neg=14 #pos=72 */ 
   link(uniqueVar39, a),
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar40, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.2905564058577281) :-  /* #neg=5 #pos=60 */ 
   link(a, uniqueVar41),
   link(uniqueVar42, a),
   link(uniqueVar42, uniqueVar41),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.27524740544310156) :-  /* #neg=69 #pos=495 */ 
   link(a, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.27234118086956083) :-  /* #neg=4 #pos=28 */ 
   link(uniqueVar43, a),
   link(uniqueVar44, uniqueVar43),
   link(underscore, uniqueVar44),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.29852458017045036) :-  /* #neg=6 #pos=73 */ 
   link(uniqueVar45, a),
   link(underscore, uniqueVar45),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.27605886576904287) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar46, a),
   link(uniqueVar46, uniqueVar47),
   link(uniqueVar47, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.27551412945489484) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.2845503940323708) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar45)
%   link(a, uniqueVar41)
%   link(a, underscore)
%   link(uniqueVar47, underscore)
%   link(uniqueVar40, a)
%   link(uniqueVar38, uniqueVar37)
%   link(uniqueVar42, uniqueVar41)
%   link(underscore, a)
%   link(uniqueVar44, uniqueVar43)
%   link(uniqueVar39, a)
%   link(uniqueVar43, a)
%   link(uniqueVar37, uniqueVar38)
%   link(uniqueVar45, a)
%   link(uniqueVar46, uniqueVar47)
%   link(uniqueVar42, a)
%   link(uniqueVar46, a)
%   link(uniqueVar37, a)
%   link(uniqueVar40, uniqueVar39)
%   link(underscore, uniqueVar44)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 5 trees is 16,646 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.08162446729651822
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:292 milliseconds
No hidden examples for : hasCat
Time to build dataset: 303 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09817485545890411
Set score:0.0025

% Have these 10 positive seeds: 56 284 298 489 570 574 813 850 888 1415

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,899738 (regressionFit = 182,899736, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,899738): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899542 (regressionFit = 182,899541, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,899542): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809100 (regressionFit = 182,809098, penalties=2.0300000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,809100): hasCat(A, _) :- link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865823 (regressionFit = 182,865821, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899543 (regressionFit = 182,899541, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899543 (regressionFit = 182,899541, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893993 (regressionFit = 182,893991, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(B, _).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(_, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, B), link(_, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,863917 (regressionFit = 182,863914, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,892034 (regressionFit = 182,892031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,870525 (regressionFit = 182,870521, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,870525 (regressionFit = 182,870521, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,754752 (regressionFit = 182,754749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,754752): hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,890630 (regressionFit = 182,890627, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,896519 (regressionFit = 182,896516, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,863917 (regressionFit = 182,863914, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,890630 (regressionFit = 182,890627, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,754752 (regressionFit = 182,754749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,754752): hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,898735 (regressionFit = 182,898732, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,890630 (regressionFit = 182,890627, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,890630 (regressionFit = 182,890627, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899544 (regressionFit = 182,899541, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,893994 (regressionFit = 182,893991, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,897234 (regressionFit = 182,897232, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899739 (regressionFit = 182,899736, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,897235 (regressionFit = 182,897232, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,892034 (regressionFit = 182,892031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,897235 (regressionFit = 182,897232, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,897235 (regressionFit = 182,897232, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,809101 (regressionFit = 182,809098, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,842343 (regressionFit = 182,842340, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,897235 (regressionFit = 182,897232, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,863917 (regressionFit = 182,863914, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899739 (regressionFit = 182,899736, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865824 (regressionFit = 182,865821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899740 (regressionFit = 182,899736, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,899661 (regressionFit = 182,899658, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.022292959878575686 to score=0.0025 #egs=41.0
Comparing variance: 0.09980281956237154 to score=0.0025 #egs=1822.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.822,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099803)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099803) into the LAST position (#1) in the search queue.

% Time for loop #1: 746 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 259 408 474 502 606 981 1090 1304 1642 1758

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -181,838315 (regressionFit = 181,838314, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,838315): hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838092 (regressionFit = 181,838091, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,838092): hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835363 (regressionFit = 181,835361, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,835363): hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838093 (regressionFit = 181,838091, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838093 (regressionFit = 181,838091, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836545 (regressionFit = 181,836542, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,830027 (regressionFit = 181,830024, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,830027): hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,828963 (regressionFit = 181,828960, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,828963): hasCat(A, _) :- link(_, A), link(A, B), link(B, _).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,840454 (regressionFit = 181,840451, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 60,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,840454 (regressionFit = 181,840451, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 60,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,795619 (regressionFit = 181,795616, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,795619): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,734710 (regressionFit = 181,734707, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,734710): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,830027 (regressionFit = 181,830024, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,795619 (regressionFit = 181,795616, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835853 (regressionFit = 181,835850, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 421,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,795619 (regressionFit = 181,795616, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,795619 (regressionFit = 181,795616, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 86,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838094 (regressionFit = 181,838091, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,836546 (regressionFit = 181,836542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 237,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838316 (regressionFit = 181,838314, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816885 (regressionFit = 181,816883, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838316 (regressionFit = 181,838314, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,815264 (regressionFit = 181,815261, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,828963 (regressionFit = 181,828960, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 53,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,830027 (regressionFit = 181,830024, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 77,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,831913 (regressionFit = 181,831910, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 317,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,816886 (regressionFit = 181,816883, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,835364 (regressionFit = 181,835361, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,838317 (regressionFit = 181,838314, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13727207632295146 to score=0.0025 #egs=84.0
Comparing variance: 0.0979308701060163 to score=0.0025 #egs=1738.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.738,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097931)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097931) into the LAST position (#1) in the search queue.

% Time for loop #2: 751 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 84,0/1.822,0 pos, 0,0/0,0 neg]
% This clause covers 84 positive examples, of which 84 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 187 332 535 579 606 673 967 977 1024 1334

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.738,0/1.738,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.738,0/1.738,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -170,195977 (regressionFit = 170,195976, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,195977): hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,202714 (regressionFit = 170,202713, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 682,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,197576 (regressionFit = 170,197573, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 155,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,197577 (regressionFit = 170,197573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 155,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,202715 (regressionFit = 170,202713, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 682,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,197577 (regressionFit = 170,197573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 155,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,202716 (regressionFit = 170,202713, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 682,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,199565 (regressionFit = 170,199562, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 354,0/1.738,0 pos, 0,0/0,0 neg]
%     Score = -170,202716 (regressionFit = 170,202713, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 682,0/1.738,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10281503067649168 to score=0.0025 #egs=632.0
Comparing variance: 0.09513279974208146 to score=0.0025 #egs=1106.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 632,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,102815)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,102815) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.106,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,095133)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,095133) into the LAST position (#2) in the search queue.

% Time for loop #3: 293 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 632,0/1.738,0 pos, 0,0/0,0 neg]
% This clause covers 632 positive examples, of which 632 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]'
%     Score = -170,195977 (regressionFit = 170,195976, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 22 34 105 115 274 360 392 502 605
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942081 (regressionFit = 64,942079, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,942081): hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962870 (regressionFit = 64,962867, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,979015 (regressionFit = 64,979012, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,954818 (regressionFit = 64,954814, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,951219 (regressionFit = 64,951216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 49,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,951219 (regressionFit = 64,951216, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 49,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,950832 (regressionFit = 64,950829, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 70,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,979015 (regressionFit = 64,979012, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 77,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,979015 (regressionFit = 64,979012, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 77,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,979015 (regressionFit = 64,979012, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 77,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,942082 (regressionFit = 64,942079, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,950832 (regressionFit = 64,950829, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 70,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,962871 (regressionFit = 64,962867, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 155,0/632,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%     Score = -64,974050 (regressionFit = 64,974047, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 300,0/632,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,103.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11467926709840569 to score=0.0025 #egs=195.0
Comparing variance: 0.09743620483762919 to score=0.0025 #egs=437.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 195,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,114679)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,114679) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 437,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097436)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 632,0/632,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,097436) into position #2 in the search queue (new size=3).

% Time for loop #4: 313 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/632,0 pos, 0,0/0,0 neg]
% This clause covers 195 positive examples, of which 195 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/195,0 pos, 0,0/0,0 neg]'
%     Score = -64,942081 (regressionFit = 64,942079, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/195,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 1 25 36 103 117 147 155
%     Score = -22,348539 (regressionFit = 22,348536, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,348539): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 195,0/195,0 pos, 0,0/0,0 neg]
%     Score = -22,358190 (regressionFit = 22,358187, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/195,0 pos, 0,0/0,0 neg]
%     Score = -22,353874 (regressionFit = 22,353871, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 49,0/195,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 195,0/195,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 195,0/195,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,115.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11217146820404285 to score=0.0025 #egs=77.0
Comparing variance: 0.11619774063388545 to score=0.0025 #egs=118.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 118,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,116198)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/195,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,116198) into position #1 in the search queue (new size=3).

% Time for loop #5: 48 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 77,0/195,0 pos, 0,0/0,0 neg]
% This clause covers 77 positive examples, of which 77 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 195,0/118,0 pos, 0,0/0,0 neg]'
%     Score = -64,942081 (regressionFit = 64,942079, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 118,0/118,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 24 27 29 38 41 42 50 51 55
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,592632 (regressionFit = 13,592629, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 7,0/118,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,592632): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 7,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,547189 (regressionFit = 13,547186, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,547189): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]
%     Score = -13,673922 (regressionFit = 13,673919, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 26,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 118,0/118,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,116.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]
Comparing variance: 0.16381019701373828 to score=0.0025 #egs=34.0
Comparing variance: 0.09497189520337207 to score=0.0025 #egs=84.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 84,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,094972)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 118,0/118,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,094972) into the LAST position (#3) in the search queue.

% Time for loop #6: 24 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/118,0 pos, 0,0/0,0 neg]
% This clause covers 34 positive examples, of which 34 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 632,0/437,0 pos, 0,0/0,0 neg]'
%     Score = -170,195977 (regressionFit = 170,195976, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 32 108 109 269 332 432
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531838 (regressionFit = 42,531836, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,531838): hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531839 (regressionFit = 42,531836, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531839 (regressionFit = 42,531836, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531839 (regressionFit = 42,531836, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531839 (regressionFit = 42,531836, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,531839 (regressionFit = 42,531836, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%     Score = -42,550254 (regressionFit = 42,550251, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/437,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06956124527115452 to score=0.0025 #egs=106.0
Comparing variance: 0.10621856184074405 to score=0.0025 #egs=331.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 106,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,069561)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,069561) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 331,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,106219)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 437,0/437,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,106219) into position #1 in the search queue (new size=4).

% Time for loop #7: 118 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/437,0 pos, 0,0/0,0 neg]
% This clause covers 106 positive examples, of which 106 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 437,0/331,0 pos, 0,0/0,0 neg]'
%     Score = -170,195977 (regressionFit = 170,195976, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 24 97 102 209 222 275 330
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -35,158209 (regressionFit = 35,158206, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -35,158209): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,106.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11463154147383424 to score=0.0025 #egs=53.0
Comparing variance: 0.10461415040629464 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #8: 41 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
% This clause covers 53 positive examples, of which 53 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon24039, Anon22323), link(Anon24139, Anon24039))
Created a leaf under (hasCat(A, B) :- link(A, Anon22323))
Created a leaf under (hasCat(A, B) :- link(Anon22555, Anon23449))
Created a leaf under (hasCat(A, B) :- link(Anon23669, A))

%%%%%  WILL-Produced Tree #6 @ 20:41:03 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, C) )
%   then return 0.2748422381286881;  // std dev = 0,956, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.18000640335023332;  // std dev = 3,396, 84,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=70 */
%   | else if ( link(A, H) )
%   | | then if ( link(H, I) )
%   | | | then if ( link(A, I) )
%   | | | | then return 0.21256909593202022;  // std dev = 2,939, 77,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=67 */
%   | | | | else if ( link(I, J) )
%   | | | | | then return 0.13666033208630968;  // std dev = 2,360, 34,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | | | | else return 0.2190132586934166;  // std dev = 0,308, 84,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=75 */
%   | | | else if ( link(K, A) )
%   | | | | then return 0.2371582821208396;  // std dev = 0,264, 106,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=98 */
%   | | | | else if ( link(L, H), link(M, L) )
%   | | | | | then return 0.2142433438918221;  // std dev = 2,465, 53,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=46 */
%   | | | | | else return 0.21247969129926042;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | else return 0.21799249695922396;  // std dev = 0,308, 1.106,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=988 */


% Clauses:

hasCat(A, B, 0.2748422381286881) :- 
     link(C, A), 
     link(C, D), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.18000640335023332) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.21256909593202022) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #3.

hasCat(A, B, 0.13666033208630968) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.2190132586934166) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.2371582821208396) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #6.

hasCat(A, B, 0.2142433438918221) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #7.

hasCat(A, B, 0.21247969129926042) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.21799249695922396) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.2748422381286881) :-  /* #neg=1 #pos=40 */ 
   link(uniqueVar48, a),
   link(uniqueVar48, uniqueVar49),
   link(uniqueVar49, uniqueVar48),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.18000640335023332) :-  /* #neg=14 #pos=70 */ 
   link(uniqueVar50, a),
   link(uniqueVar51, uniqueVar50),
   link(underscore, uniqueVar51),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.21256909593202022) :-  /* #neg=10 #pos=67 */ 
   link(a, uniqueVar52),
   link(uniqueVar52, uniqueVar53),
   link(a, uniqueVar53),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.13666033208630968) :-  /* #neg=7 #pos=27 */ 
   link(a, uniqueVar54),
   link(uniqueVar54, uniqueVar55),
   link(uniqueVar55, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.2190132586934166) :-  /* #neg=9 #pos=75 */ 
   link(a, uniqueVar56),
   link(uniqueVar56, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.2371582821208396) :-  /* #neg=8 #pos=98 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.2142433438918221) :-  /* #neg=7 #pos=46 */ 
   link(a, uniqueVar57),
   link(uniqueVar58, uniqueVar57),
   link(underscore, uniqueVar58),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.21247969129926042) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.21799249695922396) :-  /* #neg=118 #pos=988 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(a, underscore)
%   link(a, uniqueVar56)
%   link(uniqueVar56, underscore)
%   link(uniqueVar58, uniqueVar57)
%   link(uniqueVar55, underscore)
%   link(uniqueVar49, uniqueVar48)
%   link(a, uniqueVar53)
%   link(underscore, a)
%   link(a, uniqueVar52)
%   link(a, uniqueVar57)
%   link(uniqueVar54, uniqueVar55)
%   link(uniqueVar51, uniqueVar50)
%   link(uniqueVar50, a)
%   link(underscore, uniqueVar51)
%   link(uniqueVar52, uniqueVar53)
%   link(a, uniqueVar54)
%   link(uniqueVar48, uniqueVar49)
%   link(underscore, uniqueVar58)
%   link(uniqueVar48, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 6 trees is 19,313 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10621856184074405
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:149 milliseconds
No hidden examples for : hasCat
Time to build dataset: 153 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09810021907689534
Set score:0.0025

% Have these 9 positive seeds: 172 215 412 460 672 1057 1423 1646 1791

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,760709 (regressionFit = 182,760708, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,760709): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760651 (regressionFit = 182,760650, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,760651): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733015 (regressionFit = 182,733013, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,733015): hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760652 (regressionFit = 182,760650, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760652 (regressionFit = 182,760650, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753499 (regressionFit = 182,753497, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726856 (regressionFit = 182,726853, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,726856): hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733856 (regressionFit = 182,733853, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733856 (regressionFit = 182,733853, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726856 (regressionFit = 182,726853, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760510 (regressionFit = 182,760506, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760653 (regressionFit = 182,760650, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,753500 (regressionFit = 182,753497, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760710 (regressionFit = 182,760708, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760710 (regressionFit = 182,760708, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726856 (regressionFit = 182,726853, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,726856): hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760033 (regressionFit = 182,760030, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,733016 (regressionFit = 182,733013, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,760711 (regressionFit = 182,760708, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05874980127890657 to score=0.0025 #egs=94.0
Comparing variance: 0.10017205836263483 to score=0.0025 #egs=1769.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100172)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100172) into the LAST position (#1) in the search queue.

% Time for loop #1: 324 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 315 852 1017 1044 1213 1254 1475 1509 1722

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -177,200958 (regressionFit = 177,200956, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,200958): hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200982 (regressionFit = 177,200981, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200959 (regressionFit = 177,200956, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200960 (regressionFit = 177,200956, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200983 (regressionFit = 177,200981, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,203014 (regressionFit = 177,203011, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200984 (regressionFit = 177,200981, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200131 (regressionFit = 177,200128, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,200131): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,203015 (regressionFit = 177,203011, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,200984 (regressionFit = 177,200981, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,203015 (regressionFit = 177,203011, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,203015 (regressionFit = 177,203011, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,194883 (regressionFit = 177,194880, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,194883): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11579270740418209 to score=0.0025 #egs=101.0
Comparing variance: 0.09922051334887981 to score=0.0025 #egs=1668.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.668,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099221)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099221) into the LAST position (#1) in the search queue.

% Time for loop #2: 157 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 101,0/1.769,0 pos, 0,0/0,0 neg]
% This clause covers 101 positive examples, of which 101 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 73 289 895 1004 1232 1447 1453

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.668,0/1.668,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.668,0/1.668,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -165,485320 (regressionFit = 165,485319, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,485320): hasCat(A, _) :- link(A, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,498891 (regressionFit = 165,498889, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 612,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485321 (regressionFit = 165,485319, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,470536 (regressionFit = 165,470534, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 174,0/1.668,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,470536): hasCat(A, _) :- link(A, B), link(B, _).  [covers 174,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485321 (regressionFit = 165,485319, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,496655 (regressionFit = 165,496652, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 64,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,496655 (regressionFit = 165,496652, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 64,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,470537 (regressionFit = 165,470534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 174,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,457168 (regressionFit = 165,457165, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,457168): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,496655 (regressionFit = 165,496652, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 64,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,470537 (regressionFit = 165,470534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 174,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,496655 (regressionFit = 165,496652, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 64,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,470537 (regressionFit = 165,470534, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 174,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]
%     Score = -165,485322 (regressionFit = 165,485319, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 562,0/1.668,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11588807528714788 to score=0.0025 #egs=230.0
Comparing variance: 0.09652497054721929 to score=0.0025 #egs=1438.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.438,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096525)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,096525) into the LAST position (#1) in the search queue.

% Time for loop #3: 156 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 230,0/1.668,0 pos, 0,0/0,0 neg]
% This clause covers 230 positive examples, of which 230 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 91 131 132 161 166 228 278 304 605 622

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.438,0/1.438,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.438,0/1.438,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -138,802879 (regressionFit = 138,802878, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,802879): hasCat(A, _) :- link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797390 (regressionFit = 138,797389, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,797390): hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797391 (regressionFit = 138,797389, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797391 (regressionFit = 138,797389, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802478 (regressionFit = 138,802475, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,797392 (regressionFit = 138,797389, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802880 (regressionFit = 138,802878, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802880 (regressionFit = 138,802878, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]
%     Score = -138,802881 (regressionFit = 138,802878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/1.438,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10214075497347226 to score=0.0025 #egs=527.0
Comparing variance: 0.09327026459303972 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,102141)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,102141) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,093270)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,093270) into the LAST position (#2) in the search queue.

% Time for loop #4: 155 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.438,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -138,797390 (regressionFit = 138,797389, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 100 189 204 299 305 379 380 395 404
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,827715 (regressionFit = 53,827712, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,827715): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10203402255853862 to score=0.0025 #egs=199.0
Comparing variance: 0.10220409002591516 to score=0.0025 #egs=328.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 328,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,102204)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,102204) into position #1 in the search queue (new size=2).

% Time for loop #5: 85 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 199 positive examples, of which 199 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/328,0 pos, 0,0/0,0 neg]'
%     Score = -138,797390 (regressionFit = 138,797389, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 328,0/328,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 60 65 93 150 192 210 242 244 257
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492454 (regressionFit = 33,492452, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,492454): hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%     Score = -33,492455 (regressionFit = 33,492452, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06489994591671168 to score=0.0025 #egs=43.0
Comparing variance: 0.10772545398584199 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 43,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,064900)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,064900) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #6: 41 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 43,0/328,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 328,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -138,797390 (regressionFit = 138,797389, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 55 95 126 135 166 187 208 230 234 249
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -138,7974):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon26807, Anon26125))

% Have these 10 positive seeds: 7 121 174 211 381 495 522 624 808 846

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -84,967605 (regressionFit = 84,967604, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -84,967605): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10114157597873973 to score=0.0025 #egs=332.0
Comparing variance: 0.08875406051169216 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,101142)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,101142) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #8: 9 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -84,967605 (regressionFit = 84,967604, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 1 15 140 159 161 189 235 287 327
%     Score = -33,542874 (regressionFit = 33,542872, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,542874): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542875 (regressionFit = 33,542872, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,573291 (regressionFit = 33,573288, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542875 (regressionFit = 33,542872, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542875 (regressionFit = 33,542872, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08259514295596382 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629338 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,082595)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,082595) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #9: 26 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon27377, Anon27445))
Created a leaf under (hasCat(A, B) :- link(A, Anon27377))
Created a leaf under (hasCat(A, B) :- link(Anon27377, Anon27445))
Created a leaf under (hasCat(A, B) :- link(Anon26807, Anon26125))

%%%%%  WILL-Produced Tree #7 @ 20:41:04 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, C), link(D, A) )
%   then return 0.1889542185872541;  // std dev = 2,350, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   else if ( link(E, A), link(F, E), link(G, F) )
%   | then return 0.16006519909925795;  // std dev = 3,420, 101,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=87 */
%   | else if ( link(A, H), link(I, H), link(J, I) )
%   | | then return 0.15740450477510787;  // std dev = 5,163, 230,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=199 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(K, L), link(L, M) )
%   | | | | then return 0.17070218266491943;  // std dev = 4,506, 199,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=176 */
%   | | | | else if ( link(N, K) )
%   | | | | | then return 0.1935841828500848;  // std dev = 0,255, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | | | else return 0.16501780422163856;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else if ( link(A, P) )
%   | | | | then if ( link(P, Q) )
%   | | | | | then return 0.19547710374548025;  // std dev = 0,287, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | | else return 0.16720917968482013;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | | else return 0.17456646875990742;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.1889542185872541) :- 
     link(A, C), 
     link(D, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.16006519909925795) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.15740450477510787) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.17070218266491943) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.1935841828500848) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #5.

hasCat(A, B, 0.16501780422163856) :- 
     link(C, A), 
     !. // Clause #6.

hasCat(A, B, 0.19547710374548025) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #7.

hasCat(A, B, 0.16720917968482013) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.17456646875990742) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.1889542185872541) :-  /* #neg=6 #pos=88 */ 
   link(a, uniqueVar59),
   link(uniqueVar60, uniqueVar59),
   link(uniqueVar60, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.16006519909925795) :-  /* #neg=14 #pos=87 */ 
   link(uniqueVar61, a),
   link(uniqueVar62, uniqueVar61),
   link(underscore, uniqueVar62),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.15740450477510787) :-  /* #neg=31 #pos=199 */ 
   link(a, uniqueVar63),
   link(uniqueVar64, uniqueVar63),
   link(underscore, uniqueVar64),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.17070218266491943) :-  /* #neg=23 #pos=176 */ 
   link(uniqueVar65, a),
   link(uniqueVar65, uniqueVar66),
   link(uniqueVar66, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.1935841828500848) :-  /* #neg=3 #pos=40 */ 
   link(uniqueVar67, a),
   link(underscore, uniqueVar67),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.16501780422163856) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.19547710374548025) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar68),
   link(uniqueVar68, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.16720917968482013) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.17456646875990742) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar67)
%   link(uniqueVar67, a)
%   link(a, underscore)
%   link(uniqueVar66, underscore)
%   link(uniqueVar68, underscore)
%   link(uniqueVar65, uniqueVar66)
%   link(a, uniqueVar68)
%   link(underscore, a)
%   link(underscore, uniqueVar64)
%   link(uniqueVar61, a)
%   link(underscore, uniqueVar62)
%   link(uniqueVar65, a)
%   link(uniqueVar64, uniqueVar63)
%   link(a, uniqueVar59)
%   link(uniqueVar60, a)
%   link(uniqueVar62, uniqueVar61)
%   link(uniqueVar60, uniqueVar59)
%   link(a, uniqueVar63)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 7 trees is 20,466 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10114157597873971
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:195 milliseconds
No hidden examples for : hasCat
Time to build dataset: 199 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09810270608681376
Set score:0.0025

% Have these 7 positive seeds: 635 749 775 1089 1374 1512 1846

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,765278 (regressionFit = 182,765277, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,765278): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765341 (regressionFit = 182,765340, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765279 (regressionFit = 182,765277, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681222 (regressionFit = 182,681220, penalties=2.0300000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,681222): hasCat(A, _) :- link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764175 (regressionFit = 182,764173, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730913 (regressionFit = 182,730911, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765279 (regressionFit = 182,765277, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(A, _).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(B, _).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(_, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, A), link(_, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,754955 (regressionFit = 182,754952, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,734615 (regressionFit = 182,734612, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,734777 (regressionFit = 182,734774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,763652 (regressionFit = 182,763649, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,762914 (regressionFit = 182,762910, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,754955 (regressionFit = 182,754952, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,763652 (regressionFit = 182,763649, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,705165 (regressionFit = 182,705162, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,734615 (regressionFit = 182,734612, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765334 (regressionFit = 182,765331, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,763652 (regressionFit = 182,763649, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, A).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,763652 (regressionFit = 182,763649, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764176 (regressionFit = 182,764173, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765280 (regressionFit = 182,765277, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765342 (regressionFit = 182,765340, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765342 (regressionFit = 182,765340, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758513 (regressionFit = 182,758510, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,734777 (regressionFit = 182,734774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,751805 (regressionFit = 182,751802, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764275 (regressionFit = 182,764271, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,734615 (regressionFit = 182,734612, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,751805 (regressionFit = 182,751802, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,646586 (regressionFit = 182,646583, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,646586): hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,764842 (regressionFit = 182,764839, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,681223 (regressionFit = 182,681220, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(A, B).  [covers 24,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,730914 (regressionFit = 182,730911, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,751805 (regressionFit = 182,751802, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,751805 (regressionFit = 182,751802, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,765343 (regressionFit = 182,765340, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,758514 (regressionFit = 182,758510, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.022406115485279092 to score=0.0025 #egs=41.0
Comparing variance: 0.09974090704003626 to score=0.0025 #egs=1822.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.822,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099741)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099741) into the LAST position (#1) in the search queue.

% Time for loop #1: 320 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, B).  [covers 41,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 159 273 399 569 822 952 1009 1076 1131 1243

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.822,0/1.822,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -181,726585 (regressionFit = 181,726584, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,726585): hasCat(A, _) :- link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,724473 (regressionFit = 181,724472, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,724473): hasCat(A, _) :- link(_, A).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721633 (regressionFit = 181,721631, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,721633): hasCat(A, _) :- link(_, A), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,724474 (regressionFit = 181,724472, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721634 (regressionFit = 181,721631, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721634 (regressionFit = 181,721631, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721634 (regressionFit = 181,721631, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,724475 (regressionFit = 181,724472, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 766,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,723031 (regressionFit = 181,723028, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 421,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726586 (regressionFit = 181,726584, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,709903 (regressionFit = 181,709901, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,709903): hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726586 (regressionFit = 181,726584, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,727892 (regressionFit = 181,727889, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,709904 (regressionFit = 181,709901, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,727892 (regressionFit = 181,727889, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,709904 (regressionFit = 181,709901, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721634 (regressionFit = 181,721631, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,720768 (regressionFit = 181,720765, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 317,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,727892 (regressionFit = 181,727889, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,709904 (regressionFit = 181,709901, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,727892 (regressionFit = 181,727889, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 78,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,709904 (regressionFit = 181,709901, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,721634 (regressionFit = 181,721631, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 172,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]
%     Score = -181,726587 (regressionFit = 181,726584, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 649,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11227490262684808 to score=0.0025 #egs=199.0
Comparing variance: 0.09819297326196554 to score=0.0025 #egs=1623.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 199,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,112275)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,112275) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.623,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098193)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098193) into the LAST position (#2) in the search queue.

% Time for loop #2: 296 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/1.822,0 pos, 0,0/0,0 neg]
% This clause covers 199 positive examples, of which 199 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/199,0 pos, 0,0/0,0 neg]'
%     Score = -181,709903 (regressionFit = 181,709901, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/199,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 29 78 87 88 142 148 160 179 197
%     Score = -22,333970 (regressionFit = 22,333967, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,333970): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 199,0/199,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 199,0/199,0 pos, 0,0/0,0 neg]
%     Score = -22,340382 (regressionFit = 22,340379, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/199,0 pos, 0,0/0,0 neg]
%     Score = -22,342343 (regressionFit = 22,342340, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 53,0/199,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 199,0/199,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 199,0/199,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,112.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11094872935728585 to score=0.0025 #egs=78.0
Comparing variance: 0.11305757316070718 to score=0.0025 #egs=121.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 121,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,113058)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/199,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,113058) into position #1 in the search queue (new size=2).

% Time for loop #3: 43 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/199,0 pos, 0,0/0,0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 199,0/121,0 pos, 0,0/0,0 neg]'
%     Score = -181,709903 (regressionFit = 181,709901, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 40 51 57 59 65 66 92 97 105
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -13,548220 (regressionFit = 13,548217, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,548220): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]
%     Score = -13,666356 (regressionFit = 13,666353, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 29,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 121,0/121,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,113.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]
Comparing variance: 0.16351432240056238 to score=0.0025 #egs=34.0
Comparing variance: 0.0918244873183884 to score=0.0025 #egs=87.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 87,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,091824)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 121,0/121,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,091824) into the LAST position (#2) in the search queue.

% Time for loop #4: 20 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 34,0/121,0 pos, 0,0/0,0 neg]
% This clause covers 34 positive examples, of which 34 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 2 276 297 419 541 691 821 916 952 1017

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.623,0/1.623,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.623,0/1.623,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -159,366295 (regressionFit = 159,366294, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 450,0/1.623,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -159,366295): hasCat(A, _) :- link(A, _).  [covers 450,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362084 (regressionFit = 159,362083, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -159,362084): hasCat(A, _) :- link(_, A).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,348000 (regressionFit = 159,347997, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -159,348000): hasCat(A, _) :- link(_, A), link(A, _).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362085 (regressionFit = 159,362083, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362085 (regressionFit = 159,362083, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366560 (regressionFit = 159,366558, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,348001 (regressionFit = 159,347997, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,348001 (regressionFit = 159,347997, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,363175 (regressionFit = 159,363172, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,348001 (regressionFit = 159,347997, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,362086 (regressionFit = 159,362083, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 713,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366296 (regressionFit = 159,366294, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 450,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,348001 (regressionFit = 159,347997, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 119,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366297 (regressionFit = 159,366294, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 450,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,355143 (regressionFit = 159,355140, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 172,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,366561 (regressionFit = 159,366558, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 220,0/1.623,0 pos, 0,0/0,0 neg]
%     Score = -159,252531 (regressionFit = 159,252528, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -159,252531): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14329945246485762 to score=0.0025 #egs=80.0
Comparing variance: 0.09578002076949589 to score=0.0025 #egs=1543.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.543,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,095780)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,095780) into position #1 in the search queue (new size=2).

% Time for loop #5: 496 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.623,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 141 203 245 547 833 1205 1206 1336 1376 1381

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.543,0/1.543,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.543,0/1.543,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -147,788283 (regressionFit = 147,788282, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 437,0/1.543,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -147,788283): hasCat(A, _) :- link(A, _).  [covers 437,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788312 (regressionFit = 147,788311, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 633,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788284 (regressionFit = 147,788282, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 437,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788285 (regressionFit = 147,788282, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 437,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788285 (regressionFit = 147,788282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 437,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,769404 (regressionFit = 147,769401, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -147,769404): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788313 (regressionFit = 147,788311, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 633,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788314 (regressionFit = 147,788311, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 633,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,780045 (regressionFit = 147,780042, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 305,0/1.543,0 pos, 0,0/0,0 neg]
%     Score = -147,788314 (regressionFit = 147,788311, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 633,0/1.543,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,096.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08468314207685151 to score=0.0025 #egs=159.0
Comparing variance: 0.09704102684004584 to score=0.0025 #egs=1384.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.384,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097041)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,097041) into position #1 in the search queue (new size=2).

% Time for loop #6: 294 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 159,0/1.543,0 pos, 0,0/0,0 neg]
% This clause covers 159 positive examples, of which 159 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 256 306 335 367 522 654 719 910 917 1032

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.384,0/1.384,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.384,0/1.384,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -134,302263 (regressionFit = 134,302261, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -134,302263): hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1021285244005332 to score=0.0025 #egs=527.0
Comparing variance: 0.09390960207310398 to score=0.0025 #egs=857.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 527,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,102129)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,102129) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 857,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,093910)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,093910) into position #2 in the search queue (new size=3).

% Time for loop #7: 47 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 527,0/1.384,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]'
%     Score = -134,302263 (regressionFit = 134,302261, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 83 118 139 172 227 233 283 302 375
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789824 (regressionFit = 53,789821, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,789824): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789825 (regressionFit = 53,789821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789824 (regressionFit = 53,789821, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789825 (regressionFit = 53,789821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,821484 (regressionFit = 53,821481, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789825 (regressionFit = 53,789821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789825 (regressionFit = 53,789821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%     Score = -53,789825 (regressionFit = 53,789821, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08206768447302999 to score=0.0025 #egs=110.0
Comparing variance: 0.10734382768951306 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,082068)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,082068) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 527,0/527,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #8: 231 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/527,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon31419, Anon31351))
Created a leaf under (hasCat(A, B) :- link(Anon31351, A))
Created a leaf under (hasCat(A, B) :- link(Anon29601, Anon30265))
Created a leaf under (hasCat(A, B) :- link(Anon31419, Anon31351))

%%%%%  WILL-Produced Tree #8 @ 20:41:06 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, C) )
%   then return 0.1905940906261281;  // std dev = 0,958, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( link(A, E), link(E, F) )
%   | then if ( link(A, F) )
%   | | then return 0.13544177145300665;  // std dev = 2,942, 78,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=68 */
%   | | else if ( link(F, G) )
%   | | | then return 0.06908409449874066;  // std dev = 2,358, 34,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | | else return 0.14249612804787584;  // std dev = 0,303, 87,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=78 */
%   | else if ( link(H, A), link(I, H), link(J, I) )
%   | | then return 0.10035933806415562;  // std dev = 3,386, 80,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=66 */
%   | | else if ( link(A, K), link(L, K), link(M, L) )
%   | | | then return 0.14958739043246408;  // std dev = 3,669, 159,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=144 */
%   | | | else if ( link(N, A) )
%   | | | | then if ( link(P, N) )
%   | | | | | then return 0.15142328425521712;  // std dev = 0,286, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | | else return 0.13227584926456565;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | | else return 0.1390512612441025;  // std dev = 0,306, 857,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=767 */


% Clauses:

hasCat(A, B, 0.1905940906261281) :- 
     link(C, A), 
     link(C, D), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.13544177145300665) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #2.

hasCat(A, B, 0.06908409449874066) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.14249612804787584) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.10035933806415562) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.14958739043246408) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #6.

hasCat(A, B, 0.15142328425521712) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #7.

hasCat(A, B, 0.13227584926456565) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.1390512612441025) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.1905940906261281) :-  /* #neg=1 #pos=40 */ 
   link(uniqueVar69, a),
   link(uniqueVar69, uniqueVar70),
   link(uniqueVar70, uniqueVar69),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.13544177145300665) :-  /* #neg=10 #pos=68 */ 
   link(a, uniqueVar71),
   link(uniqueVar71, uniqueVar72),
   link(a, uniqueVar72),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.06908409449874066) :-  /* #neg=7 #pos=27 */ 
   link(a, uniqueVar73),
   link(uniqueVar73, uniqueVar74),
   link(uniqueVar74, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.14249612804787584) :-  /* #neg=9 #pos=78 */ 
   link(a, uniqueVar75),
   link(uniqueVar75, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.10035933806415562) :-  /* #neg=14 #pos=66 */ 
   link(uniqueVar76, a),
   link(uniqueVar77, uniqueVar76),
   link(underscore, uniqueVar77),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.14958739043246408) :-  /* #neg=15 #pos=144 */ 
   link(a, uniqueVar78),
   link(uniqueVar79, uniqueVar78),
   link(underscore, uniqueVar79),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.15142328425521712) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar80, a),
   link(underscore, uniqueVar80),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.13227584926456565) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.1390512612441025) :-  /* #neg=90 #pos=767 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar75, underscore)
%   link(a, uniqueVar78)
%   link(underscore, uniqueVar80)
%   link(uniqueVar77, uniqueVar76)
%   link(uniqueVar69, uniqueVar70)
%   link(underscore, uniqueVar79)
%   link(a, uniqueVar71)
%   link(uniqueVar71, uniqueVar72)
%   link(a, uniqueVar73)
%   link(uniqueVar76, a)
%   link(underscore, a)
%   link(uniqueVar69, a)
%   link(underscore, uniqueVar77)
%   link(uniqueVar74, underscore)
%   link(a, uniqueVar75)
%   link(uniqueVar79, uniqueVar78)
%   link(uniqueVar80, a)
%   link(a, uniqueVar72)
%   link(uniqueVar73, uniqueVar74)
%   link(uniqueVar70, uniqueVar69)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 8 trees is 22,443 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1021285244005332
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:504 milliseconds
No hidden examples for : hasCat
Time to build dataset: 514 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0980535816270347
Set score:0.0025

% Have these 4 positive seeds: 262 357 689 1759

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,673802 (regressionFit = 182,673800, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,673802): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,673799 (regressionFit = 182,673798, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,673799): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,640875 (regressionFit = 182,640873, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,640875): hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07246088466805345 to score=0.0025 #egs=200.0
Comparing variance: 0.10111166317708556 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,072461)
%         ILP node to extend: hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,072461) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101112)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101112) into position #1 in the search queue (new size=2).

% Time for loop #1: 135 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 9 207 280 425 438 498 501 914 1522 1658

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,138879 (regressionFit = 168,138878, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,138879): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143359 (regressionFit = 168,143358, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,138880 (regressionFit = 168,138878, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,138881 (regressionFit = 168,138878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,100005 (regressionFit = 168,100002, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,100005): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143360 (regressionFit = 168,143358, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143360 (regressionFit = 168,143358, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148667 (regressionFit = 168,148665, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,099842 (regressionFit = 168,099840, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,099842): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,135656 (regressionFit = 168,135653, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,099842 (regressionFit = 168,099840, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,099842 (regressionFit = 168,099840, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,143361 (regressionFit = 168,143358, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,099842 (regressionFit = 168,099840, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,148668 (regressionFit = 168,148665, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14012346264547224 to score=0.0025 #egs=76.0
Comparing variance: 0.09921263792336753 to score=0.0025 #egs=1587.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.587,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099213)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099213) into position #1 in the search queue (new size=2).

% Time for loop #2: 442 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 129 155 205 213 340 474 758 762 862 969

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.587,0/1.587,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.587,0/1.587,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,433289 (regressionFit = 157,433288, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,433289): hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450364 (regressionFit = 157,450363, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433290 (regressionFit = 157,433288, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440571 (regressionFit = 157,440569, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433290 (regressionFit = 157,433288, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,433291 (regressionFit = 157,433288, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,436761 (regressionFit = 157,436758, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,440572 (regressionFit = 157,440569, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450365 (regressionFit = 157,450363, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450365 (regressionFit = 157,450363, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450452 (regressionFit = 157,450449, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,450366 (regressionFit = 157,450363, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1093985370538054 to score=0.0025 #egs=477.0
Comparing variance: 0.09481998705870992 to score=0.0025 #egs=1110.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,109399)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,109399) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,094820)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,094820) into position #2 in the search queue (new size=3).

% Time for loop #3: 478 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
% This clause covers 477 positive examples, of which 477 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -157,433289 (regressionFit = 157,433288, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 19 91 106 155 190 230 268 329 336 427
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181426 (regressionFit = 52,181424, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,181426): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181345 (regressionFit = 52,181343, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,181345): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,176316 (regressionFit = 52,176313, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,176316): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181345 (regressionFit = 52,181343, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181345 (regressionFit = 52,181343, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181345 (regressionFit = 52,181343, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,181427 (regressionFit = 52,181424, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,144135 (regressionFit = 52,144132, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,144135): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,109.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1281315910493754 to score=0.0025 #egs=145.0
Comparing variance: 0.10109955329354195 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101100)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101100) into position #1 in the search queue (new size=3).

% Time for loop #4: 248 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -157,433289 (regressionFit = 157,433288, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 2 29 126 204 237 251 297 315
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531188 (regressionFit = 33,531186, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,531188): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531189 (regressionFit = 33,531186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,561990 (regressionFit = 33,561987, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531189 (regressionFit = 33,531186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531189 (regressionFit = 33,531186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531189 (regressionFit = 33,531186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,531189 (regressionFit = 33,531186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08237873864504364 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629411 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082379)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082379) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104614) into position #1 in the search queue (new size=4).

% Time for loop #5: 100 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -157,433289 (regressionFit = 157,433288, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 52 95 128 230 274
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -157,4333):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon32709, Anon33815))

% Have these 7 positive seeds: 44 247 362 468 686 728 938

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,243832 (regressionFit = 105,243830, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,243832): hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,243832 (regressionFit = 105,243830, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,243833 (regressionFit = 105,243830, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,248961 (regressionFit = 105,248958, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,243833 (regressionFit = 105,243830, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,095.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10142227741812179 to score=0.0025 #egs=531.0
Comparing variance: 0.08875406051169181 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101422)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101422) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #7: 173 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
% This clause covers 531 positive examples, of which 531 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]'
%     Score = -105,243832 (regressionFit = 105,243830, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 21 22 54 56 76 119 131 155 293
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822420 (regressionFit = 53,822418, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,822420): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,847934 (regressionFit = 53,847931, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,855226 (regressionFit = 53,855222, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,822421 (regressionFit = 53,822418, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07947412638967935 to score=0.0025 #egs=114.0
Comparing variance: 0.10734380753686483 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,079474)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,079474) into position #3 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=5).

% Time for loop #8: 233 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 531,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -105,243832 (regressionFit = 105,243830, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 25 39 47 61 131 207 234 248 290
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337909 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398584231 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=5).

% Time for loop #9: 160 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon34369, Anon34945), link(Anon34945, Anon34981))
Created a leaf under (hasCat(A, B) :- link(Anon34369, A))
Created a leaf under (hasCat(A, B) :- link(Anon32709, Anon33815))
Created a leaf under (hasCat(A, B) :- link(Anon34517, Anon34369))
Created a leaf under (hasCat(A, B) :- link(Anon32007, A), link(A, Anon32045))

%%%%%  WILL-Produced Tree #9 @ 20:41:09 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(A, D) )
%   then return 0.12484953628134304;  // std dev = 0,269, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(E, F), link(F, A) )
%   | then return 0.08649588109168094;  // std dev = 3,263, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | else if ( link(A, G) )
%   | | then if ( link(H, G), link(I, H) )
%   | | | then return 0.0937559018357373;  // std dev = 4,310, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | else if ( link(G, J) )
%   | | | | then return 0.136322221583704;  // std dev = 0,287, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | else return 0.10895493907109331;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | else if ( link(K, A) )
%   | | | then if ( link(L, K) )
%   | | | | then return 0.12714198216016967;  // std dev = 0,282, 114,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=104 */
%   | | | | else if ( link(K, M), link(M, N) )
%   | | | | | then return 0.10780340086499828;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.10808778804741728;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else return 0.11689790235093471;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.12484953628134304) :- 
     link(C, A), 
     link(A, D), 
     !. // Clause #1.

hasCat(A, B, 0.08649588109168094) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.0937559018357373) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.136322221583704) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.10895493907109331) :- 
     link(A, C), 
     !. // Clause #5.

hasCat(A, B, 0.12714198216016967) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.10780340086499828) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.10808778804741728) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.11689790235093471) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.12484953628134304) :-  /* #neg=16 #pos=184 */ 
   link(underscore, a),
   link(a, underscore),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.08649588109168094) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar81, a),
   link(uniqueVar81, uniqueVar82),
   link(uniqueVar82, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.0937559018357373) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar83),
   link(uniqueVar84, uniqueVar83),
   link(underscore, uniqueVar84),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.136322221583704) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar85),
   link(uniqueVar85, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.10895493907109331) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.12714198216016967) :-  /* #neg=10 #pos=104 */ 
   link(uniqueVar86, a),
   link(underscore, uniqueVar86),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.10780340086499828) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar87, a),
   link(uniqueVar87, uniqueVar88),
   link(uniqueVar88, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.10808778804741728) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.11689790235093471) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar86, a)
%   link(underscore, uniqueVar86)
%   link(a, underscore)
%   link(uniqueVar81, uniqueVar82)
%   link(uniqueVar84, uniqueVar83)
%   link(uniqueVar81, a)
%   link(uniqueVar85, underscore)
%   link(underscore, a)
%   link(underscore, uniqueVar84)
%   link(uniqueVar87, a)
%   link(a, uniqueVar83)
%   link(a, uniqueVar85)
%   link(uniqueVar82, a)
%   link(uniqueVar88, underscore)
%   link(uniqueVar87, uniqueVar88)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 9 trees is 25,030 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10734380753686484
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:571 milliseconds
No hidden examples for : hasCat
Time to build dataset: 582 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0980455190889512
Set score:0.0025

% Have these 9 positive seeds: 343 407 495 729 1025 1055 1251 1428 1472

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,658780 (regressionFit = 182,658779, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,658780): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658781, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658781 (regressionFit = 182,658779, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657938 (regressionFit = 182,657936, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,657938): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629429 (regressionFit = 182,629427, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,629429): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658781 (regressionFit = 182,658779, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,649556 (regressionFit = 182,649553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629273 (regressionFit = 182,629270, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,629273): hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657940 (regressionFit = 182,657936, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,653431 (regressionFit = 182,653428, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,649556 (regressionFit = 182,649553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657940 (regressionFit = 182,657936, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657939 (regressionFit = 182,657936, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657940 (regressionFit = 182,657936, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658691 (regressionFit = 182,658688, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657940 (regressionFit = 182,657936, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,657940 (regressionFit = 182,657936, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658782 (regressionFit = 182,658779, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658783 (regressionFit = 182,658781, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658783 (regressionFit = 182,658781, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652401 (regressionFit = 182,652399, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629273 (regressionFit = 182,629270, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,629273): hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658551 (regressionFit = 182,658548, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658406 (regressionFit = 182,658403, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,629430 (regressionFit = 182,629427, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,658784 (regressionFit = 182,658781, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,652402 (regressionFit = 182,652399, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.061431464339358706 to score=0.0025 #egs=88.0
Comparing variance: 0.09984411304396193 to score=0.0025 #egs=1775.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.775,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099844)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099844) into the LAST position (#1) in the search queue.

% Time for loop #1: 791 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 88 positive examples, of which 88 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 71 206 211 382 837 1195 1336 1343 1482 1506

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.775,0/1.775,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.775,0/1.775,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -177,219932 (regressionFit = 177,219931, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,219932): hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221663 (regressionFit = 177,221662, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219933 (regressionFit = 177,219931, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221625 (regressionFit = 177,221623, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219933 (regressionFit = 177,219931, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221626 (regressionFit = 177,221623, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221626 (regressionFit = 177,221623, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 182,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221626 (regressionFit = 177,221623, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 182,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,219934 (regressionFit = 177,219931, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221626 (regressionFit = 177,221623, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221664 (regressionFit = 177,221662, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221664 (regressionFit = 177,221662, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,223123 (regressionFit = 177,223121, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,220741 (regressionFit = 177,220738, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 374,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,223124 (regressionFit = 177,223121, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,221665 (regressionFit = 177,221662, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 719,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,223124 (regressionFit = 177,223121, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,223124 (regressionFit = 177,223121, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.775,0 pos, 0,0/0,0 neg]
%     Score = -177,223124 (regressionFit = 177,223121, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.775,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10403374549448051 to score=0.0025 #egs=589.0
Comparing variance: 0.09776058592799282 to score=0.0025 #egs=1186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 589,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,104034)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,104034) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.186,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097761)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097761) into the LAST position (#2) in the search queue.

% Time for loop #2: 634 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 589,0/1.775,0 pos, 0,0/0,0 neg]
% This clause covers 589 positive examples, of which 589 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]'
%     Score = -177,219932 (regressionFit = 177,219931, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 118 167 221 357 428 460 463 475 477 493
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275655 (regressionFit = 61,275653, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,275655): hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264074 (regressionFit = 61,264071, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,264074): hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264075 (regressionFit = 61,264071, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,262687 (regressionFit = 61,262684, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 36,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,262687): hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 36,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,259152 (regressionFit = 61,259149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,259152): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264074 (regressionFit = 61,264071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264074 (regressionFit = 61,264071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,262687 (regressionFit = 61,262684, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 36,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264075 (regressionFit = 61,264071, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,275656 (regressionFit = 61,275653, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,259152 (regressionFit = 61,259149, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,264074 (regressionFit = 61,264071, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,268665 (regressionFit = 61,268662, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/589,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,104.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06498684066998853 to score=0.0025 #egs=43.0
Comparing variance: 0.10707823261405532 to score=0.0025 #egs=546.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 546,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,107078)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,107078) into position #1 in the search queue (new size=2).

% Time for loop #3: 295 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/589,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 589,0/546,0 pos, 0,0/0,0 neg]'
%     Score = -177,219932 (regressionFit = 177,219931, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 9 11 105 133 149 164 271 363 384
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463857 (regressionFit = 58,463855, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,463857): hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,464358 (regressionFit = 58,464355, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,457845 (regressionFit = 58,457842, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,457845): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,464358 (regressionFit = 58,464355, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,464358 (regressionFit = 58,464355, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,464358 (regressionFit = 58,464355, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,463858 (regressionFit = 58,463855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,446991 (regressionFit = 58,446988, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,446991): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11629701769699217 to score=0.0025 #egs=214.0
Comparing variance: 0.10108260990568062 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101083)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101083) into position #1 in the search queue (new size=2).

% Time for loop #4: 309 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]
% This clause covers 214 positive examples, of which 214 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 546,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -177,219932 (regressionFit = 177,219931, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 10 35 45 65 91 92 97 102 104 138
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,535832 (regressionFit = 33,535830, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,535832): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,535833 (regressionFit = 33,535830, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,535833 (regressionFit = 33,535830, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,535833 (regressionFit = 33,535830, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,535833 (regressionFit = 33,535830, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08246473897686009 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629352 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082465)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082465) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104614) into position #1 in the search queue (new size=3).

% Time for loop #5: 100 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -177,219932 (regressionFit = 177,219931, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 55 68 71 121 140 172 174 184 240 247
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -177,2199):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon36435, Anon38173))

% Have these 10 positive seeds: 3 7 347 492 672 687 890 1073 1090 1113

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -115,927088 (regressionFit = 115,927086, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -115,927088): hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927089 (regressionFit = 115,927086, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927089 (regressionFit = 115,927086, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943249 (regressionFit = 115,943247, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927090 (regressionFit = 115,927086, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,898857 (regressionFit = 115,898854, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -115,898857): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,925620 (regressionFit = 115,925617, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927090 (regressionFit = 115,927086, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927089 (regressionFit = 115,927086, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,898857 (regressionFit = 115,898854, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927090 (regressionFit = 115,927086, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,898857 (regressionFit = 115,898854, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927090 (regressionFit = 115,927086, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,927090 (regressionFit = 115,927086, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,898857 (regressionFit = 115,898854, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -115,898857): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,943250 (regressionFit = 115,943247, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,905439 (regressionFit = 115,905436, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1401790823798042 to score=0.0025 #egs=76.0
Comparing variance: 0.09481553450922811 to score=0.0025 #egs=1110.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,094816)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,094816) into position #1 in the search queue (new size=2).

% Time for loop #7: 317 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.186,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 18 23 328 524 594 671 1077

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,239076 (regressionFit = 105,239075, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,239076): hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,239077 (regressionFit = 105,239075, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,229972 (regressionFit = 105,229970, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,229972): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,229973 (regressionFit = 105,229970, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,229973 (regressionFit = 105,229970, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,242878 (regressionFit = 105,242875, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,239078 (regressionFit = 105,239075, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,243954 (regressionFit = 105,243951, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,229973 (regressionFit = 105,229970, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,239078 (regressionFit = 105,239075, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,095.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0794907459760157 to score=0.0025 #egs=114.0
Comparing variance: 0.09655424166674553 to score=0.0025 #egs=996.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,079491)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,079491) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 996,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,096554)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,096554) into position #1 in the search queue (new size=3).

% Time for loop #8: 175 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.110,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 107 110 117 171 227 435 515 551 586 615

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,150964 (regressionFit = 96,150963, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,150964): hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150965 (regressionFit = 96,150963, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150965 (regressionFit = 96,150963, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,164278 (regressionFit = 96,164275, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150966 (regressionFit = 96,150963, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734379352718743 to score=0.0025 #egs=417.0
Comparing variance: 0.08875406051169084 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #9: 168 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon39463, A))
Created a leaf under (hasCat(A, B) :- link(Anon39463, A))
Created a leaf under (hasCat(A, B) :- link(Anon36435, Anon38173))
Created a leaf under (hasCat(A, B) :- link(Anon39197, A), link(Anon39219, Anon39197))

%%%%%  WILL-Produced Tree #10 @ 20:41:12 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(D, C), link(A, E) )
%   then return 0.11172679786896879;  // std dev = 2,325, 88,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=82 */
%   else if ( link(A, F) )
%   | then if ( link(G, A), link(G, F) )
%   | | then return 0.10999319254427758;  // std dev = 1,672, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( link(H, F), link(I, H) )
%   | | | then return 0.08241113410245031;  // std dev = 4,989, 214,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=185 */
%   | | | else if ( link(F, J) )
%   | | | | then return 0.11321143194125448;  // std dev = 0,287, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | else return 0.09036722673176566;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | else if ( link(K, A), link(L, K), link(L, A) )
%   | | then return 0.07033657968159689;  // std dev = 3,264, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | | else if ( link(M, A), link(N, M) )
%   | | | then return 0.10650966538114402;  // std dev = 0,282, 114,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=104 */
%   | | | else if ( link(P, A) )
%   | | | | then return 0.08941326487450543;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | | else return 0.09780273075260776;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.11172679786896879) :- 
     link(C, A), 
     link(D, C), 
     link(A, E), 
     !. // Clause #1.

hasCat(A, B, 0.10999319254427758) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.08241113410245031) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.11321143194125448) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.09036722673176566) :- 
     link(A, C), 
     !. // Clause #5.

hasCat(A, B, 0.07033657968159689) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #6.

hasCat(A, B, 0.10650966538114402) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #7.

hasCat(A, B, 0.08941326487450543) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.09780273075260776) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.11172679786896879) :-  /* #neg=6 #pos=82 */ 
   link(uniqueVar89, a),
   link(underscore, uniqueVar89),
   link(a, underscore),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.10999319254427758) :-  /* #neg=3 #pos=40 */ 
   link(a, uniqueVar90),
   link(uniqueVar91, a),
   link(uniqueVar91, uniqueVar90),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.08241113410245031) :-  /* #neg=29 #pos=185 */ 
   link(a, uniqueVar92),
   link(uniqueVar93, uniqueVar92),
   link(underscore, uniqueVar93),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.11321143194125448) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar94),
   link(uniqueVar94, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.09036722673176566) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.07033657968159689) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar95, a),
   link(uniqueVar96, uniqueVar95),
   link(uniqueVar96, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.10650966538114402) :-  /* #neg=10 #pos=104 */ 
   link(uniqueVar97, a),
   link(underscore, uniqueVar97),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.08941326487450543) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.09780273075260776) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar96, uniqueVar95)
%   link(uniqueVar93, uniqueVar92)
%   link(a, underscore)
%   link(underscore, uniqueVar93)
%   link(underscore, uniqueVar89)
%   link(uniqueVar97, a)
%   link(underscore, a)
%   link(underscore, uniqueVar97)
%   link(uniqueVar89, a)
%   link(uniqueVar94, underscore)
%   link(uniqueVar91, a)
%   link(uniqueVar91, uniqueVar90)
%   link(a, uniqueVar94)
%   link(uniqueVar95, a)
%   link(uniqueVar96, a)
%   link(a, uniqueVar90)
%   link(a, uniqueVar92)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for hasCat.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
hasCat(A, B, Total) :- // A general accessor. 
   hasCat(A, B, 1000000, Total), !.
hasCat(A, B, Total) :- waitHere("This should not fail", hasCat(A, B, Total)).

hasCat(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_hasCat_tree1(A, B, TreesToUse, Total1),
   getScore_hasCat_tree2(A, B, TreesToUse, Total2),
   getScore_hasCat_tree3(A, B, TreesToUse, Total3),
   getScore_hasCat_tree4(A, B, TreesToUse, Total4),
   getScore_hasCat_tree5(A, B, TreesToUse, Total5),
   getScore_hasCat_tree6(A, B, TreesToUse, Total6),
   getScore_hasCat_tree7(A, B, TreesToUse, Total7),
   getScore_hasCat_tree8(A, B, TreesToUse, Total8),
   getScore_hasCat_tree9(A, B, TreesToUse, Total9),
   getScore_hasCat_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
hasCat(A, B, TreesToUse, Total) :- waitHere("This should not fail", hasCat(A, B, TreesToUse, Total)).

getScore_hasCat_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_hasCat_tree1(A, B, TreesToUse, Total1) :- hasCat_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_hasCat_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_hasCat_tree2(A, B, TreesToUse, Total2) :- hasCat_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_hasCat_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_hasCat_tree3(A, B, TreesToUse, Total3) :- hasCat_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_hasCat_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_hasCat_tree4(A, B, TreesToUse, Total4) :- hasCat_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_hasCat_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_hasCat_tree5(A, B, TreesToUse, Total5) :- hasCat_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_hasCat_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_hasCat_tree6(A, B, TreesToUse, Total6) :- hasCat_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_hasCat_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_hasCat_tree7(A, B, TreesToUse, Total7) :- hasCat_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_hasCat_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_hasCat_tree8(A, B, TreesToUse, Total8) :- hasCat_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_hasCat_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_hasCat_tree9(A, B, TreesToUse, Total9) :- hasCat_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_hasCat_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_hasCat_tree10(A, B, TreesToUse, Total10) :- hasCat_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(hasCat, 156, [
   link(a, uniqueVar78),
   link(a, underscore),
   link(uniqueVar67, a),
   link(a, uniqueVar13),
   link(uniqueVar36, underscore),
   link(underscore, uniqueVar89),
   link(a, uniqueVar27),
   link(uniqueVar81, a),
   link(uniqueVar29, uniqueVar28),
   link(uniqueVar38, uniqueVar37),
   link(underscore, a),
   link(underscore, uniqueVar24),
   link(underscore, uniqueVar77),
   link(uniqueVar16, a),
   link(a, uniqueVar75),
   link(uniqueVar45, a),
   link(uniqueVar60, a),
   link(uniqueVar73, uniqueVar74),
   link(uniqueVar91, a),
   link(a, uniqueVar94),
   link(underscore, uniqueVar4),
   link(a, uniqueVar85),
   link(uniqueVar48, uniqueVar49),
   link(a, uniqueVar63),
   link(uniqueVar18, uniqueVar19),
   link(a, uniqueVar22),
   link(uniqueVar47, underscore),
   link(uniqueVar68, underscore),
   link(a, uniqueVar30),
   link(uniqueVar97, a),
   link(uniqueVar85, underscore),
   link(a, uniqueVar53),
   link(a, uniqueVar1),
   link(uniqueVar35, a),
   link(a, uniqueVar57),
   link(underscore, uniqueVar97),
   link(uniqueVar24, a),
   link(uniqueVar89, a),
   link(uniqueVar64, uniqueVar63),
   link(uniqueVar2, a),
   link(uniqueVar80, a),
   link(a, uniqueVar59),
   link(uniqueVar46, a),
   link(uniqueVar10, uniqueVar11),
   link(uniqueVar11, underscore),
   link(uniqueVar60, uniqueVar59),
   link(uniqueVar2, uniqueVar1),
   link(a, uniqueVar28),
   link(underscore, uniqueVar45),
   link(uniqueVar96, uniqueVar95),
   link(a, uniqueVar12),
   link(underscore, uniqueVar67),
   link(uniqueVar35, uniqueVar36),
   link(underscore, uniqueVar79),
   link(uniqueVar81, uniqueVar82),
   link(uniqueVar14, uniqueVar13),
   link(uniqueVar6, a),
   link(uniqueVar69, a),
   link(uniqueVar27, underscore),
   link(uniqueVar32, a),
   link(uniqueVar51, uniqueVar50),
   link(uniqueVar25, uniqueVar26),
   link(uniqueVar4, uniqueVar3),
   link(uniqueVar37, a),
   link(uniqueVar95, a),
   link(uniqueVar62, uniqueVar61),
   link(uniqueVar5, a),
   link(a, uniqueVar3),
   link(uniqueVar93, uniqueVar92),
   link(uniqueVar22, uniqueVar23),
   link(uniqueVar15, underscore),
   link(uniqueVar56, underscore),
   link(uniqueVar20, a),
   link(a, uniqueVar25),
   link(uniqueVar58, uniqueVar57),
   link(uniqueVar55, underscore),
   link(uniqueVar17, a),
   link(uniqueVar94, underscore),
   link(uniqueVar9, a),
   link(uniqueVar21, uniqueVar20),
   link(uniqueVar32, uniqueVar33),
   link(underscore, uniqueVar51),
   link(uniqueVar52, uniqueVar53),
   link(a, uniqueVar54),
   link(a, uniqueVar15),
   link(uniqueVar8, uniqueVar7),
   link(underscore, uniqueVar58),
   link(uniqueVar48, a),
   link(a, uniqueVar90),
   link(a, uniqueVar92),
   link(underscore, uniqueVar80),
   link(underscore, uniqueVar34),
   link(uniqueVar69, uniqueVar70),
   link(uniqueVar6, uniqueVar5),
   link(a, uniqueVar56),
   link(a, uniqueVar71),
   link(underscore, uniqueVar8),
   link(a, uniqueVar73),
   link(underscore, uniqueVar9),
   link(uniqueVar19, underscore),
   link(uniqueVar76, a),
   link(a, uniqueVar52),
   link(uniqueVar54, uniqueVar55),
   link(uniqueVar10, a),
   link(underscore, uniqueVar62),
   link(uniqueVar37, uniqueVar38),
   link(uniqueVar87, a),
   link(uniqueVar77, uniqueVar76),
   link(underscore, uniqueVar93),
   link(uniqueVar84, uniqueVar83),
   link(uniqueVar71, uniqueVar72),
   link(uniqueVar49, uniqueVar48),
   link(uniqueVar39, a),
   link(a, uniqueVar72),
   link(uniqueVar42, a),
   link(uniqueVar91, uniqueVar90),
   link(uniqueVar7, a),
   link(uniqueVar70, uniqueVar69),
   link(uniqueVar75, underscore),
   link(uniqueVar18, a),
   link(underscore, uniqueVar29),
   link(uniqueVar42, uniqueVar41),
   link(a, uniqueVar68),
   link(uniqueVar34, a),
   link(uniqueVar44, uniqueVar43),
   link(underscore, uniqueVar64),
   link(uniqueVar74, underscore),
   link(uniqueVar79, uniqueVar78),
   link(uniqueVar12, a),
   link(uniqueVar31, underscore),
   link(uniqueVar46, uniqueVar47),
   link(uniqueVar33, a),
   link(uniqueVar30, uniqueVar31),
   link(underscore, uniqueVar21),
   link(underscore, uniqueVar44),
   link(a, uniqueVar83),
   link(uniqueVar87, uniqueVar88),
   link(uniqueVar86, a),
   link(underscore, uniqueVar86),
   link(a, uniqueVar41),
   link(uniqueVar66, underscore),
   link(uniqueVar16, uniqueVar17),
   link(uniqueVar40, a),
   link(uniqueVar65, uniqueVar66),
   link(uniqueVar23, underscore),
   link(a, uniqueVar26),
   link(uniqueVar61, a),
   link(underscore, uniqueVar14),
   link(uniqueVar65, a),
   link(uniqueVar43, a),
   link(uniqueVar50, a),
   link(underscore, uniqueVar84),
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar96, a),
   link(uniqueVar82, a),
   link(uniqueVar88, underscore)]).
% Time taken to learn model for 'hasCat': 28,560 seconds.
% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 29,446 seconds.
