usePrologVariables: true.

% maxTreeDepthInNodes                 = 4
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 50
% maxNodesToCreate                    = 50.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 2.008
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 18:25:55 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.8331489350995097;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.7561752508889822;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.7977322684328414;  // std dev = 5,220, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.8449910403626665;  // std dev = 1,987, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.7981489350995122;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.8466104735610475;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.8331489350995097) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.7561752508889822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.8581489350995123) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.8081489350995122) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.7977322684328414) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.8449910403626665) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.7981489350995122) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8466104735610475) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.8331489350995097) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7561752508889822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar2),
   knows(uniqueVar2, uniqueVar2),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.8581489350995123) :-  /* #pos=6 */ 
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar4),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.7977322684328414) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar5, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar6, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.8449910403626665) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar7, a),
   knows(underscore, uniqueVar7),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7981489350995122) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar8, a),
   knows(underscore, uniqueVar8),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8466104735610475) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar3)
%   knows(underscore, uniqueVar7)
%   knows(uniqueVar6, uniqueVar5)
%   knows(b, underscore)
%   knows(uniqueVar2, uniqueVar2)
%   knows(underscore, uniqueVar8)
%   knows(uniqueVar4, uniqueVar4)
%   knows(uniqueVar6, a)
%   knows(uniqueVar5, a)
%   knows(a, uniqueVar2)
%   knows(uniqueVar8, a)
%   knows(b, a)
%   knows(uniqueVar1, uniqueVar1)
%   knows(a, uniqueVar4)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar3, a)
%   knows(a, uniqueVar1)
%   knows(uniqueVar7, a)

%%%%%  WILL-Produced Tree #2 @ 18:26:02 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.6994914035015026;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.637613635329692;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.7036147903757071;  // std dev = 0,141, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(F, F) )
%   | | then return 0.5648375413594845;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( knows(G, A), knows(B, H) )
%   | | | then if ( knows(G, H) )
%   | | | | then return 0.610669388156869;  // std dev = 2,095, 42,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=37 */
%   | | | | else return 0.6851135417933185;  // std dev = 1,692, 74,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.6928763140805134;  // std dev = 0,185, 168,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=162 */


% Clauses:

trusts(A, B, 0.6994914035015026) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.637613635329692) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.7194734122109544) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.6794533872440252) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.7036147903757071) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.5648375413594845) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.610669388156869) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.6851135417933185) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.6928763140805134) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.6994914035015026) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.637613635329692) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.7194734122109544) :-  /* #pos=6 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar11, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.6794533872440252) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar12),
   knows(uniqueVar12, uniqueVar12),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7036147903757071) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5648375413594845) :-  /* #neg=2 #pos=10 */ 
   knows(uniqueVar14, a),
   knows(uniqueVar14, uniqueVar14),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.610669388156869) :-  /* #neg=5 #pos=37 */ 
   knows(uniqueVar15, a),
   knows(b, uniqueVar16),
   knows(uniqueVar15, uniqueVar16),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.6851135417933185) :-  /* #neg=3 #pos=71 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.6928763140805134) :-  /* #neg=6 #pos=162 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar15, uniqueVar16)
%   knows(underscore, a)
%   knows(b, uniqueVar16)
%   knows(a, uniqueVar11)
%   knows(uniqueVar10, uniqueVar10)
%   knows(b, underscore)
%   knows(uniqueVar12, uniqueVar12)
%   knows(uniqueVar13, a)
%   knows(uniqueVar11, a)
%   knows(a, uniqueVar13)
%   knows(a, uniqueVar9)
%   knows(a, uniqueVar10)
%   knows(uniqueVar14, uniqueVar14)
%   knows(uniqueVar15, a)
%   knows(uniqueVar14, a)
%   knows(b, a)
%   knows(uniqueVar11, uniqueVar11)
%   knows(a, uniqueVar12)
%   knows(uniqueVar9, uniqueVar9)

%%%%%  WILL-Produced Tree #3 @ 18:26:08 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.5518120675111413;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(D, C) )
%   | then if ( knows(D, A) )
%   | | then return 0.5044821825644167;  // std dev = 7,329, 738,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=679 */
%   | | else if ( knows(B, E) )
%   | | | then return 0.5552749434156429;  // std dev = 2,231, 358,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=353 */
%   | | | else if ( knows(D, B) )
%   | | | | then return 0.5504511069684362;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | | else return 0.4655238786197725;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else if ( knows(A, F), knows(F, B) )
%   | | then if ( knows(B, F) )
%   | | | then return 0.5295145892878748;  // std dev = 0,989, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.4558255834467835;  // std dev = 1,313, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | | else return 0.564762446580682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5592526644278057;  // std dev = 0,067, 224,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=223 */


% Clauses:

trusts(A, B, 0.5518120675111413) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.5044821825644167) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #2.

trusts(A, B, 0.5552749434156429) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #3.

trusts(A, B, 0.5504511069684362) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, B), 
     !. // Clause #4.

trusts(A, B, 0.4655238786197725) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #5.

trusts(A, B, 0.5295145892878748) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.4558255834467835) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.564762446580682) :- 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #8.

trusts(A, B, 0.5592526644278057) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5518120675111413) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.5044821825644167) :-  /* #neg=59 #pos=679 */ 
   knows(uniqueVar17, a),
   knows(uniqueVar18, uniqueVar17),
   knows(uniqueVar18, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.5552749434156429) :-  /* #neg=5 #pos=353 */ 
   knows(uniqueVar19, a),
   knows(underscore, uniqueVar19),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.5504511069684362) :-  /* #neg=1 #pos=37 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar21, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.4655238786197725) :-  /* #neg=2 #pos=16 */ 
   knows(uniqueVar22, a),
   knows(underscore, uniqueVar22),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.5295145892878748) :-  /* #neg=1 #pos=25 */ 
   knows(a, uniqueVar23),
   knows(uniqueVar23, b),
   knows(b, uniqueVar23),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.4558255834467835) :-  /* #neg=2 #pos=16 */ 
   knows(a, uniqueVar24),
   knows(uniqueVar24, b),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.564762446580682) :-  /* #pos=4 */ 
   knows(a, uniqueVar25),
   knows(uniqueVar25, b),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5592526644278057) :-  /* #neg=1 #pos=223 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar25)
%   knows(b, uniqueVar23)
%   knows(a, uniqueVar24)
%   knows(b, underscore)
%   knows(a, uniqueVar23)
%   knows(uniqueVar18, uniqueVar17)
%   knows(uniqueVar21, uniqueVar20)
%   knows(uniqueVar19, a)
%   knows(uniqueVar21, b)
%   knows(uniqueVar25, b)
%   knows(uniqueVar18, a)
%   knows(uniqueVar17, a)
%   knows(uniqueVar22, a)
%   knows(b, a)
%   knows(underscore, uniqueVar19)
%   knows(underscore, uniqueVar22)
%   knows(uniqueVar24, b)
%   knows(uniqueVar23, b)
%   knows(uniqueVar20, a)

%%%%%  WILL-Produced Tree #4 @ 18:26:17 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.4147547485318321;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.38886764551954806;  // std dev = 2,526, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(C, B) )
%   | | | then return 0.4691396188587295;  // std dev = 0,036, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( knows(B, B) )
%   | | | | then return -0.024548014944530183;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return 0.29175959076543007;  // std dev = 2,547, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, B), knows(B, D) )
%   | | then return 0.4055908067778868;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(E, A), knows(B, F) )
%   | | | then if ( knows(E, F) )
%   | | | | then return 0.3259325201187505;  // std dev = 2,611, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.3903207912827489;  // std dev = 2,151, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.4060659723633622;  // std dev = 0,190, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.4147547485318321) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.38886764551954806) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, 0.4691396188587295) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #3.

trusts(A, B, -0.024548014944530183) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #4.

trusts(A, B, 0.29175959076543007) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.4055908067778868) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.3259325201187505) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.3903207912827489) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.4060659723633622) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.4147547485318321) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.38886764551954806) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar26, a),
   knows(uniqueVar26, uniqueVar26),
   knows(a, uniqueVar26),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.4691396188587295) :-  /* #pos=6 */ 
   knows(uniqueVar27, a),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar27, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, -0.024548014944530183) :-  /* #neg=2 #pos=2 */ 
   knows(uniqueVar28, a),
   knows(uniqueVar28, uniqueVar28),
   knows(b, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.29175959076543007) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar29, a),
   knows(uniqueVar29, uniqueVar29),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.4055908067778868) :-  /* #neg=34 #pos=916 */ 
   knows(uniqueVar30, a),
   knows(a, uniqueVar30),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.3259325201187505) :-  /* #neg=8 #pos=48 */ 
   knows(uniqueVar31, a),
   knows(b, uniqueVar32),
   knows(uniqueVar31, uniqueVar32),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.3903207912827489) :-  /* #neg=5 #pos=87 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.4060659723633622) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(underscore, a)
%   knows(b, underscore)
%   knows(a, uniqueVar26)
%   knows(b, b)
%   knows(uniqueVar27, a)
%   knows(uniqueVar26, a)
%   knows(uniqueVar27, b)
%   knows(uniqueVar29, a)
%   knows(uniqueVar27, uniqueVar27)
%   knows(uniqueVar28, a)
%   knows(b, uniqueVar32)
%   knows(uniqueVar29, uniqueVar29)
%   knows(a, uniqueVar30)
%   knows(b, a)
%   knows(uniqueVar28, uniqueVar28)
%   knows(uniqueVar30, a)
%   knows(uniqueVar31, a)
%   knows(uniqueVar31, uniqueVar32)
%   knows(uniqueVar26, uniqueVar26)

%%%%%  WILL-Produced Tree #5 @ 18:26:25 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.30698803528796204;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.29787985781554543;  // std dev = 2,264, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.29605795367651516;  // std dev = 2,341, 74,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=68 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.26165995466230824;  // std dev = 4,063, 164,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=145 */
%   | | | | else return 0.30428943185374957;  // std dev = 0,975, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, A), knows(E, B) )
%   | then return 0.32127866648205994;  // std dev = 0,134, 524,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=514 */
%   | else if ( knows(F, A), knows(G, F) )
%   | | then if ( knows(B, G) )
%   | | | then return 0.3138170487302279;  // std dev = 2,764, 362,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=354 */
%   | | | else return 0.2920480446055421;  // std dev = 0,223, 374,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=354 */
%   | | else return 0.3193910889514935;  // std dev = 0,106, 258,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=255 */


% Clauses:

trusts(A, B, 0.30698803528796204) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.29787985781554543) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.29605795367651516) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.26165995466230824) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.30428943185374957) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.32127866648205994) :- 
     knows(C, A), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.3138170487302279) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.2920480446055421) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.3193910889514935) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.30698803528796204) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.29787985781554543) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(b, uniqueVar34),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.29605795367651516) :-  /* #neg=6 #pos=68 */ 
   knows(a, uniqueVar35),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar35, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.26165995466230824) :-  /* #neg=19 #pos=145 */ 
   knows(a, uniqueVar36),
   knows(uniqueVar36, uniqueVar36),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.30428943185374957) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar37),
   knows(uniqueVar37, uniqueVar37),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.32127866648205994) :-  /* #neg=10 #pos=514 */ 
   knows(uniqueVar38, a),
   knows(uniqueVar38, b),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.3138170487302279) :-  /* #neg=8 #pos=354 */ 
   knows(uniqueVar39, a),
   knows(uniqueVar40, uniqueVar39),
   knows(b, uniqueVar40),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.2920480446055421) :-  /* #neg=20 #pos=354 */ 
   knows(uniqueVar41, a),
   knows(underscore, uniqueVar41),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.3193910889514935) :-  /* #neg=3 #pos=255 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar35, uniqueVar35)
%   knows(a, uniqueVar34)
%   knows(uniqueVar35, a)
%   knows(uniqueVar36, uniqueVar36)
%   knows(b, underscore)
%   knows(b, uniqueVar40)
%   knows(uniqueVar34, uniqueVar34)
%   knows(a, uniqueVar33)
%   knows(uniqueVar33, uniqueVar33)
%   knows(uniqueVar37, uniqueVar37)
%   knows(uniqueVar39, a)
%   knows(b, uniqueVar34)
%   knows(a, uniqueVar36)
%   knows(a, uniqueVar35)
%   knows(underscore, uniqueVar41)
%   knows(b, a)
%   knows(uniqueVar38, b)
%   knows(uniqueVar41, a)
%   knows(uniqueVar40, uniqueVar39)
%   knows(a, uniqueVar37)
%   knows(uniqueVar38, a)

%%%%%  WILL-Produced Tree #6 @ 18:26:36 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.24272511807038005;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.2142592791733077;  // std dev = 5,215, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.27547285608049954;  // std dev = 1,05e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2381480491495797;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.25619604552650865;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.22947694869589183;  // std dev = 5,189, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.25518533441830404;  // std dev = 1,986, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.2268037831764576;  // std dev = 1,670, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.25289967356594306;  // std dev = 0,106, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.24272511807038005) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2142592791733077) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.27547285608049954) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.2381480491495797) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.25619604552650865) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.22947694869589183) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.25518533441830404) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.2268037831764576) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.25289967356594306) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.24272511807038005) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar42),
   knows(uniqueVar42, uniqueVar42),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.2142592791733077) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar43),
   knows(uniqueVar43, uniqueVar43),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.27547285608049954) :-  /* #pos=6 */ 
   knows(a, uniqueVar44),
   knows(uniqueVar44, uniqueVar44),
   knows(uniqueVar44, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.2381480491495797) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar45),
   knows(uniqueVar45, uniqueVar45),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.25619604552650865) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.22947694869589183) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar46, a),
   knows(uniqueVar47, uniqueVar46),
   knows(uniqueVar47, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.25518533441830404) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar48, a),
   knows(underscore, uniqueVar48),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.2268037831764576) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar49, a),
   knows(underscore, uniqueVar49),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.25289967356594306) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(a, uniqueVar45)
%   knows(uniqueVar46, a)
%   knows(uniqueVar44, a)
%   knows(uniqueVar45, uniqueVar45)
%   knows(uniqueVar44, uniqueVar44)
%   knows(a, uniqueVar42)
%   knows(a, uniqueVar43)
%   knows(uniqueVar42, uniqueVar42)
%   knows(b, a)
%   knows(uniqueVar47, a)
%   knows(uniqueVar49, a)
%   knows(underscore, uniqueVar49)
%   knows(underscore, uniqueVar48)
%   knows(uniqueVar43, uniqueVar43)
%   knows(a, uniqueVar44)
%   knows(uniqueVar47, uniqueVar46)
%   knows(uniqueVar48, a)

%%%%%  WILL-Produced Tree #7 @ 18:26:45 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.19788709463469994;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(A, A) )
%   | | then return 0.2088373174479784;  // std dev = 0,969, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( knows(B, C) )
%   | | | then return 0.18657671979372895;  // std dev = 2,273, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.1615776582068666;  // std dev = 4,591, 216,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=192 */
%   | | | | else return 0.19722560907968237;  // std dev = 0,977, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else if ( knows(B, A) )
%   | then return 0.20988191098969475;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.18463110945491534;  // std dev = 5,191, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else return 0.2045449579018626;  // std dev = 0,138, 354,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=347 */
%   | | else return 0.2067114107446805;  // std dev = 0,106, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.19788709463469994) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2088373174479784) :- 
     knows(A, C), 
     knows(C, C), 
     knows(A, A), 
     !. // Clause #2.

trusts(A, B, 0.18657671979372895) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #3.

trusts(A, B, 0.1615776582068666) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.19722560907968237) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.20988191098969475) :- 
     knows(B, A), 
     !. // Clause #6.

trusts(A, B, 0.18463110945491534) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.2045449579018626) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.2067114107446805) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.19788709463469994) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar50),
   knows(uniqueVar50, uniqueVar50),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.2088373174479784) :-  /* #neg=1 #pos=17 */ 
   knows(a, uniqueVar51),
   knows(uniqueVar51, uniqueVar51),
   knows(a, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.18657671979372895) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar52),
   knows(uniqueVar52, uniqueVar52),
   knows(b, uniqueVar52),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.1615776582068666) :-  /* #neg=24 #pos=192 */ 
   knows(a, uniqueVar53),
   knows(uniqueVar53, uniqueVar53),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.19722560907968237) :-  /* #neg=1 #pos=23 */ 
   knows(a, uniqueVar54),
   knows(uniqueVar54, uniqueVar54),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.20988191098969475) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.18463110945491534) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar55, a),
   knows(uniqueVar56, uniqueVar55),
   knows(uniqueVar56, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.2045449579018626) :-  /* #neg=7 #pos=347 */ 
   knows(uniqueVar57, a),
   knows(underscore, uniqueVar57),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2067114107446805) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(uniqueVar57, a)
%   knows(uniqueVar50, uniqueVar50)
%   knows(uniqueVar54, uniqueVar54)
%   knows(uniqueVar53, uniqueVar53)
%   knows(a, uniqueVar53)
%   knows(b, uniqueVar52)
%   knows(uniqueVar52, uniqueVar52)
%   knows(b, a)
%   knows(a, uniqueVar54)
%   knows(a, uniqueVar50)
%   knows(a, a)
%   knows(uniqueVar51, uniqueVar51)
%   knows(uniqueVar56, uniqueVar55)
%   knows(underscore, uniqueVar57)
%   knows(uniqueVar56, a)
%   knows(a, uniqueVar51)
%   knows(a, uniqueVar52)
%   knows(uniqueVar55, a)

%%%%%  WILL-Produced Tree #8 @ 18:26:54 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.16549339619591805;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.13761285584083172;  // std dev = 5,221, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.1909900464933698;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15757455252408795;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.17004403165573811;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(B, F), knows(A, F) )
%   | | then return 0.1257958366957992;  // std dev = 0,285, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else if ( knows(G, B), knows(G, G) )
%   | | | then if ( knows(B, H) )
%   | | | | then return 0.20623951496963866;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return -0.11712720738838378;  // std dev = 1,154, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.16378199005348373;  // std dev = 0,202, 254,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=243 */


% Clauses:

trusts(A, B, 0.16549339619591805) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.13761285584083172) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.1909900464933698) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.15757455252408795) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.17004403165573811) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.1257958366957992) :- 
     knows(B, C), 
     knows(A, C), 
     !. // Clause #6.

trusts(A, B, 0.20623951496963866) :- 
     knows(C, B), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, -0.11712720738838378) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.16378199005348373) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.16549339619591805) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar58),
   knows(uniqueVar58, uniqueVar58),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.13761285584083172) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar59),
   knows(uniqueVar59, uniqueVar59),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.1909900464933698) :-  /* #pos=6 */ 
   knows(a, uniqueVar60),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar60, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.15757455252408795) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar61),
   knows(uniqueVar61, uniqueVar61),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.17004403165573811) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar62),
   knows(uniqueVar62, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.1257958366957992) :-  /* #neg=3 #pos=29 */ 
   knows(b, uniqueVar63),
   knows(a, uniqueVar63),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.20623951496963866) :-  /* #pos=4 */ 
   knows(uniqueVar64, a),
   knows(uniqueVar64, uniqueVar64),
   knows(a, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, -0.11712720738838378) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar65, a),
   knows(uniqueVar65, uniqueVar65),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.16378199005348373) :-  /* #neg=11 #pos=243 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar61, uniqueVar61)
%   knows(a, underscore)
%   knows(uniqueVar60, a)
%   knows(b, underscore)
%   knows(uniqueVar59, uniqueVar59)
%   knows(a, uniqueVar62)
%   knows(uniqueVar64, a)
%   knows(uniqueVar64, uniqueVar64)
%   knows(a, uniqueVar60)
%   knows(b, uniqueVar63)
%   knows(a, uniqueVar61)
%   knows(uniqueVar60, uniqueVar60)
%   knows(a, uniqueVar58)
%   knows(a, uniqueVar63)
%   knows(uniqueVar58, uniqueVar58)
%   knows(a, uniqueVar59)
%   knows(b, a)
%   knows(uniqueVar62, a)
%   knows(uniqueVar65, a)
%   knows(uniqueVar65, uniqueVar65)

%%%%%  WILL-Produced Tree #9 @ 18:27:06 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.1412694229149483;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.11346544980045362;  // std dev = 5,225, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.16320403260582847;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13285358475089937;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.15272983873511453;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.1260237444013383;  // std dev = 5,187, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.15055509149770005;  // std dev = 1,986, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.12154864089984484;  // std dev = 1,672, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.14975592708296992;  // std dev = 0,105, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.1412694229149483) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.11346544980045362) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.16320403260582847) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.13285358475089937) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.15272983873511453) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.1260237444013383) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.15055509149770005) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.12154864089984484) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.14975592708296992) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1412694229149483) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar66),
   knows(uniqueVar66, uniqueVar66),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.11346544980045362) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar67),
   knows(uniqueVar67, uniqueVar67),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.16320403260582847) :-  /* #pos=6 */ 
   knows(a, uniqueVar68),
   knows(uniqueVar68, uniqueVar68),
   knows(uniqueVar68, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.13285358475089937) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar69),
   knows(uniqueVar69, uniqueVar69),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.15272983873511453) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.1260237444013383) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar70, a),
   knows(uniqueVar71, uniqueVar70),
   knows(uniqueVar71, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.15055509149770005) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar72, a),
   knows(underscore, uniqueVar72),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.12154864089984484) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar73, a),
   knows(underscore, uniqueVar73),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.14975592708296992) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar66)
%   knows(a, uniqueVar69)
%   knows(b, underscore)
%   knows(uniqueVar68, a)
%   knows(uniqueVar68, uniqueVar68)
%   knows(uniqueVar73, a)
%   knows(uniqueVar69, uniqueVar69)
%   knows(uniqueVar72, a)
%   knows(uniqueVar71, a)
%   knows(uniqueVar71, uniqueVar70)
%   knows(uniqueVar70, a)
%   knows(uniqueVar67, uniqueVar67)
%   knows(b, a)
%   knows(underscore, uniqueVar72)
%   knows(a, uniqueVar67)
%   knows(underscore, uniqueVar73)
%   knows(a, uniqueVar68)
%   knows(uniqueVar66, uniqueVar66)

%%%%%  WILL-Produced Tree #10 @ 18:27:19 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, D) )
%   | then return 0.10446404770513887;  // std dev = 5,595, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   | else if ( knows(C, A) )
%   | | then return 0.14212121110366957;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11383753446741851;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.1335119283630517;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.107674672584599;  // std dev = 5,189, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.13097450663096094;  // std dev = 1,986, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.10418600246512984;  // std dev = 1,673, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else if ( knows(A, H), knows(H, I) )
%   | | | then return 0.13374392033946073;  // std dev = 0,089, 250,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=248 */
%   | | | else return 0.04973697861528566;  // std dev = 0,290, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */


% Clauses:

trusts(A, B, 0.10446404770513887) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.14212121110366957) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #2.

trusts(A, B, 0.11383753446741851) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #3.

trusts(A, B, 0.1335119283630517) :- 
     knows(B, A), 
     !. // Clause #4.

trusts(A, B, 0.107674672584599) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #5.

trusts(A, B, 0.13097450663096094) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #6.

trusts(A, B, 0.10418600246512984) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.13374392033946073) :- 
     knows(A, C), 
     knows(C, D), 
     !. // Clause #8.

trusts(A, B, 0.04973697861528566) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.10446404770513887) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar74),
   knows(uniqueVar74, uniqueVar74),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.14212121110366957) :-  /* #pos=6 */ 
   knows(a, uniqueVar75),
   knows(uniqueVar75, uniqueVar75),
   knows(uniqueVar75, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.11383753446741851) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar76),
   knows(uniqueVar76, uniqueVar76),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.1335119283630517) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.107674672584599) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar77, a),
   knows(uniqueVar78, uniqueVar77),
   knows(uniqueVar78, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.13097450663096094) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar79, a),
   knows(underscore, uniqueVar79),
   knows(b, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.10418600246512984) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar80, a),
   knows(underscore, uniqueVar80),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.13374392033946073) :-  /* #neg=2 #pos=248 */ 
   knows(a, uniqueVar81),
   knows(uniqueVar81, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.04973697861528566) :-  /* #neg=1 #pos=9 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar76)
%   knows(b, underscore)
%   knows(uniqueVar75, a)
%   knows(a, uniqueVar81)
%   knows(uniqueVar78, a)
%   knows(uniqueVar78, uniqueVar77)
%   knows(a, uniqueVar74)
%   knows(uniqueVar74, uniqueVar74)
%   knows(uniqueVar75, uniqueVar75)
%   knows(a, uniqueVar75)
%   knows(uniqueVar77, a)
%   knows(uniqueVar81, underscore)
%   knows(uniqueVar79, a)
%   knows(underscore, uniqueVar80)
%   knows(underscore, uniqueVar79)
%   knows(b, a)
%   knows(uniqueVar80, a)
%   knows(uniqueVar76, uniqueVar76)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 170, [
   knows(a, uniqueVar3),
   knows(b, uniqueVar16),
   knows(b, uniqueVar23),
   knows(underscore, uniqueVar7),
   knows(a, uniqueVar11),
   knows(a, uniqueVar45),
   knows(uniqueVar53, uniqueVar53),
   knows(a, uniqueVar60),
   knows(a, uniqueVar61),
   knows(a, uniqueVar2),
   knows(a, uniqueVar36),
   knows(a, uniqueVar35),
   knows(uniqueVar15, a),
   knows(uniqueVar42, uniqueVar42),
   knows(uniqueVar28, a),
   knows(uniqueVar67, uniqueVar67),
   knows(uniqueVar47, a),
   knows(underscore, uniqueVar49),
   knows(uniqueVar80, a),
   knows(uniqueVar23, b),
   knows(uniqueVar65, a),
   knows(uniqueVar31, a),
   knows(uniqueVar41, a),
   knows(uniqueVar43, uniqueVar43),
   knows(uniqueVar56, a),
   knows(uniqueVar66, uniqueVar66),
   knows(uniqueVar76, uniqueVar76),
   knows(a, uniqueVar51),
   knows(a, uniqueVar52),
   knows(uniqueVar7, a),
   knows(uniqueVar36, uniqueVar36),
   knows(b, uniqueVar40),
   knows(uniqueVar57, a),
   knows(uniqueVar11, a),
   knows(uniqueVar18, uniqueVar17),
   knows(uniqueVar54, uniqueVar54),
   knows(uniqueVar64, uniqueVar64),
   knows(underscore, uniqueVar8),
   knows(uniqueVar21, b),
   knows(uniqueVar77, a),
   knows(uniqueVar81, underscore),
   knows(uniqueVar27, b),
   knows(a, uniqueVar30),
   knows(uniqueVar1, uniqueVar1),
   knows(a, uniqueVar67),
   knows(underscore, uniqueVar73),
   knows(underscore, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar46, a),
   knows(a, uniqueVar53),
   knows(a, uniqueVar33),
   knows(b, b),
   knows(uniqueVar45, uniqueVar45),
   knows(uniqueVar25, b),
   knows(a, uniqueVar74),
   knows(uniqueVar75, uniqueVar75),
   knows(b, uniqueVar34),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar14, uniqueVar14),
   knows(a, uniqueVar58),
   knows(uniqueVar71, uniqueVar70),
   knows(uniqueVar58, uniqueVar58),
   knows(underscore, uniqueVar80),
   knows(underscore, uniqueVar79),
   knows(uniqueVar38, b),
   knows(uniqueVar51, uniqueVar51),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar30, a),
   knows(uniqueVar40, uniqueVar39),
   knows(uniqueVar47, uniqueVar46),
   knows(a, uniqueVar24),
   knows(b, underscore),
   knows(uniqueVar35, a),
   knows(uniqueVar2, uniqueVar2),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar44, uniqueVar44),
   knows(b, uniqueVar63),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar5, a),
   knows(a, uniqueVar42),
   knows(uniqueVar17, a),
   knows(uniqueVar22, a),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar70, a),
   knows(uniqueVar29, uniqueVar29),
   knows(uniqueVar49, a),
   knows(uniqueVar62, a),
   knows(uniqueVar31, uniqueVar32),
   knows(uniqueVar20, a),
   knows(uniqueVar15, uniqueVar16),
   knows(a, uniqueVar23),
   knows(uniqueVar75, a),
   knows(a, uniqueVar81),
   knows(uniqueVar59, uniqueVar59),
   knows(uniqueVar64, a),
   knows(uniqueVar68, uniqueVar68),
   knows(uniqueVar44, a),
   knows(uniqueVar37, uniqueVar37),
   knows(uniqueVar18, a),
   knows(uniqueVar71, a),
   knows(a, uniqueVar43),
   knows(uniqueVar79, a),
   knows(b, a),
   knows(underscore, uniqueVar22),
   knows(a, uniqueVar54),
   knows(a, uniqueVar25),
   knows(uniqueVar61, uniqueVar61),
   knows(uniqueVar35, uniqueVar35),
   knows(a, uniqueVar66),
   knows(a, uniqueVar76),
   knows(a, uniqueVar69),
   knows(uniqueVar78, a),
   knows(a, uniqueVar13),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar6, a),
   knows(uniqueVar78, uniqueVar77),
   knows(uniqueVar72, a),
   knows(uniqueVar8, a),
   knows(uniqueVar26, a),
   knows(uniqueVar29, a),
   knows(b, uniqueVar32),
   knows(uniqueVar52, uniqueVar52),
   knows(uniqueVar24, b),
   knows(uniqueVar28, uniqueVar28),
   knows(a, uniqueVar50),
   knows(uniqueVar56, uniqueVar55),
   knows(a, uniqueVar34),
   knows(uniqueVar60, a),
   knows(uniqueVar12, uniqueVar12),
   knows(a, uniqueVar26),
   knows(uniqueVar50, uniqueVar50),
   knows(a, uniqueVar62),
   knows(uniqueVar73, a),
   knows(a, uniqueVar9),
   knows(uniqueVar19, a),
   knows(a, uniqueVar75),
   knows(a, uniqueVar10),
   knows(uniqueVar14, a),
   knows(underscore, uniqueVar41),
   knows(a, uniqueVar59),
   knows(underscore, uniqueVar19),
   knows(underscore, uniqueVar72),
   knows(a, uniqueVar4),
   knows(underscore, uniqueVar57),
   knows(uniqueVar3, a),
   knows(a, uniqueVar68),
   knows(uniqueVar55, a),
   knows(a, uniqueVar1),
   knows(uniqueVar9, uniqueVar9),
   knows(uniqueVar38, a),
   knows(a, underscore),
   knows(uniqueVar68, a),
   knows(uniqueVar13, a),
   knows(uniqueVar34, uniqueVar34),
   knows(uniqueVar33, uniqueVar33),
   knows(b, uniqueVar52),
   knows(uniqueVar39, a),
   knows(uniqueVar27, a),
   knows(uniqueVar69, uniqueVar69),
   knows(a, uniqueVar63),
   knows(uniqueVar11, uniqueVar11),
   knows(underscore, uniqueVar48),
   knows(a, uniqueVar12),
   knows(a, a),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar26, uniqueVar26),
   knows(a, uniqueVar44),
   knows(a, uniqueVar37),
   knows(uniqueVar48, a)]).
