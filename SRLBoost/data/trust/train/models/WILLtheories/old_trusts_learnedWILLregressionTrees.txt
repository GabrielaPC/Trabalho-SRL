usePrologVariables: true.

% maxTreeDepthInNodes                 = 6
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 3
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 50
% maxNodesToCreate                    = 50.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 2.008
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 0:20:28 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C), knows(B, D) )
%   then return 0.7827179006167494;  // std dev = 5,689, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E), knows(F, A) )
%   | | then return 0.798148935099508;  // std dev = 5,310, 500,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=470 */
%   | | else if ( knows(B, G), knows(G, H) )
%   | | | then if ( knows(H, A) )
%   | | | | then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | | | else return 0.8470869881968532;  // std dev = 0,105, 452,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=447 */
%   | | | else if ( knows(I, B), knows(J, I), knows(J, J) )
%   | | | | then return 0.7427643197148964;  // std dev = 1,629, 26,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | | else if ( knows(K, B), knows(K, L), knows(L, K) )
%   | | | | | then return 0.8381489350995122;  // std dev = 0,990, 50,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | | | else if ( knows(M, A), knows(M, N), knows(N, M) )
%   | | | | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | | else return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

trusts(A, B, 0.7827179006167494) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #2.

trusts(A, B, 0.798148935099508) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #3.

trusts(A, B, 0.8581489350995123) :- 
     knows(B, C), 
     knows(C, D), 
     knows(D, A), 
     !. // Clause #4.

trusts(A, B, 0.8470869881968532) :- 
     knows(B, C), 
     knows(C, D), 
     !. // Clause #5.

trusts(A, B, 0.7427643197148964) :- 
     knows(C, B), 
     knows(D, C), 
     knows(D, D), 
     !. // Clause #6.

trusts(A, B, 0.8381489350995122) :- 
     knows(C, B), 
     knows(C, D), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.6914822684328455) :- 
     knows(C, A), 
     knows(C, D), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8581489350995122) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.7827179006167494) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.798148935099508) :-  /* #neg=30 #pos=470 */ 
   knows(uniqueVar2, a),
   knows(uniqueVar3, uniqueVar2),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.8581489350995123) :-  /* #pos=82 */ 
   knows(b, uniqueVar4),
   knows(uniqueVar4, uniqueVar5),
   knows(uniqueVar5, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.8470869881968532) :-  /* #neg=5 #pos=447 */ 
   knows(a, uniqueVar6),
   knows(uniqueVar6, underscore),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.7427643197148964) :-  /* #neg=3 #pos=23 */ 
   knows(uniqueVar7, a),
   knows(uniqueVar8, uniqueVar7),
   knows(uniqueVar8, uniqueVar8),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.8381489350995122) :-  /* #neg=1 #pos=49 */ 
   knows(uniqueVar9, a),
   knows(uniqueVar9, uniqueVar10),
   knows(uniqueVar10, uniqueVar9),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.6914822684328455) :-  /* #neg=1 #pos=5 */ 
   knows(uniqueVar11, a),
   knows(uniqueVar11, uniqueVar12),
   knows(uniqueVar12, uniqueVar11),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8581489350995122) :-  /* #pos=4 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar1)
%   knows(b, underscore)
%   knows(uniqueVar11, uniqueVar12)
%   knows(uniqueVar9, uniqueVar10)
%   knows(uniqueVar6, underscore)
%   knows(uniqueVar7, a)
%   knows(uniqueVar8, uniqueVar7)
%   knows(uniqueVar1, uniqueVar1)
%   knows(b, uniqueVar4)
%   knows(uniqueVar11, a)
%   knows(uniqueVar10, uniqueVar9)
%   knows(a, uniqueVar6)
%   knows(uniqueVar5, a)
%   knows(uniqueVar9, a)
%   knows(uniqueVar4, uniqueVar5)
%   knows(uniqueVar3, uniqueVar2)
%   knows(uniqueVar3, a)
%   knows(uniqueVar12, uniqueVar11)
%   knows(b, a)
%   knows(uniqueVar2, a)
%   knows(uniqueVar8, uniqueVar8)

%%%%%  WILL-Produced Tree #2 @ 0:22:55 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C), knows(B, D) )
%   then return 0.6590118129007486;  // std dev = 5,689, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   else if ( knows(B, A) )
%   | then return 0.7157074797467848;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(E, F), knows(F, A) )
%   | | then return 0.6714223643819975;  // std dev = 5,310, 500,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=470 */
%   | | else if ( knows(B, G), knows(G, H) )
%   | | | then if ( knows(G, B) )
%   | | | | then return 0.7104534067097404;  // std dev = 2,223, 460,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=455 */
%   | | | | else return 0.7215802405278022;  // std dev = 0,004, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else if ( knows(I, B), knows(I, J), knows(J, J) )
%   | | | | then return 0.6398115792968928;  // std dev = 1,898, 42,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | | | else if ( knows(K, B), knows(L, K), knows(K, L) )
%   | | | | | then return 0.7234922660454185;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | | | else if ( knows(M, A), knows(N, M), knows(N, N) )
%   | | | | | | then return 0.7518526675222027;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | | else return 0.5635998306480373;  // std dev = 0,890, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


% Clauses:

trusts(A, B, 0.6590118129007486) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.7157074797467848) :- 
     knows(B, A), 
     !. // Clause #2.

trusts(A, B, 0.6714223643819975) :- 
     knows(C, A), 
     knows(C, D), 
     knows(D, A), 
     !. // Clause #3.

trusts(A, B, 0.7104534067097404) :- 
     knows(B, C), 
     knows(C, D), 
     knows(C, B), 
     !. // Clause #4.

trusts(A, B, 0.7215802405278022) :- 
     knows(B, C), 
     knows(C, D), 
     !. // Clause #5.

trusts(A, B, 0.6398115792968928) :- 
     knows(C, B), 
     knows(C, D), 
     knows(D, D), 
     !. // Clause #6.

trusts(A, B, 0.7234922660454185) :- 
     knows(C, B), 
     knows(D, C), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.7518526675222027) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, D), 
     !. // Clause #8.

trusts(A, B, 0.5635998306480373) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.6590118129007486) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, uniqueVar13),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7157074797467848) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.6714223643819975) :-  /* #neg=30 #pos=470 */ 
   knows(uniqueVar14, a),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar15, a),
   !. // Flattened version of clause #3.

flattened_trusts(underscore, a, 0.7104534067097404) :-  /* #neg=5 #pos=455 */ 
   knows(a, uniqueVar16),
   knows(uniqueVar16, underscore),
   knows(uniqueVar16, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7215802405278022) :-  /* #pos=74 */ 
   knows(a, uniqueVar17),
   knows(uniqueVar17, underscore),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.6398115792968928) :-  /* #neg=4 #pos=38 */ 
   knows(uniqueVar18, a),
   knows(uniqueVar18, uniqueVar19),
   knows(uniqueVar19, uniqueVar19),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.7234922660454185) :-  /* #pos=34 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar20, uniqueVar21),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7518526675222027) :-  /* #pos=4 */ 
   knows(uniqueVar22, a),
   knows(uniqueVar23, uniqueVar22),
   knows(uniqueVar23, uniqueVar23),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5635998306480373) :-  /* #neg=1 #pos=5 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(a, uniqueVar16)
%   knows(uniqueVar20, uniqueVar21)
%   knows(uniqueVar18, a)
%   knows(uniqueVar13, uniqueVar13)
%   knows(uniqueVar21, uniqueVar20)
%   knows(uniqueVar20, a)
%   knows(uniqueVar23, uniqueVar23)
%   knows(a, uniqueVar13)
%   knows(uniqueVar16, underscore)
%   knows(uniqueVar17, underscore)
%   knows(uniqueVar18, uniqueVar19)
%   knows(uniqueVar22, a)
%   knows(uniqueVar23, uniqueVar22)
%   knows(uniqueVar14, a)
%   knows(uniqueVar16, a)
%   knows(a, uniqueVar17)
%   knows(uniqueVar19, uniqueVar19)
%   knows(b, a)
%   knows(uniqueVar14, uniqueVar15)
%   knows(uniqueVar15, a)

%%%%%  WILL-Produced Tree #3 @ 0:24:46 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then if ( knows(C, A), knows(C, C) )
%   | then return 0.5750720241164343;  // std dev = 0,997, 106,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( knows(A, D), knows(B, D) )
%   | | then return 0.5559771937800274;  // std dev = 1,387, 298,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=296 */
%   | | else if ( knows(A, E), knows(E, B) )
%   | | | then return 0.5636924632388047;  // std dev = 0,056, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else if ( knows(B, F), knows(F, A) )
%   | | | | then return 0.49885535153008814;  // std dev = 0,941, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return 0.5461680672474686;  // std dev = 0,118, 144,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=142 */
%   else if ( knows(G, A), knows(G, H), knows(H, A) )
%   | then return 0.5040972834067229;  // std dev = 7,359, 738,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=679 */
%   | else if ( knows(B, I), knows(I, J), knows(J, J) )
%   | | then return 0.5560144937054833;  // std dev = 1,741, 446,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=443 */
%   | | else if ( knows(K, B), knows(K, L), knows(L, L) )
%   | | | then return 0.5128930724459478;  // std dev = 2,714, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | | else return 0.5539581671317146;  // std dev = 0,089, 110,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=109 */


% Clauses:

trusts(A, B, 0.5750720241164343) :- 
     knows(B, A), 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #1.

trusts(A, B, 0.5559771937800274) :- 
     knows(B, A), 
     knows(A, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.5636924632388047) :- 
     knows(B, A), 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #3.

trusts(A, B, 0.49885535153008814) :- 
     knows(B, A), 
     knows(B, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.5461680672474686) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.5040972834067229) :- 
     knows(C, A), 
     knows(C, D), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.5560144937054833) :- 
     knows(B, C), 
     knows(C, D), 
     knows(D, D), 
     !. // Clause #7.

trusts(A, B, 0.5128930724459478) :- 
     knows(C, B), 
     knows(C, D), 
     knows(D, D), 
     !. // Clause #8.

trusts(A, B, 0.5539581671317146) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5750720241164343) :-  /* #neg=1 #pos=105 */ 
   knows(b, a),
   knows(uniqueVar24, a),
   knows(uniqueVar24, uniqueVar24),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.5559771937800274) :-  /* #neg=2 #pos=296 */ 
   knows(b, a),
   knows(a, uniqueVar25),
   knows(b, uniqueVar25),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.5636924632388047) :-  /* #pos=20 */ 
   knows(b, a),
   knows(a, uniqueVar26),
   knows(uniqueVar26, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.49885535153008814) :-  /* #neg=1 #pos=15 */ 
   knows(b, a),
   knows(b, uniqueVar27),
   knows(uniqueVar27, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.5461680672474686) :-  /* #neg=2 #pos=142 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5040972834067229) :-  /* #neg=59 #pos=679 */ 
   knows(uniqueVar28, a),
   knows(uniqueVar28, uniqueVar29),
   knows(uniqueVar29, a),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.5560144937054833) :-  /* #neg=3 #pos=443 */ 
   knows(a, uniqueVar30),
   knows(uniqueVar30, uniqueVar31),
   knows(uniqueVar31, uniqueVar31),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.5128930724459478) :-  /* #neg=8 #pos=122 */ 
   knows(uniqueVar32, a),
   knows(uniqueVar32, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5539581671317146) :-  /* #neg=1 #pos=109 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar29, a)
%   knows(uniqueVar33, uniqueVar33)
%   knows(uniqueVar32, a)
%   knows(uniqueVar27, a)
%   knows(uniqueVar26, b)
%   knows(a, uniqueVar26)
%   knows(a, uniqueVar30)
%   knows(uniqueVar28, uniqueVar29)
%   knows(a, uniqueVar25)
%   knows(b, uniqueVar25)
%   knows(uniqueVar31, uniqueVar31)
%   knows(uniqueVar30, uniqueVar31)
%   knows(uniqueVar24, a)
%   knows(b, uniqueVar27)
%   knows(uniqueVar24, uniqueVar24)
%   knows(uniqueVar28, a)
%   knows(b, a)
%   knows(uniqueVar32, uniqueVar33)

%%%%%  WILL-Produced Tree #4 @ 0:26:51 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C), knows(B, D) )
%   then return 0.381490843383233;  // std dev = 5,658, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   else if ( knows(E, B), knows(E, F), knows(B, F) )
%   | then return 0.4115087721312649;  // std dev = 4,887, 1.210,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.185 */
%   | else if ( knows(B, G), knows(H, G), knows(B, H) )
%   | | then return 0.3111059309701787;  // std dev = 1,848, 32,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   | | else if ( knows(I, B), knows(I, I) )
%   | | | then if ( knows(I, A) )
%   | | | | then return 0.4566916507208916;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.2115564551518931;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else if ( knows(A, J), knows(J, K), knows(K, K) )
%   | | | | then return 0.38905404508197516;  // std dev = 2,897, 154,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=145 */
%   | | | | else if ( knows(L, B), knows(M, L), knows(M, B) )
%   | | | | | then return 0.451330756431068;  // std dev = 0,131, 42,000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | | | else if ( knows(B, N) )
%   | | | | | | then return 0.42761988591049754;  // std dev = 0,109, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | | | | else return 0.3871917394532496;  // std dev = 1,316, 36,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */


% Clauses:

trusts(A, B, 0.381490843383233) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.4115087721312649) :- 
     knows(C, B), 
     knows(C, D), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.3111059309701787) :- 
     knows(B, C), 
     knows(D, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.4566916507208916) :- 
     knows(C, B), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.2115564551518931) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.38905404508197516) :- 
     knows(A, C), 
     knows(C, D), 
     knows(D, D), 
     !. // Clause #6.

trusts(A, B, 0.451330756431068) :- 
     knows(C, B), 
     knows(D, C), 
     knows(D, B), 
     !. // Clause #7.

trusts(A, B, 0.42761988591049754) :- 
     knows(B, C), 
     !. // Clause #8.

trusts(A, B, 0.3871917394532496) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.381490843383233) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(underscore, a, 0.4115087721312649) :-  /* #neg=25 #pos=1.185 */ 
   knows(uniqueVar35, a),
   knows(uniqueVar35, uniqueVar36),
   knows(a, uniqueVar36),
   !. // Flattened version of clause #2.

flattened_trusts(underscore, a, 0.3111059309701787) :-  /* #neg=4 #pos=28 */ 
   knows(a, uniqueVar37),
   knows(uniqueVar38, uniqueVar37),
   knows(a, uniqueVar38),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.4566916507208916) :-  /* #pos=4 */ 
   knows(uniqueVar39, b),
   knows(uniqueVar39, uniqueVar39),
   knows(uniqueVar39, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.2115564551518931) :-  /* #neg=2 #pos=6 */ 
   knows(uniqueVar40, a),
   knows(uniqueVar40, uniqueVar40),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.38905404508197516) :-  /* #neg=9 #pos=145 */ 
   knows(a, uniqueVar41),
   knows(uniqueVar41, uniqueVar42),
   knows(uniqueVar42, uniqueVar42),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.451330756431068) :-  /* #pos=42 */ 
   knows(uniqueVar43, a),
   knows(uniqueVar44, uniqueVar43),
   knows(uniqueVar44, a),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.42761988591049754) :-  /* #pos=58 */ 
   knows(a, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.3871917394532496) :-  /* #neg=2 #pos=34 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(a, uniqueVar36)
%   knows(a, uniqueVar41)
%   knows(a, underscore)
%   knows(uniqueVar40, uniqueVar40)
%   knows(uniqueVar44, uniqueVar43)
%   knows(a, uniqueVar37)
%   knows(uniqueVar41, uniqueVar42)
%   knows(a, uniqueVar34)
%   knows(a, uniqueVar38)
%   knows(uniqueVar39, a)
%   knows(uniqueVar40, a)
%   knows(uniqueVar35, a)
%   knows(uniqueVar39, b)
%   knows(uniqueVar43, a)
%   knows(uniqueVar39, uniqueVar39)
%   knows(uniqueVar38, uniqueVar37)
%   knows(uniqueVar44, a)
%   knows(uniqueVar34, uniqueVar34)
%   knows(uniqueVar35, uniqueVar36)
%   knows(uniqueVar42, uniqueVar42)

%%%%%  WILL-Produced Tree #5 @ 0:29:09 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then if ( knows(C, A), knows(C, C) )
%   | then return 0.340656916627698;  // std dev = 0,998, 106,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else return 0.3197846799836594;  // std dev = 0,100, 478,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=473 */
%   else if ( knows(A, D), knows(D, D), knows(B, E) )
%   | then return 0.2671474640965332;  // std dev = 5,266, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | else if ( knows(F, A), knows(G, F), knows(G, A) )
%   | | then return 0.2993132037087737;  // std dev = 5,293, 500,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=470 */
%   | | else if ( knows(B, H), knows(H, I) )
%   | | | then return 0.3177720964273195;  // std dev = 0,096, 534,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=529 */
%   | | | else if ( knows(B, J) )
%   | | | | then return 0.20664070184540093;  // std dev = 0,904, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else if ( knows(A, K), knows(A, L), knows(K, L) )
%   | | | | | then return 0.3270529711030251;  // std dev = 0,988, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | | | else if ( knows(A, M), knows(N, B), knows(M, N) )
%   | | | | | | then return 0.3361349458418813;  // std dev = 0,047, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | | | | else return 0.24755304826620336;  // std dev = 1,562, 26,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */


% Clauses:

trusts(A, B, 0.340656916627698) :- 
     knows(B, A), 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #1.

trusts(A, B, 0.3197846799836594) :- 
     knows(B, A), 
     !. // Clause #2.

trusts(A, B, 0.2671474640965332) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.2993132037087737) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #4.

trusts(A, B, 0.3177720964273195) :- 
     knows(B, C), 
     knows(C, D), 
     !. // Clause #5.

trusts(A, B, 0.20664070184540093) :- 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.3270529711030251) :- 
     knows(A, C), 
     knows(A, D), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.3361349458418813) :- 
     knows(A, C), 
     knows(D, B), 
     knows(C, D), 
     !. // Clause #8.

trusts(A, B, 0.24755304826620336) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.340656916627698) :-  /* #neg=1 #pos=105 */ 
   knows(b, a),
   knows(uniqueVar45, a),
   knows(uniqueVar45, uniqueVar45),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.3197846799836594) :-  /* #neg=5 #pos=473 */ 
   knows(b, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.2671474640965332) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar46),
   knows(uniqueVar46, uniqueVar46),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.2993132037087737) :-  /* #neg=30 #pos=470 */ 
   knows(uniqueVar47, a),
   knows(uniqueVar48, uniqueVar47),
   knows(uniqueVar48, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.3177720964273195) :-  /* #neg=5 #pos=529 */ 
   knows(a, uniqueVar49),
   knows(uniqueVar49, underscore),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.20664070184540093) :-  /* #neg=1 #pos=5 */ 
   knows(a, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.3270529711030251) :-  /* #neg=1 #pos=39 */ 
   knows(a, uniqueVar50),
   knows(a, uniqueVar51),
   knows(uniqueVar50, uniqueVar51),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.3361349458418813) :-  /* #pos=14 */ 
   knows(a, uniqueVar52),
   knows(uniqueVar53, b),
   knows(uniqueVar52, uniqueVar53),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.24755304826620336) :-  /* #neg=3 #pos=23 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(uniqueVar48, uniqueVar47)
%   knows(a, underscore)
%   knows(a, uniqueVar50)
%   knows(uniqueVar45, a)
%   knows(a, uniqueVar46)
%   knows(uniqueVar50, uniqueVar51)
%   knows(uniqueVar46, uniqueVar46)
%   knows(uniqueVar52, uniqueVar53)
%   knows(uniqueVar53, b)
%   knows(uniqueVar48, a)
%   knows(uniqueVar47, a)
%   knows(a, uniqueVar49)
%   knows(uniqueVar45, uniqueVar45)
%   knows(uniqueVar49, underscore)
%   knows(a, uniqueVar52)
%   knows(b, a)
%   knows(a, uniqueVar51)

%%%%%  WILL-Produced Tree #6 @ 0:31:30 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.25588099496459515;  // std dev = 0,100, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.22743740743129431;  // std dev = 2,533, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.12846787402009205;  // std dev = 2,711, 52,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=43 */
%   | | | else return 0.0660816727671914;  // std dev = 0,844, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( knows(E, A), knows(F, E), knows(F, A) )
%   | | then return 0.2271844149104435;  // std dev = 6,227, 598,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=556 */
%   | | else if ( knows(B, G), knows(G, H), knows(H, H) )
%   | | | then return 0.25777039736790497;  // std dev = 1,754, 446,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=443 */
%   | | | else if ( knows(I, B), knows(I, I) )
%   | | | | then if ( knows(J, A) )
%   | | | | | then return 0.1766272813558957;  // std dev = 0,958, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | | else return 0.12502025895032737;  // std dev = 0,354, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | | else return 0.24890848092553366;  // std dev = 0,159, 218,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=212 */


% Clauses:

trusts(A, B, 0.25588099496459515) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.22743740743129431) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, 0.12846787402009205) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.0660816727671914) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.2271844149104435) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #5.

trusts(A, B, 0.25777039736790497) :- 
     knows(B, C), 
     knows(C, D), 
     knows(D, D), 
     !. // Clause #6.

trusts(A, B, 0.1766272813558957) :- 
     knows(C, B), 
     knows(C, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.12502025895032737) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.24890848092553366) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.25588099496459515) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.22743740743129431) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar54, a),
   knows(uniqueVar54, uniqueVar54),
   knows(a, uniqueVar54),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.12846787402009205) :-  /* #neg=9 #pos=43 */ 
   knows(uniqueVar55, a),
   knows(uniqueVar55, uniqueVar55),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.0660816727671914) :-  /* #neg=1 #pos=3 */ 
   knows(uniqueVar56, a),
   knows(uniqueVar56, uniqueVar56),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.2271844149104435) :-  /* #neg=42 #pos=556 */ 
   knows(uniqueVar57, a),
   knows(uniqueVar58, uniqueVar57),
   knows(uniqueVar58, a),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.25777039736790497) :-  /* #neg=3 #pos=443 */ 
   knows(a, uniqueVar59),
   knows(uniqueVar59, uniqueVar60),
   knows(uniqueVar60, uniqueVar60),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.1766272813558957) :-  /* #neg=1 #pos=9 */ 
   knows(uniqueVar61, b),
   knows(uniqueVar61, uniqueVar61),
   knows(underscore, a),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.12502025895032737) :-  /* #neg=2 #pos=10 */ 
   knows(uniqueVar62, a),
   knows(uniqueVar62, uniqueVar62),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.24890848092553366) :-  /* #neg=6 #pos=212 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(uniqueVar61, uniqueVar61)
%   knows(uniqueVar54, a)
%   knows(uniqueVar58, uniqueVar57)
%   knows(uniqueVar54, uniqueVar54)
%   knows(uniqueVar55, a)
%   knows(uniqueVar57, a)
%   knows(uniqueVar56, a)
%   knows(uniqueVar62, a)
%   knows(uniqueVar60, uniqueVar60)
%   knows(uniqueVar58, a)
%   knows(uniqueVar62, uniqueVar62)
%   knows(uniqueVar55, uniqueVar55)
%   knows(uniqueVar56, uniqueVar56)
%   knows(uniqueVar61, b)
%   knows(a, uniqueVar54)
%   knows(uniqueVar59, uniqueVar60)
%   knows(underscore, a)
%   knows(b, a)
%   knows(a, uniqueVar59)

//// Loaded checkpoint from data/trust/train/models/bRDNs/trusts.model.ckpt at 0:32:37 10/21/22.
//// Number of trees loaded:6

//// Also loaded 110 flattened literals from data/trust/train/models/bRDNs/trusts.model.ckptLits

//// Loaded checkpoint from data/trust/train/models/bRDNs/trusts.model.ckpt at 0:34:24 10/21/22.
//// Number of trees loaded:6

//// Also loaded 110 flattened literals from data/trust/train/models/bRDNs/trusts.model.ckptLits

%%%%%  WILL-Produced Tree #7 @ 0:34:35 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C), knows(B, D) )
%   then return 0.1785019630229915;  // std dev = 5,622, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   else if ( knows(E, A), knows(A, E), knows(E, B) )
%   | then return 0.21373396046404647;  // std dev = 2,172, 356,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=351 */
%   | else if ( knows(B, F), knows(A, G), knows(G, B) )
%   | | then return 0.17798534006063135;  // std dev = 3,204, 222,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=211 */
%   | | else if ( knows(H, B), knows(H, I), knows(B, I) )
%   | | | then return 0.20752239808323666;  // std dev = 3,085, 656,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=646 */
%   | | | else if ( knows(B, J), knows(K, J), knows(B, K) )
%   | | | | then return 0.1158052167701327;  // std dev = 1,847, 30,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | | | else if ( knows(B, L), knows(A, M), knows(M, A) )
%   | | | | | then return 0.17523548271003883;  // std dev = 2,131, 96,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=91 */
%   | | | | | else if ( knows(N, B), knows(N, P), knows(P, B) )
%   | | | | | | then return 0.22684691193178222;  // std dev = 0,918, 58,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | | | | else return 0.1926727715406184;  // std dev = 2,351, 126,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=120 */


% Clauses:

trusts(A, B, 0.1785019630229915) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.21373396046404647) :- 
     knows(C, A), 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, 0.17798534006063135) :- 
     knows(B, C), 
     knows(A, D), 
     knows(D, B), 
     !. // Clause #3.

trusts(A, B, 0.20752239808323666) :- 
     knows(C, B), 
     knows(C, D), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.1158052167701327) :- 
     knows(B, C), 
     knows(D, C), 
     knows(B, D), 
     !. // Clause #5.

trusts(A, B, 0.17523548271003883) :- 
     knows(B, C), 
     knows(A, D), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.22684691193178222) :- 
     knows(C, B), 
     knows(C, D), 
     knows(D, B), 
     !. // Clause #7.

trusts(A, B, 0.1926727715406184) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1785019630229915) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar63),
   knows(uniqueVar63, uniqueVar63),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.21373396046404647) :-  /* #neg=5 #pos=351 */ 
   knows(uniqueVar64, a),
   knows(a, uniqueVar64),
   knows(uniqueVar64, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.17798534006063135) :-  /* #neg=11 #pos=211 */ 
   knows(b, underscore),
   knows(a, uniqueVar65),
   knows(uniqueVar65, b),
   !. // Flattened version of clause #3.

flattened_trusts(underscore, a, 0.20752239808323666) :-  /* #neg=10 #pos=646 */ 
   knows(uniqueVar66, a),
   knows(uniqueVar66, uniqueVar67),
   knows(a, uniqueVar67),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.1158052167701327) :-  /* #neg=4 #pos=26 */ 
   knows(a, uniqueVar68),
   knows(uniqueVar69, uniqueVar68),
   knows(a, uniqueVar69),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.17523548271003883) :-  /* #neg=5 #pos=91 */ 
   knows(b, underscore),
   knows(a, uniqueVar70),
   knows(uniqueVar70, a),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.22684691193178222) :-  /* #neg=1 #pos=57 */ 
   knows(uniqueVar71, a),
   knows(uniqueVar71, uniqueVar72),
   knows(uniqueVar72, a),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, underscore, 0.1926727715406184) :-  /* #neg=6 #pos=120 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(a, uniqueVar69)
%   knows(a, uniqueVar65)
%   knows(uniqueVar63, uniqueVar63)
%   knows(uniqueVar69, uniqueVar68)
%   knows(uniqueVar71, uniqueVar72)
%   knows(uniqueVar64, a)
%   knows(a, uniqueVar70)
%   knows(uniqueVar70, a)
%   knows(uniqueVar71, a)
%   knows(uniqueVar65, b)
%   knows(uniqueVar66, a)
%   knows(uniqueVar66, uniqueVar67)
%   knows(uniqueVar72, a)
%   knows(a, uniqueVar67)
%   knows(a, uniqueVar64)
%   knows(uniqueVar64, b)
%   knows(a, uniqueVar63)
%   knows(a, uniqueVar68)

%%%%%  WILL-Produced Tree #7 @ 0:34:43 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.20899821344947078;  // std dev = 0,100, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(B, B) )
%   | | then return -0.02352085388535663;  // std dev = 1,447, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( knows(A, C) )
%   | | | then return 0.18924531720222112;  // std dev = 2,355, 80,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=74 */
%   | | | else if ( knows(B, C) )
%   | | | | then return 0.27538094806292324;  // std dev = 0,018, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.10241524222004482;  // std dev = 2,547, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, B), knows(B, D) )
%   | | then return 0.19858942584778153;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.10531242682657319;  // std dev = 2,595, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.18404022190732;  // std dev = 2,113, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.20446851104311928;  // std dev = 0,186, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.20899821344947078) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, -0.02352085388535663) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #2.

trusts(A, B, 0.18924531720222112) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #3.

trusts(A, B, 0.27538094806292324) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #4.

trusts(A, B, 0.10241524222004482) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.19858942584778153) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.10531242682657319) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.18404022190732) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.20446851104311928) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.20899821344947078) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, -0.02352085388535663) :-  /* #neg=3 #pos=7 */ 
   knows(uniqueVar1, a),
   knows(uniqueVar1, uniqueVar1),
   knows(b, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.18924531720222112) :-  /* #neg=6 #pos=74 */ 
   knows(uniqueVar2, a),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar2),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.27538094806292324) :-  /* #pos=4 */ 
   knows(uniqueVar3, a),
   knows(uniqueVar3, uniqueVar3),
   knows(b, uniqueVar3),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.10241524222004482) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar4, a),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.19858942584778153) :-  /* #neg=34 #pos=916 */ 
   knows(uniqueVar5, a),
   knows(a, uniqueVar5),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.10531242682657319) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar6),
   knows(uniqueVar7, a),
   knows(uniqueVar7, uniqueVar6),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.18404022190732) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.20446851104311928) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar1, a)
%   knows(b, uniqueVar6)
%   knows(a, uniqueVar2)
%   knows(b, uniqueVar3)
%   knows(uniqueVar4, uniqueVar4)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar2, uniqueVar2)
%   knows(b, underscore)
%   knows(b, a)
%   knows(uniqueVar7, uniqueVar6)
%   knows(uniqueVar2, a)
%   knows(uniqueVar5, a)
%   knows(b, b)
%   knows(uniqueVar7, a)
%   knows(uniqueVar4, a)
%   knows(a, uniqueVar5)
%   knows(uniqueVar1, uniqueVar1)
%   knows(uniqueVar3, a)
%   knows(underscore, a)

%%%%%  WILL-Produced Tree #8 @ 0:34:55 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.17513719847627987;  // std dev = 1,967, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.1283514480503232;  // std dev = 5,216, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.2245821192695396;  // std dev = 0,045, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.166691178094621;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, A), knows(E, B) )
%   | then return 0.17681693964727493;  // std dev = 0,134, 524,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=514 */
%   | else if ( knows(F, A), knows(G, F) )
%   | | then if ( knows(B, G) )
%   | | | then return 0.16903763130810082;  // std dev = 2,758, 362,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=354 */
%   | | | else if ( knows(A, G) )
%   | | | | then return 0.1603487994721087;  // std dev = 2,887, 182,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=173 */
%   | | | | else return 0.1353032557884252;  // std dev = 3,152, 192,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=181 */
%   | | else return 0.17613266101556385;  // std dev = 0,105, 258,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=255 */


% Clauses:

trusts(A, B, 0.17513719847627987) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1283514480503232) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.2245821192695396) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.166691178094621) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.17681693964727493) :- 
     knows(C, A), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.16903763130810082) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, D), 
     !. // Clause #6.

trusts(A, B, 0.1603487994721087) :- 
     knows(C, A), 
     knows(D, C), 
     knows(A, D), 
     !. // Clause #7.

trusts(A, B, 0.1353032557884252) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.17613266101556385) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.17513719847627987) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar8),
   knows(uniqueVar8, uniqueVar8),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.1283514480503232) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.2245821192695396) :-  /* #pos=6 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar10, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.166691178094621) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.17681693964727493) :-  /* #neg=10 #pos=514 */ 
   knows(uniqueVar12, a),
   knows(uniqueVar12, b),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.16903763130810082) :-  /* #neg=8 #pos=354 */ 
   knows(uniqueVar13, a),
   knows(uniqueVar14, uniqueVar13),
   knows(b, uniqueVar14),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.1603487994721087) :-  /* #neg=9 #pos=173 */ 
   knows(uniqueVar15, a),
   knows(uniqueVar16, uniqueVar15),
   knows(a, uniqueVar16),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.1353032557884252) :-  /* #neg=11 #pos=181 */ 
   knows(uniqueVar17, a),
   knows(underscore, uniqueVar17),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.17613266101556385) :-  /* #neg=3 #pos=255 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar10, uniqueVar10)
%   knows(uniqueVar15, a)
%   knows(a, uniqueVar10)
%   knows(a, uniqueVar9)
%   knows(uniqueVar14, uniqueVar13)
%   knows(uniqueVar9, uniqueVar9)
%   knows(b, underscore)
%   knows(b, a)
%   knows(uniqueVar10, a)
%   knows(a, uniqueVar8)
%   knows(underscore, uniqueVar17)
%   knows(uniqueVar11, uniqueVar11)
%   knows(b, uniqueVar14)
%   knows(uniqueVar17, a)
%   knows(uniqueVar13, a)
%   knows(a, uniqueVar16)
%   knows(uniqueVar12, a)
%   knows(uniqueVar16, uniqueVar15)
%   knows(uniqueVar8, uniqueVar8)
%   knows(uniqueVar12, b)
%   knows(a, uniqueVar11)

%%%%%  WILL-Produced Tree #9 @ 0:35:05 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.14856616593996677;  // std dev = 1,968, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.10641125655209822;  // std dev = 5,220, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.18795695353203365;  // std dev = 0,039, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13977112476568457;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(B, E) )
%   | then return 0.14578027958646436;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, B), knows(F, F) )
%   | | then if ( knows(B, G) )
%   | | | then return 0.19283219819811676;  // std dev = 0,030, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08715873102269667;  // std dev = 1,131, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( knows(H, A), knows(I, H) )
%   | | | then return 0.1255641594247059;  // std dev = 0,233, 234,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=220 */
%   | | | else return 0.17144148250971758;  // std dev = 0,127, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */


% Clauses:

trusts(A, B, 0.14856616593996677) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.10641125655209822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.18795695353203365) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.13977112476568457) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.14578027958646436) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, 0.19283219819811676) :- 
     knows(C, B), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #6.

trusts(A, B, -0.08715873102269667) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #7.

trusts(A, B, 0.1255641594247059) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.17144148250971758) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.14856616593996677) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar18),
   knows(uniqueVar18, uniqueVar18),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.10641125655209822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar19),
   knows(uniqueVar19, uniqueVar19),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.18795695353203365) :-  /* #pos=6 */ 
   knows(a, uniqueVar20),
   knows(uniqueVar20, uniqueVar20),
   knows(uniqueVar20, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.13977112476568457) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar21),
   knows(uniqueVar21, uniqueVar21),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.14578027958646436) :-  /* #neg=25 #pos=1.197 */ 
   knows(uniqueVar22, a),
   knows(a, uniqueVar22),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.19283219819811676) :-  /* #pos=4 */ 
   knows(uniqueVar23, a),
   knows(uniqueVar23, uniqueVar23),
   knows(a, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, -0.08715873102269667) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar24, a),
   knows(uniqueVar24, uniqueVar24),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.1255641594247059) :-  /* #neg=14 #pos=220 */ 
   knows(uniqueVar25, a),
   knows(underscore, uniqueVar25),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.17144148250971758) :-  /* #pos=52 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar20)
%   knows(uniqueVar18, uniqueVar18)
%   knows(a, uniqueVar21)
%   knows(uniqueVar23, uniqueVar23)
%   knows(uniqueVar21, uniqueVar21)
%   knows(uniqueVar22, a)
%   knows(uniqueVar20, a)
%   knows(uniqueVar19, uniqueVar19)
%   knows(b, underscore)
%   knows(a, uniqueVar18)
%   knows(b, a)
%   knows(a, uniqueVar19)
%   knows(uniqueVar23, a)
%   knows(uniqueVar24, uniqueVar24)
%   knows(uniqueVar20, uniqueVar20)
%   knows(uniqueVar24, a)
%   knows(underscore, uniqueVar25)
%   knows(a, underscore)
%   knows(uniqueVar25, a)
%   knows(a, uniqueVar22)

%%%%%  WILL-Produced Tree #10 @ 0:35:15 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.12827828502289473;  // std dev = 1,968, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.08941829531431467;  // std dev = 5,223, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.16097383433431192;  // std dev = 0,035, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.11923215808635068;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(B, E) )
%   | then return 0.12656969935052925;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(F, F) )
%   | | then return 0.046267428022347394;  // std dev = 0,363, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( knows(B, G), knows(H, A) )
%   | | | then if ( knows(G, I) )
%   | | | | then return 0.10285074957820592;  // std dev = 2,509, 112,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=105 */
%   | | | | else return -0.06773606309555275;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1266550390332841;  // std dev = 0,180, 168,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=162 */


% Clauses:

trusts(A, B, 0.12827828502289473) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.08941829531431467) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.16097383433431192) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.11923215808635068) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.12656969935052925) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, 0.046267428022347394) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.10285074957820592) :- 
     knows(B, C), 
     knows(D, A), 
     knows(C, E), 
     !. // Clause #7.

trusts(A, B, -0.06773606309555275) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.1266550390332841) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.12827828502289473) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar26),
   knows(uniqueVar26, uniqueVar26),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.08941829531431467) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar27),
   knows(uniqueVar27, uniqueVar27),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.16097383433431192) :-  /* #pos=6 */ 
   knows(a, uniqueVar28),
   knows(uniqueVar28, uniqueVar28),
   knows(uniqueVar28, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.11923215808635068) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar29),
   knows(uniqueVar29, uniqueVar29),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.12656969935052925) :-  /* #neg=25 #pos=1.197 */ 
   knows(uniqueVar30, a),
   knows(a, uniqueVar30),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.046267428022347394) :-  /* #neg=2 #pos=10 */ 
   knows(uniqueVar31, a),
   knows(uniqueVar31, uniqueVar31),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.10285074957820592) :-  /* #neg=7 #pos=105 */ 
   knows(b, uniqueVar32),
   knows(underscore, a),
   knows(uniqueVar32, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, -0.06773606309555275) :-  /* #neg=1 #pos=3 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1266550390332841) :-  /* #neg=6 #pos=162 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar26, uniqueVar26)
%   knows(uniqueVar32, underscore)
%   knows(a, uniqueVar28)
%   knows(uniqueVar28, a)
%   knows(b, underscore)
%   knows(a, uniqueVar30)
%   knows(b, a)
%   knows(uniqueVar27, uniqueVar27)
%   knows(a, uniqueVar26)
%   knows(uniqueVar29, uniqueVar29)
%   knows(b, uniqueVar32)
%   knows(uniqueVar31, a)
%   knows(a, uniqueVar27)
%   knows(uniqueVar31, uniqueVar31)
%   knows(uniqueVar28, uniqueVar28)
%   knows(a, uniqueVar29)
%   knows(uniqueVar30, a)
%   knows(underscore, a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 159, [
   knows(uniqueVar44, uniqueVar43),
   knows(uniqueVar16, a),
   knows(a, uniqueVar20),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar56, a),
   knows(uniqueVar34, uniqueVar34),
   knows(a, uniqueVar34),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar2, uniqueVar2),
   knows(uniqueVar6, underscore),
   knows(b, a),
   knows(uniqueVar55, uniqueVar55),
   knows(b, uniqueVar14),
   knows(uniqueVar55, a),
   knows(uniqueVar16, underscore),
   knows(uniqueVar24, uniqueVar24),
   knows(uniqueVar24, a),
   knows(uniqueVar18, uniqueVar19),
   knows(uniqueVar48, uniqueVar47),
   knows(uniqueVar45, uniqueVar45),
   knows(uniqueVar7, a),
   knows(uniqueVar50, uniqueVar51),
   knows(uniqueVar12, a),
   knows(uniqueVar44, a),
   knows(uniqueVar39, b),
   knows(uniqueVar12, uniqueVar11),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar22, a),
   knows(uniqueVar3, uniqueVar2),
   knows(a, uniqueVar13),
   knows(uniqueVar21, uniqueVar20),
   knows(b, underscore),
   knows(uniqueVar54, a),
   knows(uniqueVar38, uniqueVar37),
   knows(a, uniqueVar41),
   knows(uniqueVar17, a),
   knows(uniqueVar45, a),
   knows(uniqueVar5, a),
   knows(a, uniqueVar27),
   knows(uniqueVar16, uniqueVar15),
   knows(a, uniqueVar5),
   knows(uniqueVar53, b),
   knows(uniqueVar13, uniqueVar13),
   knows(a, uniqueVar11),
   knows(uniqueVar41, uniqueVar42),
   knows(uniqueVar28, a),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar19, uniqueVar19),
   knows(a, uniqueVar30),
   knows(a, uniqueVar18),
   knows(uniqueVar47, a),
   knows(uniqueVar59, uniqueVar60),
   knows(uniqueVar14, a),
   knows(uniqueVar61, uniqueVar61),
   knows(uniqueVar20, uniqueVar21),
   knows(uniqueVar35, uniqueVar36),
   knows(uniqueVar13, a),
   knows(a, uniqueVar17),
   knows(a, uniqueVar25),
   knows(uniqueVar4, a),
   knows(a, uniqueVar29),
   knows(uniqueVar54, uniqueVar54),
   knows(uniqueVar32, uniqueVar33),
   knows(uniqueVar11, uniqueVar12),
   knows(uniqueVar62, uniqueVar62),
   knows(uniqueVar32, underscore),
   knows(a, uniqueVar28),
   knows(a, uniqueVar9),
   knows(a, uniqueVar54),
   knows(uniqueVar27, a),
   knows(uniqueVar52, uniqueVar53),
   knows(uniqueVar8, uniqueVar7),
   knows(uniqueVar10, a),
   knows(uniqueVar35, a),
   knows(underscore, uniqueVar17),
   knows(uniqueVar49, underscore),
   knows(uniqueVar46, uniqueVar46),
   knows(underscore, uniqueVar25),
   knows(b, uniqueVar25),
   knows(a, underscore),
   knows(uniqueVar40, a),
   knows(uniqueVar17, underscore),
   knows(b, uniqueVar4),
   knows(a, uniqueVar1),
   knows(a, uniqueVar46),
   knows(uniqueVar18, a),
   knows(uniqueVar26, uniqueVar26),
   knows(uniqueVar23, uniqueVar23),
   knows(uniqueVar28, uniqueVar29),
   knows(a, uniqueVar6),
   knows(uniqueVar61, b),
   knows(uniqueVar14, uniqueVar13),
   knows(uniqueVar20, a),
   knows(uniqueVar43, a),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar57, a),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar4, uniqueVar5),
   knows(uniqueVar42, uniqueVar42),
   knows(uniqueVar20, uniqueVar20),
   knows(uniqueVar9, a),
   knows(a, uniqueVar16),
   knows(b, b),
   knows(a, uniqueVar59),
   knows(uniqueVar12, b),
   knows(a, uniqueVar49),
   knows(uniqueVar3, a),
   knows(underscore, a),
   knows(uniqueVar39, a),
   knows(b, uniqueVar6),
   knows(uniqueVar10, uniqueVar9),
   knows(uniqueVar11, a),
   knows(uniqueVar21, uniqueVar21),
   knows(uniqueVar58, uniqueVar57),
   knows(uniqueVar32, a),
   knows(uniqueVar9, uniqueVar9),
   knows(uniqueVar7, uniqueVar6),
   knows(a, uniqueVar19),
   knows(uniqueVar26, b),
   knows(a, uniqueVar8),
   knows(uniqueVar29, uniqueVar29),
   knows(a, uniqueVar37),
   knows(uniqueVar33, uniqueVar33),
   knows(uniqueVar8, uniqueVar8),
   knows(a, uniqueVar51),
   knows(uniqueVar48, a),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar1, a),
   knows(a, uniqueVar50),
   knows(a, uniqueVar2),
   knows(uniqueVar15, a),
   knows(b, uniqueVar3),
   knows(a, uniqueVar10),
   knows(a, uniqueVar21),
   knows(uniqueVar39, uniqueVar39),
   knows(uniqueVar23, a),
   knows(uniqueVar58, a),
   knows(uniqueVar30, uniqueVar31),
   knows(uniqueVar29, a),
   knows(a, uniqueVar52),
   knows(uniqueVar2, a),
   knows(a, uniqueVar36),
   knows(uniqueVar25, a),
   knows(a, uniqueVar22),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar30, a),
   knows(uniqueVar62, a),
   knows(b, uniqueVar27),
   knows(a, uniqueVar38),
   knows(uniqueVar40, uniqueVar40),
   knows(a, uniqueVar26),
   knows(uniqueVar23, uniqueVar22),
   knows(b, uniqueVar32),
   knows(uniqueVar31, a),
   knows(uniqueVar9, uniqueVar10),
   knows(uniqueVar31, uniqueVar31),
   knows(uniqueVar28, uniqueVar28)]).

%%%%%  WILL-Produced Tree #8 @ 0:37:05 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.1775081505951455;  // std dev = 0,100, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, D), knows(D, A) )
%   | then return 0.1407296365737003;  // std dev = 7,316, 738,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=679 */
%   | else if ( knows(B, E), knows(F, A), knows(A, E) )
%   | | then return 0.1917402215929737;  // std dev = 0,174, 128,000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | | else if ( knows(G, B), knows(G, G), knows(A, G) )
%   | | | then return 0.060889450738871254;  // std dev = 0,890, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else if ( knows(B, H), knows(H, I) )
%   | | | | then if ( knows(H, H) )
%   | | | | | then return 0.1619314354293577;  // std dev = 1,400, 96,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | | | | else return 0.1763172566225984;  // std dev = 0,103, 370,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=366 */
%   | | | | else if ( knows(J, A), knows(K, J), knows(J, K) )
%   | | | | | then return 0.13060643569945807;  // std dev = 1,862, 56,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | | | | else if ( knows(A, L), knows(L, M) )
%   | | | | | | then return 0.2130637232195589;  // std dev = 0,087, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | | | | else return 0.12498159969038998;  // std dev = 0,886, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */


% Clauses:

trusts(A, B, 0.1775081505951455) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1407296365737003) :- 
     knows(C, A), 
     knows(C, D), 
     knows(D, A), 
     !. // Clause #2.

trusts(A, B, 0.1917402215929737) :- 
     knows(B, C), 
     knows(D, A), 
     knows(A, C), 
     !. // Clause #3.

trusts(A, B, 0.060889450738871254) :- 
     knows(C, B), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.1619314354293577) :- 
     knows(B, C), 
     knows(C, D), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.1763172566225984) :- 
     knows(B, C), 
     knows(C, D), 
     !. // Clause #6.

trusts(A, B, 0.13060643569945807) :- 
     knows(C, A), 
     knows(D, C), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.2130637232195589) :- 
     knows(A, C), 
     knows(C, D), 
     !. // Clause #8.

trusts(A, B, 0.12498159969038998) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1775081505951455) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.1407296365737003) :-  /* #neg=59 #pos=679 */ 
   knows(uniqueVar73, a),
   knows(uniqueVar73, uniqueVar74),
   knows(uniqueVar74, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.1917402215929737) :-  /* #pos=128 */ 
   knows(b, uniqueVar75),
   knows(underscore, a),
   knows(a, uniqueVar75),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.060889450738871254) :-  /* #neg=1 #pos=5 */ 
   knows(uniqueVar76, b),
   knows(uniqueVar76, uniqueVar76),
   knows(a, uniqueVar76),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.1619314354293577) :-  /* #neg=2 #pos=94 */ 
   knows(a, uniqueVar77),
   knows(uniqueVar77, underscore),
   knows(uniqueVar77, uniqueVar77),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.1763172566225984) :-  /* #neg=4 #pos=366 */ 
   knows(a, uniqueVar78),
   knows(uniqueVar78, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.13060643569945807) :-  /* #neg=4 #pos=52 */ 
   knows(uniqueVar79, a),
   knows(uniqueVar80, uniqueVar79),
   knows(uniqueVar79, uniqueVar80),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.2130637232195589) :-  /* #pos=20 */ 
   knows(a, uniqueVar81),
   knows(uniqueVar81, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.12498159969038998) :-  /* #neg=1 #pos=9 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar79, uniqueVar80)
%   knows(uniqueVar81, underscore)
%   knows(uniqueVar77, uniqueVar77)
%   knows(a, uniqueVar81)
%   knows(a, uniqueVar76)
%   knows(a, uniqueVar75)
%   knows(b, uniqueVar75)
%   knows(uniqueVar77, underscore)
%   knows(uniqueVar73, a)
%   knows(uniqueVar76, b)
%   knows(uniqueVar79, a)
%   knows(uniqueVar78, underscore)
%   knows(uniqueVar74, a)
%   knows(a, uniqueVar77)
%   knows(uniqueVar76, uniqueVar76)
%   knows(a, uniqueVar78)
%   knows(uniqueVar73, uniqueVar74)
%   knows(underscore, a)
%   knows(b, a)
%   knows(uniqueVar80, uniqueVar79)

//// Loaded checkpoint from data/trust/train/models/bRDNs/trusts.model.ckpt at 0:37:20 10/21/22.
//// Number of trees loaded:8

//// Also loaded 146 flattened literals from data/trust/train/models/bRDNs/trusts.model.ckptLits

%%%%%  WILL-Produced Tree #9 @ 0:37:39 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.1519410177092699;  // std dev = 0,100, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.17275501570203805;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(A, C) )
%   | | | then return 0.1070535253360671;  // std dev = 2,323, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | | | else if ( knows(B, B) )
%   | | | | then return -0.2759406004228153;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return 0.043384233481537186;  // std dev = 2,557, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(A, D), knows(D, D) )
%   | | then if ( knows(B, B) )
%   | | | then return 0.16706918351451477;  // std dev = 0,978, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.14890452630923948;  // std dev = 0,965, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | else return 0.10927962471539729;  // std dev = 3,788, 172,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=156 */
%   | | else return 0.14007113696889392;  // std dev = 0,178, 1.062,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1.026 */


% Clauses:

trusts(A, B, 0.1519410177092699) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.17275501570203805) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, 0.1070535253360671) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #3.

trusts(A, B, -0.2759406004228153) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #4.

trusts(A, B, 0.043384233481537186) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.16706918351451477) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #6.

trusts(A, B, 0.14890452630923948) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.10927962471539729) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.14007113696889392) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1519410177092699) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.17275501570203805) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar1, a),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar1, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.1070535253360671) :-  /* #neg=6 #pos=54 */ 
   knows(uniqueVar2, a),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar2),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, -0.2759406004228153) :-  /* #neg=2 #pos=2 */ 
   knows(uniqueVar3, a),
   knows(uniqueVar3, uniqueVar3),
   knows(b, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.043384233481537186) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar4, a),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.16706918351451477) :-  /* #neg=1 #pos=27 */ 
   knows(a, uniqueVar5),
   knows(uniqueVar5, uniqueVar5),
   knows(b, b),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.14890452630923948) :-  /* #neg=1 #pos=21 */ 
   knows(a, uniqueVar6),
   knows(uniqueVar6, uniqueVar6),
   knows(b, uniqueVar6),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.10927962471539729) :-  /* #neg=16 #pos=156 */ 
   knows(a, uniqueVar7),
   knows(uniqueVar7, uniqueVar7),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.14007113696889392) :-  /* #neg=36 #pos=1.026 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar6, uniqueVar6)
%   knows(b, uniqueVar6)
%   knows(b, b)
%   knows(a, uniqueVar6)
%   knows(uniqueVar4, uniqueVar4)
%   knows(uniqueVar7, uniqueVar7)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar1, a)
%   knows(uniqueVar3, a)
%   knows(b, a)
%   knows(a, uniqueVar7)
%   knows(uniqueVar5, uniqueVar5)
%   knows(a, uniqueVar2)
%   knows(uniqueVar4, a)
%   knows(uniqueVar2, uniqueVar2)
%   knows(uniqueVar1, uniqueVar1)
%   knows(uniqueVar2, a)
%   knows(uniqueVar1, b)
%   knows(a, uniqueVar5)

%%%%%  WILL-Produced Tree #10 @ 0:37:49 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.131517921120679;  // std dev = 1,968, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.085712833866832;  // std dev = 5,212, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.1765106171371504;  // std dev = 0,044, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1280633841509809;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(B, E) )
%   | then return 0.12736995565451983;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(B, F), knows(F, F) )
%   | | then return -0.008288353166421772;  // std dev = 0,873, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( knows(B, G), knows(H, A) )
%   | | | then if ( knows(H, G) )
%   | | | | then return 0.051395033768599246;  // std dev = 2,280, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | | | else return 0.12985177861739866;  // std dev = 1,347, 70,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | | else return 0.1226567409785785;  // std dev = 0,192, 170,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=163 */


% Clauses:

trusts(A, B, 0.131517921120679) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.085712833866832) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.1765106171371504) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.1280633841509809) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.12736995565451983) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, -0.008288353166421772) :- 
     knows(B, C), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.051395033768599246) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.12985177861739866) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.1226567409785785) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.131517921120679) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar8),
   knows(uniqueVar8, uniqueVar8),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.085712833866832) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.1765106171371504) :-  /* #pos=6 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar10, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.1280633841509809) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.12736995565451983) :-  /* #neg=25 #pos=1.197 */ 
   knows(uniqueVar12, a),
   knows(a, uniqueVar12),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, -0.008288353166421772) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, uniqueVar13),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.051395033768599246) :-  /* #neg=6 #pos=44 */ 
   knows(b, uniqueVar14),
   knows(uniqueVar15, a),
   knows(uniqueVar15, uniqueVar14),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.12985177861739866) :-  /* #neg=2 #pos=68 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1226567409785785) :-  /* #neg=7 #pos=163 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar15, uniqueVar14)
%   knows(b, underscore)
%   knows(uniqueVar15, a)
%   knows(underscore, a)
%   knows(a, uniqueVar9)
%   knows(a, uniqueVar10)
%   knows(a, uniqueVar8)
%   knows(uniqueVar13, uniqueVar13)
%   knows(uniqueVar9, uniqueVar9)
%   knows(a, uniqueVar13)
%   knows(uniqueVar10, uniqueVar10)
%   knows(a, uniqueVar11)
%   knows(uniqueVar10, a)
%   knows(uniqueVar12, a)
%   knows(uniqueVar8, uniqueVar8)
%   knows(b, a)
%   knows(uniqueVar11, uniqueVar11)
%   knows(b, uniqueVar14)
%   knows(a, uniqueVar12)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 172, [
   knows(uniqueVar11, a),
   knows(uniqueVar69, uniqueVar68),
   knows(uniqueVar62, a),
   knows(uniqueVar15, a),
   knows(a, uniqueVar38),
   knows(uniqueVar4, uniqueVar5),
   knows(b, b),
   knows(uniqueVar61, b),
   knows(uniqueVar48, a),
   knows(a, uniqueVar75),
   knows(uniqueVar18, a),
   knows(uniqueVar3, a),
   knows(b, uniqueVar4),
   knows(uniqueVar24, a),
   knows(uniqueVar39, b),
   knows(uniqueVar73, a),
   knows(a, uniqueVar11),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar46, uniqueVar46),
   knows(uniqueVar59, uniqueVar60),
   knows(uniqueVar34, uniqueVar34),
   knows(uniqueVar77, underscore),
   knows(uniqueVar78, underscore),
   knows(a, uniqueVar36),
   knows(uniqueVar2, a),
   knows(a, uniqueVar26),
   knows(a, uniqueVar65),
   knows(a, uniqueVar12),
   knows(uniqueVar47, a),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar41, uniqueVar42),
   knows(uniqueVar52, uniqueVar53),
   knows(uniqueVar5, a),
   knows(a, uniqueVar54),
   knows(uniqueVar66, uniqueVar67),
   knows(b, uniqueVar27),
   knows(uniqueVar43, a),
   knows(uniqueVar5, uniqueVar5),
   knows(uniqueVar28, uniqueVar29),
   knows(a, uniqueVar81),
   knows(a, uniqueVar2),
   knows(uniqueVar4, a),
   knows(uniqueVar39, a),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar62, uniqueVar62),
   knows(uniqueVar58, a),
   knows(uniqueVar44, uniqueVar43),
   knows(a, uniqueVar5),
   knows(a, uniqueVar78),
   knows(uniqueVar56, a),
   knows(uniqueVar64, a),
   knows(uniqueVar16, underscore),
   knows(a, uniqueVar37),
   knows(a, uniqueVar52),
   knows(uniqueVar20, uniqueVar21),
   knows(uniqueVar12, uniqueVar11),
   knows(a, uniqueVar67),
   knows(uniqueVar58, uniqueVar57),
   knows(uniqueVar1, a),
   knows(uniqueVar24, uniqueVar24),
   knows(uniqueVar9, uniqueVar10),
   knows(uniqueVar8, uniqueVar8),
   knows(uniqueVar14, a),
   knows(uniqueVar72, a),
   knows(uniqueVar50, uniqueVar51),
   knows(uniqueVar76, uniqueVar76),
   knows(a, uniqueVar51),
   knows(uniqueVar17, underscore),
   knows(b, uniqueVar14),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar30),
   knows(a, uniqueVar41),
   knows(uniqueVar23, uniqueVar23),
   knows(b, underscore),
   knows(uniqueVar76, b),
   knows(uniqueVar45, a),
   knows(underscore, a),
   knows(uniqueVar54, uniqueVar54),
   knows(a, uniqueVar10),
   knows(uniqueVar7, uniqueVar7),
   knows(a, uniqueVar25),
   knows(uniqueVar9, uniqueVar9),
   knows(uniqueVar26, b),
   knows(a, uniqueVar7),
   knows(a, uniqueVar63),
   knows(uniqueVar64, b),
   knows(uniqueVar6, underscore),
   knows(a, uniqueVar59),
   knows(a, uniqueVar17),
   knows(uniqueVar10, uniqueVar9),
   knows(uniqueVar31, uniqueVar31),
   knows(uniqueVar81, underscore),
   knows(uniqueVar42, uniqueVar42),
   knows(uniqueVar71, a),
   knows(a, uniqueVar6),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar9, a),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar39, uniqueVar39),
   knows(a, uniqueVar68),
   knows(uniqueVar29, a),
   knows(a, underscore),
   knows(uniqueVar53, b),
   knows(uniqueVar27, a),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar7, a),
   knows(uniqueVar79, uniqueVar80),
   knows(uniqueVar1, b),
   knows(uniqueVar11, uniqueVar12),
   knows(b, uniqueVar25),
   knows(uniqueVar55, a),
   knows(b, uniqueVar75),
   knows(uniqueVar70, a),
   knows(uniqueVar65, b),
   knows(uniqueVar73, uniqueVar74),
   knows(uniqueVar54, a),
   knows(a, uniqueVar9),
   knows(uniqueVar71, uniqueVar72),
   knows(uniqueVar35, uniqueVar36),
   knows(uniqueVar12, a),
   knows(uniqueVar45, uniqueVar45),
   knows(a, uniqueVar34),
   knows(a, uniqueVar1),
   knows(uniqueVar3, uniqueVar2),
   knows(uniqueVar66, a),
   knows(a, uniqueVar16),
   knows(uniqueVar33, uniqueVar33),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar80, uniqueVar79),
   knows(a, uniqueVar49),
   knows(a, uniqueVar69),
   knows(uniqueVar55, uniqueVar55),
   knows(a, uniqueVar76),
   knows(uniqueVar40, a),
   knows(uniqueVar49, underscore),
   knows(uniqueVar57, a),
   knows(a, uniqueVar70),
   knows(uniqueVar28, a),
   knows(uniqueVar61, uniqueVar61),
   knows(a, uniqueVar50),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar10, a),
   knows(uniqueVar32, a),
   knows(b, a),
   knows(uniqueVar44, a),
   knows(uniqueVar77, uniqueVar77),
   knows(uniqueVar22, a),
   knows(uniqueVar20, a),
   knows(uniqueVar15, uniqueVar14),
   knows(uniqueVar30, uniqueVar31),
   knows(uniqueVar8, uniqueVar7),
   knows(uniqueVar6, uniqueVar6),
   knows(uniqueVar35, a),
   knows(b, uniqueVar6),
   knows(uniqueVar23, uniqueVar22),
   knows(uniqueVar18, uniqueVar19),
   knows(uniqueVar19, uniqueVar19),
   knows(a, uniqueVar8),
   knows(uniqueVar13, uniqueVar13),
   knows(a, uniqueVar77),
   knows(uniqueVar32, uniqueVar33),
   knows(a, uniqueVar13),
   knows(a, uniqueVar64),
   knows(uniqueVar16, a),
   knows(a, uniqueVar46),
   knows(uniqueVar79, a),
   knows(uniqueVar48, uniqueVar47),
   knows(uniqueVar38, uniqueVar37),
   knows(uniqueVar63, uniqueVar63),
   knows(uniqueVar74, a)]).

%%%%%  WILL-Produced Tree #9 @ 0:39:32 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C), knows(B, D) )
%   then return 0.12035532183865409;  // std dev = 5,621, 464,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=429 */
%   else if ( knows(A, E), knows(E, B), knows(E, A) )
%   | then return 0.15461873472591284;  // std dev = 2,176, 356,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=351 */
%   | else if ( knows(A, F), knows(G, F), knows(G, A) )
%   | | then return 0.13287662146637277;  // std dev = 5,280, 682,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=652 */
%   | | else if ( knows(A, H), knows(H, B), knows(B, I) )
%   | | | then return 0.11413569788433357;  // std dev = 1,687, 64,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | | | else if ( knows(B, J) )
%   | | | | then if ( knows(K, B), knows(K, K) )
%   | | | | | then return 0.14945920408672803;  // std dev = 0,985, 78,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | | | | | else return 0.15920599261631815;  // std dev = 0,153, 314,000 (wgt'ed) examples reached here.  /* #pos=314 */
%   | | | | else if ( knows(L, B), knows(M, L), knows(M, M) )
%   | | | | | then return 0.06291614587077209;  // std dev = 1,262, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | | | else if ( knows(N, B), knows(N, P), knows(P, N) )
%   | | | | | | then return 0.1709596822528376;  // std dev = 0,068, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | | | | else return 0.10739757369578691;  // std dev = 0,919, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */


% Clauses:

trusts(A, B, 0.12035532183865409) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #1.

trusts(A, B, 0.15461873472591284) :- 
     knows(A, C), 
     knows(C, B), 
     knows(C, A), 
     !. // Clause #2.

trusts(A, B, 0.13287662146637277) :- 
     knows(A, C), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #3.

trusts(A, B, 0.11413569788433357) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.14945920408672803) :- 
     knows(B, C), 
     knows(D, B), 
     knows(D, D), 
     !. // Clause #5.

trusts(A, B, 0.15920599261631815) :- 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.06291614587077209) :- 
     knows(C, B), 
     knows(D, C), 
     knows(D, D), 
     !. // Clause #7.

trusts(A, B, 0.1709596822528376) :- 
     knows(C, B), 
     knows(C, D), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.10739757369578691) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.12035532183865409) :-  /* #neg=35 #pos=429 */ 
   knows(a, uniqueVar82),
   knows(uniqueVar82, uniqueVar82),
   knows(b, underscore),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.15461873472591284) :-  /* #neg=5 #pos=351 */ 
   knows(a, uniqueVar83),
   knows(uniqueVar83, b),
   knows(uniqueVar83, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.13287662146637277) :-  /* #neg=30 #pos=652 */ 
   knows(a, uniqueVar84),
   knows(uniqueVar85, uniqueVar84),
   knows(uniqueVar85, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.11413569788433357) :-  /* #neg=3 #pos=61 */ 
   knows(a, uniqueVar86),
   knows(uniqueVar86, b),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.14945920408672803) :-  /* #neg=1 #pos=77 */ 
   knows(a, underscore),
   knows(uniqueVar87, a),
   knows(uniqueVar87, uniqueVar87),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.15920599261631815) :-  /* #pos=314 */ 
   knows(a, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.06291614587077209) :-  /* #neg=2 #pos=12 */ 
   knows(uniqueVar88, a),
   knows(uniqueVar89, uniqueVar88),
   knows(uniqueVar89, uniqueVar89),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.1709596822528376) :-  /* #pos=24 */ 
   knows(uniqueVar90, a),
   knows(uniqueVar90, uniqueVar91),
   knows(uniqueVar91, uniqueVar90),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.10739757369578691) :-  /* #neg=1 #pos=11 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, underscore)
%   knows(uniqueVar85, uniqueVar84)
%   knows(uniqueVar87, a)
%   knows(a, underscore)
%   knows(uniqueVar82, uniqueVar82)
%   knows(a, uniqueVar82)
%   knows(uniqueVar91, uniqueVar90)
%   knows(a, uniqueVar84)
%   knows(uniqueVar89, uniqueVar89)
%   knows(uniqueVar83, b)
%   knows(uniqueVar87, uniqueVar87)
%   knows(uniqueVar88, a)
%   knows(uniqueVar90, uniqueVar91)
%   knows(uniqueVar85, a)
%   knows(uniqueVar86, b)
%   knows(uniqueVar90, a)
%   knows(uniqueVar83, a)
%   knows(a, uniqueVar83)
%   knows(a, uniqueVar86)
%   knows(uniqueVar89, uniqueVar88)

//// Loaded checkpoint from data/trust/train/models/bRDNs/trusts.model.ckpt at 9:27:06 10/21/22.
//// Number of trees loaded:9

//// Also loaded 164 flattened literals from data/trust/train/models/bRDNs/trusts.model.ckptLits

%%%%%  WILL-Produced Tree #10 @ 9:27:25 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.1339971105423372;  // std dev = 0,100, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(B, B) )
%   | | then return -0.10240554665687332;  // std dev = 1,447, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( knows(A, C) )
%   | | | then return 0.11222607297804413;  // std dev = 2,354, 80,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=74 */
%   | | | else if ( knows(B, C) )
%   | | | | then return 0.19357004767917207;  // std dev = 0,021, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.020767488634257942;  // std dev = 2,553, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(B, D), knows(D, B) )
%   | | then return 0.12177487329533598;  // std dev = 0,183, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.028175780197728404;  // std dev = 2,595, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.10770426630036489;  // std dev = 2,108, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.1267827910433341;  // std dev = 0,185, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.1339971105423372) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, -0.10240554665687332) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #2.

trusts(A, B, 0.11222607297804413) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #3.

trusts(A, B, 0.19357004767917207) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #4.

trusts(A, B, 0.020767488634257942) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.12177487329533598) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.028175780197728404) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.10770426630036489) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.1267827910433341) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1339971105423372) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, -0.10240554665687332) :-  /* #neg=3 #pos=7 */ 
   knows(uniqueVar1, a),
   knows(uniqueVar1, uniqueVar1),
   knows(b, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.11222607297804413) :-  /* #neg=6 #pos=74 */ 
   knows(uniqueVar2, a),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar2),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.19357004767917207) :-  /* #pos=4 */ 
   knows(uniqueVar3, a),
   knows(uniqueVar3, uniqueVar3),
   knows(b, uniqueVar3),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.020767488634257942) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar4, a),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.12177487329533598) :-  /* #neg=34 #pos=916 */ 
   knows(a, uniqueVar5),
   knows(uniqueVar5, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.028175780197728404) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar6),
   knows(uniqueVar7, a),
   knows(uniqueVar7, uniqueVar6),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.10770426630036489) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1267827910433341) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar4, a)
%   knows(b, underscore)
%   knows(b, b)
%   knows(b, uniqueVar3)
%   knows(underscore, a)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar7, uniqueVar6)
%   knows(uniqueVar3, a)
%   knows(b, uniqueVar6)
%   knows(b, a)
%   knows(uniqueVar1, uniqueVar1)
%   knows(uniqueVar5, a)
%   knows(uniqueVar1, a)
%   knows(uniqueVar7, a)
%   knows(a, uniqueVar2)
%   knows(uniqueVar2, uniqueVar2)
%   knows(a, uniqueVar5)
%   knows(uniqueVar2, a)
%   knows(uniqueVar4, uniqueVar4)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 175, [
   knows(uniqueVar11, a),
   knows(a, uniqueVar86),
   knows(uniqueVar4, a),
   knows(a, uniqueVar38),
   knows(uniqueVar31, uniqueVar31),
   knows(b, b),
   knows(uniqueVar43, a),
   knows(uniqueVar18, a),
   knows(uniqueVar3, a),
   knows(b, uniqueVar6),
   knows(uniqueVar56, a),
   knows(uniqueVar39, b),
   knows(uniqueVar59, uniqueVar60),
   knows(a, uniqueVar65),
   knows(uniqueVar34, uniqueVar34),
   knows(uniqueVar77, underscore),
   knows(uniqueVar78, underscore),
   knows(a, uniqueVar5),
   knows(uniqueVar2, a),
   knows(a, uniqueVar26),
   knows(uniqueVar47, a),
   knows(uniqueVar91, uniqueVar90),
   knows(uniqueVar86, b),
   knows(a, uniqueVar83),
   knows(uniqueVar35, a),
   knows(uniqueVar41, uniqueVar42),
   knows(uniqueVar89, uniqueVar88),
   knows(uniqueVar48, a),
   knows(uniqueVar16, underscore),
   knows(uniqueVar83, b),
   knows(uniqueVar65, b),
   knows(a, uniqueVar81),
   knows(a, uniqueVar2),
   knows(uniqueVar39, a),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar87, a),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar32, a),
   knows(a, uniqueVar78),
   knows(uniqueVar85, a),
   knows(uniqueVar64, a),
   knows(a, uniqueVar37),
   knows(uniqueVar49, underscore),
   knows(b, uniqueVar4),
   knows(uniqueVar12, uniqueVar11),
   knows(uniqueVar44, a),
   knows(uniqueVar56, uniqueVar56),
   knows(a, uniqueVar63),
   knows(uniqueVar9, uniqueVar10),
   knows(uniqueVar8, uniqueVar8),
   knows(uniqueVar87, uniqueVar87),
   knows(b, uniqueVar75),
   knows(uniqueVar72, a),
   knows(uniqueVar83, a),
   knows(uniqueVar76, uniqueVar76),
   knows(a, uniqueVar16),
   knows(uniqueVar17, underscore),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar36),
   knows(uniqueVar82, uniqueVar82),
   knows(a, uniqueVar41),
   knows(uniqueVar23, uniqueVar23),
   knows(uniqueVar16, a),
   knows(b, underscore),
   knows(uniqueVar76, b),
   knows(uniqueVar61, b),
   knows(uniqueVar45, a),
   knows(underscore, a),
   knows(uniqueVar58, a),
   knows(a, uniqueVar30),
   knows(a, uniqueVar25),
   knows(uniqueVar26, b),
   knows(uniqueVar52, uniqueVar53),
   knows(uniqueVar64, b),
   knows(a, uniqueVar59),
   knows(a, uniqueVar17),
   knows(b, uniqueVar27),
   knows(uniqueVar69, uniqueVar68),
   knows(uniqueVar74, a),
   knows(uniqueVar10, uniqueVar9),
   knows(uniqueVar81, underscore),
   knows(uniqueVar42, uniqueVar42),
   knows(uniqueVar27, a),
   knows(a, uniqueVar1),
   knows(uniqueVar28, a),
   knows(uniqueVar71, a),
   knows(a, uniqueVar46),
   knows(uniqueVar61, uniqueVar61),
   knows(uniqueVar90, uniqueVar91),
   knows(a, uniqueVar6),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar7, uniqueVar6),
   knows(uniqueVar62, uniqueVar62),
   knows(uniqueVar9, a),
   knows(a, uniqueVar84),
   knows(uniqueVar39, uniqueVar39),
   knows(a, uniqueVar68),
   knows(uniqueVar29, a),
   knows(uniqueVar1, uniqueVar1),
   knows(a, underscore),
   knows(uniqueVar15, a),
   knows(uniqueVar79, uniqueVar80),
   knows(uniqueVar11, uniqueVar12),
   knows(b, uniqueVar25),
   knows(uniqueVar58, uniqueVar57),
   knows(uniqueVar55, a),
   knows(uniqueVar44, uniqueVar43),
   knows(uniqueVar70, a),
   knows(uniqueVar4, uniqueVar5),
   knows(uniqueVar24, uniqueVar24),
   knows(uniqueVar71, uniqueVar72),
   knows(uniqueVar45, uniqueVar45),
   knows(uniqueVar53, b),
   knows(a, uniqueVar34),
   knows(a, uniqueVar51),
   knows(uniqueVar5, a),
   knows(uniqueVar3, uniqueVar2),
   knows(uniqueVar48, uniqueVar47),
   knows(uniqueVar7, a),
   knows(a, uniqueVar54),
   knows(uniqueVar63, uniqueVar63),
   knows(uniqueVar33, uniqueVar33),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar80, uniqueVar79),
   knows(uniqueVar35, uniqueVar36),
   knows(uniqueVar55, uniqueVar55),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar73, a),
   knows(a, uniqueVar76),
   knows(uniqueVar40, a),
   knows(uniqueVar57, a),
   knows(a, uniqueVar70),
   knows(uniqueVar90, a),
   knows(a, uniqueVar49),
   knows(a, uniqueVar52),
   knows(a, uniqueVar75),
   knows(uniqueVar88, a),
   knows(uniqueVar54, uniqueVar54),
   knows(uniqueVar66, uniqueVar67),
   knows(uniqueVar6, underscore),
   knows(uniqueVar66, a),
   knows(uniqueVar28, uniqueVar29),
   knows(uniqueVar85, uniqueVar84),
   knows(a, uniqueVar50),
   knows(b, a),
   knows(uniqueVar32, uniqueVar33),
   knows(uniqueVar62, a),
   knows(uniqueVar77, uniqueVar77),
   knows(uniqueVar22, a),
   knows(uniqueVar89, uniqueVar89),
   knows(a, uniqueVar69),
   knows(uniqueVar8, uniqueVar7),
   knows(uniqueVar46, uniqueVar46),
   knows(uniqueVar20, a),
   knows(uniqueVar21, uniqueVar20),
   knows(b, uniqueVar3),
   knows(a, uniqueVar67),
   knows(uniqueVar23, uniqueVar22),
   knows(uniqueVar18, uniqueVar19),
   knows(uniqueVar19, uniqueVar19),
   knows(uniqueVar13, uniqueVar13),
   knows(a, uniqueVar77),
   knows(a, uniqueVar13),
   knows(a, uniqueVar64),
   knows(uniqueVar14, a),
   knows(uniqueVar30, uniqueVar31),
   knows(uniqueVar79, a),
   knows(uniqueVar20, uniqueVar21),
   knows(uniqueVar38, uniqueVar37),
   knows(uniqueVar1, a),
   knows(uniqueVar54, a),
   knows(uniqueVar73, uniqueVar74),
   knows(a, uniqueVar82),
   knows(uniqueVar50, uniqueVar51),
   knows(uniqueVar24, a)]).
