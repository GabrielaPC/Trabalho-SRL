usePrologVariables: true.

% maxTreeDepthInNodes                 = 4
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 50
% maxNodesToCreate                    = 50.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 661
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 14:21:36 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.8260204210432839;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.7267620737856416;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.8340525495573401;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.8260204210432839) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.7267620737856416) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.8340525495573401) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.1418510649004877) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.8260204210432839) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar1),
   haswordauthor(b, uniqueVar1),
   haswordvenue(underscore, uniqueVar1),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.7267620737856416) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar2),
   haswordauthor(b, uniqueVar2),
   haswordtitle(underscore, uniqueVar2),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.8340525495573401) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar3),
   haswordauthor(b, uniqueVar3),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.1418510649004877) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar2)
%   haswordauthor(b, uniqueVar3)
%   haswordvenue(underscore, uniqueVar1)
%   haswordauthor(a, uniqueVar1)
%   haswordauthor(b, uniqueVar1)
%   haswordauthor(a, uniqueVar2)
%   haswordauthor(a, uniqueVar3)
%   haswordtitle(underscore, uniqueVar2)

%%%%%  WILL-Produced Tree #2 @ 14:21:38 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.6937834871988068;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.6138253307187604;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.7002146166689344;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.6937834871988068) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.6138253307187604) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.7002146166689344) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.12544463852839138) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.6937834871988068) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar4),
   haswordauthor(b, uniqueVar4),
   haswordvenue(underscore, uniqueVar4),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.6138253307187604) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar5),
   haswordauthor(b, uniqueVar5),
   haswordtitle(underscore, uniqueVar5),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.7002146166689344) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar6),
   haswordauthor(b, uniqueVar6),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.12544463852839138) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordvenue(underscore, uniqueVar4)
%   haswordauthor(a, uniqueVar5)
%   haswordauthor(a, uniqueVar6)
%   haswordtitle(underscore, uniqueVar5)
%   haswordauthor(a, uniqueVar4)
%   haswordauthor(b, uniqueVar4)
%   haswordauthor(b, uniqueVar5)
%   haswordauthor(b, uniqueVar6)

%%%%%  WILL-Produced Tree #3 @ 14:21:40 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.537465783734176;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.4814879569022587;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.541948637920979;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.537465783734176) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.4814879569022587) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.541948637920979) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.11231637819360639) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.537465783734176) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar7),
   haswordauthor(b, uniqueVar7),
   haswordvenue(underscore, uniqueVar7),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.4814879569022587) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar8),
   haswordauthor(b, uniqueVar8),
   haswordtitle(underscore, uniqueVar8),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.541948637920979) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar9),
   haswordauthor(b, uniqueVar9),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.11231637819360639) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(a, uniqueVar7)
%   haswordauthor(b, uniqueVar9)
%   haswordtitle(underscore, uniqueVar8)
%   haswordvenue(underscore, uniqueVar7)
%   haswordauthor(a, uniqueVar8)
%   haswordauthor(b, uniqueVar8)
%   haswordauthor(b, uniqueVar7)
%   haswordauthor(a, uniqueVar9)

%%%%%  WILL-Produced Tree #4 @ 14:21:42 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.40390648237861687;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.3630945224443797;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.4072853796652973;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.40390648237861687) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.3630945224443797) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.4072853796652973) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.10159632948783635) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.40390648237861687) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar10),
   haswordauthor(b, uniqueVar10),
   haswordvenue(underscore, uniqueVar10),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.3630945224443797) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar11),
   haswordauthor(b, uniqueVar11),
   haswordtitle(underscore, uniqueVar11),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.4072853796652973) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar12),
   haswordauthor(b, uniqueVar12),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.10159632948783635) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar11)
%   haswordauthor(a, uniqueVar10)
%   haswordauthor(b, uniqueVar10)
%   haswordtitle(underscore, uniqueVar11)
%   haswordvenue(underscore, uniqueVar10)
%   haswordauthor(a, uniqueVar12)
%   haswordauthor(a, uniqueVar11)
%   haswordauthor(b, uniqueVar12)

%%%%%  WILL-Produced Tree #5 @ 14:21:43 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.30834693575136474;  // std dev = 2,783, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.2734937302542984;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.31138393761949307;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.30834693575136474) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.2734937302542984) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.31138393761949307) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.09269127618926096) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.30834693575136474) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar13),
   haswordauthor(b, uniqueVar13),
   haswordvenue(underscore, uniqueVar13),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.2734937302542984) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar14),
   haswordauthor(b, uniqueVar14),
   haswordtitle(underscore, uniqueVar14),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.31138393761949307) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar15),
   haswordauthor(b, uniqueVar15),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.09269127618926096) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar13)
%   haswordauthor(b, uniqueVar15)
%   haswordauthor(a, uniqueVar13)
%   haswordvenue(underscore, uniqueVar13)
%   haswordauthor(a, uniqueVar14)
%   haswordtitle(underscore, uniqueVar14)
%   haswordauthor(a, uniqueVar15)
%   haswordauthor(b, uniqueVar14)

%%%%%  WILL-Produced Tree #6 @ 14:21:45 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24199607985174748;  // std dev = 4,226, 332,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=312 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.16386445557459836;  // std dev = 2,309, 54,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=48 */
%   | | else return 0.24585186970940848;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.24199607985174748) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.16386445557459836) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.24585186970940848) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.08518475138839682) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.24199607985174748) :-  /* #neg=20 #pos=312 */ 
   haswordauthor(a, uniqueVar16),
   haswordauthor(b, uniqueVar16),
   haswordtitle(underscore, uniqueVar16),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.16386445557459836) :-  /* #neg=6 #pos=48 */ 
   haswordauthor(a, uniqueVar17),
   haswordauthor(b, uniqueVar17),
   haswordvenue(underscore, uniqueVar17),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.24585186970940848) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar18),
   haswordauthor(b, uniqueVar18),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.08518475138839682) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordtitle(underscore, uniqueVar16)
%   haswordauthor(a, uniqueVar16)
%   haswordauthor(a, uniqueVar18)
%   haswordauthor(b, uniqueVar17)
%   haswordauthor(b, uniqueVar16)
%   haswordauthor(a, uniqueVar17)
%   haswordauthor(b, uniqueVar18)
%   haswordvenue(underscore, uniqueVar17)

%%%%%  WILL-Produced Tree #7 @ 14:21:46 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.20036256925090026;  // std dev = 2,762, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else return 0.1850621042180051;  // std dev = 0,237, 386,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=362 */
%   else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.20036256925090026) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.1850621042180051) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #2.

sameauthor(A, B, -0.07877675473109175) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.20036256925090026) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar19),
   haswordauthor(b, uniqueVar19),
   haswordvenue(underscore, uniqueVar19),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.1850621042180051) :-  /* #neg=24 #pos=362 */ 
   haswordauthor(a, uniqueVar20),
   haswordauthor(b, uniqueVar20),
   !. // Flattened version of clause #2.

flattened_sameauthor(underscore, underscore, -0.07877675473109175) :-  /* #neg=26 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar20)
%   haswordvenue(underscore, uniqueVar19)
%   haswordauthor(a, uniqueVar20)
%   haswordauthor(a, uniqueVar19)
%   haswordauthor(b, uniqueVar19)

%%%%%  WILL-Produced Tree #8 @ 14:21:48 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.16654193854502308;  // std dev = 2,764, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.12103788612398537;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.16965769230151634;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.16654193854502308) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.12103788612398537) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.16965769230151634) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.07324622576333704) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.16654193854502308) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar21),
   haswordauthor(b, uniqueVar21),
   haswordvenue(underscore, uniqueVar21),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.12103788612398537) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar22),
   haswordauthor(b, uniqueVar22),
   haswordtitle(underscore, uniqueVar22),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.16965769230151634) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar23),
   haswordauthor(b, uniqueVar23),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.07324622576333704) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(b, uniqueVar21)
%   haswordtitle(underscore, uniqueVar22)
%   haswordauthor(b, uniqueVar23)
%   haswordauthor(a, uniqueVar22)
%   haswordauthor(a, uniqueVar23)
%   haswordauthor(a, uniqueVar21)
%   haswordvenue(underscore, uniqueVar21)
%   haswordauthor(b, uniqueVar22)

%%%%%  WILL-Produced Tree #9 @ 14:21:49 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.1413546189196353;  // std dev = 2,766, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.0988880282650812;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.1445211640771935;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.06842697784420276;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.1413546189196353) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.0988880282650812) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.1445211640771935) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.06842697784420276) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.1413546189196353) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar24),
   haswordauthor(b, uniqueVar24),
   haswordvenue(underscore, uniqueVar24),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.0988880282650812) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar25),
   haswordauthor(b, uniqueVar25),
   haswordtitle(underscore, uniqueVar25),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.1445211640771935) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar26),
   haswordauthor(b, uniqueVar26),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.06842697784420276) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordvenue(underscore, uniqueVar24)
%   haswordauthor(a, uniqueVar26)
%   haswordauthor(b, uniqueVar24)
%   haswordauthor(a, uniqueVar24)
%   haswordtitle(underscore, uniqueVar25)
%   haswordauthor(b, uniqueVar26)
%   haswordauthor(a, uniqueVar25)
%   haswordauthor(b, uniqueVar25)

%%%%%  WILL-Produced Tree #10 @ 14:21:52 10/20/22.  %%%%%

% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.12201391955570207;  // std dev = 2,768, 249,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=241 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.08182918931918919;  // std dev = 3,954, 137,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=119 */
%   | | else return 0.1252193495492848;  // std dev = 0,153, 249,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=243 */
%   else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


% Clauses:

sameauthor(A, B, 0.12201391955570207) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordvenue(D, C), 
     !. // Clause #1.

sameauthor(A, B, 0.08182918931918919) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     haswordtitle(D, C), 
     !. // Clause #2.

sameauthor(A, B, 0.1252193495492848) :- 
     haswordauthor(A, C), 
     haswordauthor(B, C), 
     !. // Clause #3.

sameauthor(A, B, -0.06419184008202622) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_sameauthor(a, b, 0.12201391955570207) :-  /* #neg=8 #pos=241 */ 
   haswordauthor(a, uniqueVar27),
   haswordauthor(b, uniqueVar27),
   haswordvenue(underscore, uniqueVar27),
   !. // Flattened version of clause #1.

flattened_sameauthor(a, b, 0.08182918931918919) :-  /* #neg=18 #pos=119 */ 
   haswordauthor(a, uniqueVar28),
   haswordauthor(b, uniqueVar28),
   haswordtitle(underscore, uniqueVar28),
   !. // Flattened version of clause #2.

flattened_sameauthor(a, b, 0.1252193495492848) :-  /* #neg=6 #pos=243 */ 
   haswordauthor(a, uniqueVar29),
   haswordauthor(b, uniqueVar29),
   !. // Flattened version of clause #3.

flattened_sameauthor(underscore, underscore, -0.06419184008202622) :-  /* #neg=26 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   haswordauthor(a, uniqueVar27)
%   haswordauthor(b, uniqueVar27)
%   haswordauthor(b, uniqueVar28)
%   haswordvenue(underscore, uniqueVar27)
%   haswordauthor(b, uniqueVar29)
%   haswordauthor(a, uniqueVar28)
%   haswordauthor(a, uniqueVar29)
%   haswordtitle(underscore, uniqueVar28)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for sameauthor.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
sameauthor(A, B, Total) :- // A general accessor. 
   sameauthor(A, B, 1000000, Total), !.
sameauthor(A, B, Total) :- waitHere("This should not fail", sameauthor(A, B, Total)).

sameauthor(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_sameauthor_tree1(A, B, TreesToUse, Total1),
   getScore_sameauthor_tree2(A, B, TreesToUse, Total2),
   getScore_sameauthor_tree3(A, B, TreesToUse, Total3),
   getScore_sameauthor_tree4(A, B, TreesToUse, Total4),
   getScore_sameauthor_tree5(A, B, TreesToUse, Total5),
   getScore_sameauthor_tree6(A, B, TreesToUse, Total6),
   getScore_sameauthor_tree7(A, B, TreesToUse, Total7),
   getScore_sameauthor_tree8(A, B, TreesToUse, Total8),
   getScore_sameauthor_tree9(A, B, TreesToUse, Total9),
   getScore_sameauthor_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
sameauthor(A, B, TreesToUse, Total) :- waitHere("This should not fail", sameauthor(A, B, TreesToUse, Total)).

getScore_sameauthor_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_sameauthor_tree1(A, B, TreesToUse, Total1) :- sameauthor_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_sameauthor_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_sameauthor_tree2(A, B, TreesToUse, Total2) :- sameauthor_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_sameauthor_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_sameauthor_tree3(A, B, TreesToUse, Total3) :- sameauthor_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_sameauthor_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_sameauthor_tree4(A, B, TreesToUse, Total4) :- sameauthor_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_sameauthor_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_sameauthor_tree5(A, B, TreesToUse, Total5) :- sameauthor_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_sameauthor_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_sameauthor_tree6(A, B, TreesToUse, Total6) :- sameauthor_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_sameauthor_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_sameauthor_tree7(A, B, TreesToUse, Total7) :- sameauthor_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_sameauthor_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_sameauthor_tree8(A, B, TreesToUse, Total8) :- sameauthor_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_sameauthor_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_sameauthor_tree9(A, B, TreesToUse, Total9) :- sameauthor_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_sameauthor_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_sameauthor_tree10(A, B, TreesToUse, Total10) :- sameauthor_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(sameauthor, 77, [
   haswordauthor(a, uniqueVar7),
   haswordauthor(b, uniqueVar13),
   haswordauthor(a, uniqueVar10),
   haswordauthor(b, uniqueVar27),
   haswordauthor(b, uniqueVar9),
   haswordauthor(b, uniqueVar19),
   haswordauthor(a, uniqueVar1),
   haswordauthor(a, uniqueVar23),
   haswordtitle(underscore, uniqueVar14),
   haswordauthor(b, uniqueVar14),
   haswordauthor(a, uniqueVar27),
   haswordauthor(b, uniqueVar24),
   haswordauthor(a, uniqueVar13),
   haswordauthor(a, uniqueVar18),
   haswordauthor(a, uniqueVar24),
   haswordauthor(b, uniqueVar7),
   haswordtitle(underscore, uniqueVar16),
   haswordauthor(a, uniqueVar6),
   haswordauthor(b, uniqueVar28),
   haswordauthor(b, uniqueVar23),
   haswordauthor(b, uniqueVar20),
   haswordauthor(a, uniqueVar4),
   haswordauthor(b, uniqueVar4),
   haswordauthor(b, uniqueVar25),
   haswordauthor(a, uniqueVar3),
   haswordauthor(a, uniqueVar21),
   haswordauthor(a, uniqueVar17),
   haswordauthor(a, uniqueVar19),
   haswordauthor(b, uniqueVar18),
   haswordauthor(a, uniqueVar5),
   haswordauthor(b, uniqueVar10),
   haswordtitle(underscore, uniqueVar11),
   haswordauthor(a, uniqueVar22),
   haswordtitle(underscore, uniqueVar8),
   haswordvenue(underscore, uniqueVar13),
   haswordauthor(a, uniqueVar14),
   haswordvenue(underscore, uniqueVar7),
   haswordauthor(a, uniqueVar25),
   haswordtitle(underscore, uniqueVar2),
   haswordauthor(a, uniqueVar9),
   haswordauthor(b, uniqueVar22),
   haswordvenue(underscore, uniqueVar24),
   haswordauthor(a, uniqueVar26),
   haswordauthor(b, uniqueVar15),
   haswordauthor(a, uniqueVar20),
   haswordtitle(underscore, uniqueVar5),
   haswordvenue(underscore, uniqueVar10),
   haswordauthor(b, uniqueVar5),
   haswordauthor(b, uniqueVar6),
   haswordauthor(b, uniqueVar17),
   haswordvenue(underscore, uniqueVar19),
   haswordauthor(a, uniqueVar28),
   haswordauthor(a, uniqueVar29),
   haswordauthor(b, uniqueVar3),
   haswordauthor(b, uniqueVar21),
   haswordauthor(a, uniqueVar12),
   haswordauthor(b, uniqueVar26),
   haswordauthor(b, uniqueVar12),
   haswordtitle(underscore, uniqueVar28),
   haswordvenue(underscore, uniqueVar4),
   haswordtitle(underscore, uniqueVar22),
   haswordauthor(b, uniqueVar1),
   haswordtitle(underscore, uniqueVar25),
   haswordauthor(a, uniqueVar2),
   haswordauthor(a, uniqueVar11),
   haswordauthor(b, uniqueVar16),
   haswordvenue(underscore, uniqueVar21),
   haswordvenue(underscore, uniqueVar17),
   haswordauthor(b, uniqueVar2),
   haswordauthor(b, uniqueVar11),
   haswordauthor(a, uniqueVar16),
   haswordvenue(underscore, uniqueVar1),
   haswordvenue(underscore, uniqueVar27),
   haswordauthor(b, uniqueVar29),
   haswordauthor(a, uniqueVar8),
   haswordauthor(b, uniqueVar8),
   haswordauthor(a, uniqueVar15)]).
