usePrologVariables: true.

% maxTreeDepthInNodes                 = 4
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 50
% maxNodesToCreate                    = 50.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 2.008
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 10:53:30 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.8331489350995097;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.7561752508889822;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.7977322684328414;  // std dev = 5,220, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.8449910403626665;  // std dev = 1,987, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.7981489350995122;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.8466104735610475;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.8331489350995097) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.7561752508889822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.8581489350995123) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.8081489350995122) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.7977322684328414) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.8449910403626665) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.7981489350995122) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8466104735610475) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.8331489350995097) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7561752508889822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar2),
   knows(uniqueVar2, uniqueVar2),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.8581489350995123) :-  /* #pos=6 */ 
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar4),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.7977322684328414) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar5, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar6, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.8449910403626665) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar7, a),
   knows(underscore, uniqueVar7),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7981489350995122) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar8, a),
   knows(underscore, uniqueVar8),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8466104735610475) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar2, uniqueVar2)
%   knows(a, uniqueVar3)
%   knows(uniqueVar3, a)
%   knows(b, underscore)
%   knows(uniqueVar7, a)
%   knows(uniqueVar4, uniqueVar4)
%   knows(uniqueVar8, a)
%   knows(a, uniqueVar1)
%   knows(a, uniqueVar4)
%   knows(underscore, uniqueVar8)
%   knows(uniqueVar6, a)
%   knows(a, uniqueVar2)
%   knows(uniqueVar5, a)
%   knows(b, a)
%   knows(underscore, uniqueVar7)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar1, uniqueVar1)
%   knows(uniqueVar6, uniqueVar5)

%%%%%  WILL-Produced Tree #2 @ 10:53:38 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.6994914035015026;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.637613635329692;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.7036147903757071;  // std dev = 0,141, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(B, G) )
%   | | then if ( knows(F, G) )
%   | | | then return 0.6100029593359543;  // std dev = 2,294, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | | else return 0.6863343487994458;  // std dev = 0,194, 76,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | else if ( knows(H, B), knows(H, H) )
%   | | | then return 0.3949349146884212;  // std dev = 1,158, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.698150120082;  // std dev = 0,171, 164,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=159 */


% Clauses:

trusts(A, B, 0.6994914035015026) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.637613635329692) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.7194734122109544) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.6794533872440252) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.7036147903757071) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.6100029593359543) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #6.

trusts(A, B, 0.6863343487994458) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.3949349146884212) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.698150120082) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.6994914035015026) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.637613635329692) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.7194734122109544) :-  /* #pos=6 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar11, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.6794533872440252) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar12),
   knows(uniqueVar12, uniqueVar12),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7036147903757071) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.6100029593359543) :-  /* #neg=6 #pos=44 */ 
   knows(uniqueVar14, a),
   knows(b, uniqueVar15),
   knows(uniqueVar14, uniqueVar15),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.6863343487994458) :-  /* #neg=3 #pos=73 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.3949349146884212) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar16, a),
   knows(uniqueVar16, uniqueVar16),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.698150120082) :-  /* #neg=5 #pos=159 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar12)
%   knows(b, underscore)
%   knows(underscore, a)
%   knows(a, uniqueVar11)
%   knows(uniqueVar14, a)
%   knows(uniqueVar13, a)
%   knows(uniqueVar10, uniqueVar10)
%   knows(a, uniqueVar9)
%   knows(uniqueVar14, uniqueVar15)
%   knows(b, uniqueVar15)
%   knows(b, a)
%   knows(uniqueVar11, uniqueVar11)
%   knows(uniqueVar16, uniqueVar16)
%   knows(uniqueVar12, uniqueVar12)
%   knows(uniqueVar9, uniqueVar9)
%   knows(uniqueVar11, a)
%   knows(a, uniqueVar13)
%   knows(a, uniqueVar10)
%   knows(uniqueVar16, a)

%%%%%  WILL-Produced Tree #3 @ 10:53:48 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.5518120675111413;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.5136447952892345;  // std dev = 2,526, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(C, B) )
%   | | | then return 0.5903733300416331;  // std dev = 0,028, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( knows(B, B) )
%   | | | | then return 0.10017902799766576;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return 0.41574215754902616;  // std dev = 2,533, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, A), knows(E, D) )
%   | | then if ( knows(E, A) )
%   | | | then return 0.5118429639836428;  // std dev = 6,226, 598,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=556 */
%   | | | else if ( knows(B, F) )
%   | | | | then return 0.5552433936131714;  // std dev = 2,231, 358,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=353 */
%   | | | | else return 0.5220030724815337;  // std dev = 1,685, 56,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.5499378936412762;  // std dev = 0,118, 272,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=268 */


% Clauses:

trusts(A, B, 0.5518120675111413) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.5136447952892345) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, 0.5903733300416331) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #3.

trusts(A, B, 0.10017902799766576) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #4.

trusts(A, B, 0.41574215754902616) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.5118429639836428) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.5552433936131714) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.5220030724815337) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.5499378936412762) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5518120675111413) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.5136447952892345) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar17, a),
   knows(uniqueVar17, uniqueVar17),
   knows(a, uniqueVar17),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.5903733300416331) :-  /* #pos=6 */ 
   knows(uniqueVar18, a),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar18, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.10017902799766576) :-  /* #neg=2 #pos=2 */ 
   knows(uniqueVar19, a),
   knows(uniqueVar19, uniqueVar19),
   knows(b, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.41574215754902616) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar20, uniqueVar20),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5118429639836428) :-  /* #neg=42 #pos=556 */ 
   knows(uniqueVar21, a),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar22, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.5552433936131714) :-  /* #neg=5 #pos=353 */ 
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar23),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.5220030724815337) :-  /* #neg=3 #pos=53 */ 
   knows(uniqueVar24, a),
   knows(underscore, uniqueVar24),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5499378936412762) :-  /* #neg=4 #pos=268 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(underscore, uniqueVar23)
%   knows(a, uniqueVar17)
%   knows(uniqueVar18, a)
%   knows(b, underscore)
%   knows(uniqueVar17, uniqueVar17)
%   knows(uniqueVar20, a)
%   knows(b, b)
%   knows(uniqueVar18, b)
%   knows(uniqueVar18, uniqueVar18)
%   knows(uniqueVar20, uniqueVar20)
%   knows(uniqueVar17, a)
%   knows(uniqueVar22, uniqueVar21)
%   knows(b, a)
%   knows(uniqueVar19, uniqueVar19)
%   knows(uniqueVar19, a)
%   knows(uniqueVar21, a)
%   knows(uniqueVar23, a)
%   knows(underscore, uniqueVar24)
%   knows(uniqueVar24, a)
%   knows(uniqueVar22, a)

%%%%%  WILL-Produced Tree #4 @ 10:53:59 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.4043625490831312;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.3717144811284412;  // std dev = 5,225, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.4276936779200579;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4019375685796117;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.4186763332294553;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(E, B) )
%   | | | then return 0.4110114555483461;  // std dev = 3,057, 300,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=290 */
%   | | | else if ( knows(F, A) )
%   | | | | then return 0.37766820376964755;  // std dev = 4,190, 256,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=237 */
%   | | | | else return 0.40412538513823615;  // std dev = 2,603, 278,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=271 */
%   | | else return 0.4148802457451366;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.4043625490831312) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.3717144811284412) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.4276936779200579) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.4019375685796117) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.4186763332294553) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.4110114555483461) :- 
     knows(C, A), 
     knows(D, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.37766820376964755) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.40412538513823615) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.4148802457451366) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.4043625490831312) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar25),
   knows(uniqueVar25, uniqueVar25),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.3717144811284412) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar26),
   knows(uniqueVar26, uniqueVar26),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.4276936779200579) :-  /* #pos=6 */ 
   knows(a, uniqueVar27),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar27, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.4019375685796117) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar28),
   knows(uniqueVar28, uniqueVar28),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.4186763332294553) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.4110114555483461) :-  /* #neg=10 #pos=290 */ 
   knows(uniqueVar29, a),
   knows(underscore, uniqueVar29),
   knows(uniqueVar29, b),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.37766820376964755) :-  /* #neg=19 #pos=237 */ 
   knows(uniqueVar30, a),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar31, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.40412538513823615) :-  /* #neg=7 #pos=271 */ 
   knows(uniqueVar32, a),
   knows(underscore, uniqueVar32),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.4148802457451366) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar25, uniqueVar25)
%   knows(uniqueVar29, b)
%   knows(a, uniqueVar26)
%   knows(b, underscore)
%   knows(underscore, uniqueVar32)
%   knows(uniqueVar26, uniqueVar26)
%   knows(a, uniqueVar25)
%   knows(uniqueVar28, uniqueVar28)
%   knows(uniqueVar27, uniqueVar27)
%   knows(uniqueVar31, a)
%   knows(b, a)
%   knows(uniqueVar30, a)
%   knows(uniqueVar31, uniqueVar30)
%   knows(uniqueVar27, a)
%   knows(uniqueVar29, a)
%   knows(a, uniqueVar28)
%   knows(underscore, uniqueVar29)
%   knows(a, uniqueVar27)
%   knows(uniqueVar32, a)

%%%%%  WILL-Produced Tree #5 @ 10:54:09 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.3092967441930752;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.281042234941252;  // std dev = 5,226, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else return 0.3106501510356565;  // std dev = 0,192, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( knows(E, B), knows(B, E) )
%   | then if ( knows(B, A) )
%   | | then return 0.3210188746123899;  // std dev = 1,411, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | | else return 0.310595692518425;  // std dev = 0,166, 798,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=775 */
%   | else if ( knows(B, F), knows(F, F) )
%   | | then return 0.1760563400137861;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( knows(A, G), knows(B, G) )
%   | | | then return 0.26634993651193806;  // std dev = 0,285, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else if ( knows(H, B), knows(H, H) )
%   | | | | then return 0.1922413334543231;  // std dev = 1,224, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | | else return 0.3089560615984828;  // std dev = 3,075, 248,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=238 */


% Clauses:

trusts(A, B, 0.3092967441930752) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.281042234941252) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.3106501510356565) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #3.

trusts(A, B, 0.3210188746123899) :- 
     knows(C, B), 
     knows(B, C), 
     knows(B, A), 
     !. // Clause #4.

trusts(A, B, 0.310595692518425) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, 0.1760563400137861) :- 
     knows(B, C), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.26634993651193806) :- 
     knows(A, C), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.1922413334543231) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.3089560615984828) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.3092967441930752) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.281042234941252) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.3106501510356565) :-  /* #neg=1 #pos=25 */ 
   knows(a, uniqueVar35),
   knows(uniqueVar35, uniqueVar35),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.3210188746123899) :-  /* #neg=2 #pos=422 */ 
   knows(uniqueVar36, b),
   knows(b, uniqueVar36),
   knows(b, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.310595692518425) :-  /* #neg=23 #pos=775 */ 
   knows(uniqueVar37, a),
   knows(a, uniqueVar37),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.1760563400137861) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar38),
   knows(uniqueVar38, uniqueVar38),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.26634993651193806) :-  /* #neg=3 #pos=29 */ 
   knows(a, uniqueVar39),
   knows(b, uniqueVar39),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.1922413334543231) :-  /* #neg=2 #pos=8 */ 
   knows(uniqueVar40, a),
   knows(uniqueVar40, uniqueVar40),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.3089560615984828) :-  /* #neg=10 #pos=238 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar34, uniqueVar34)
%   knows(a, uniqueVar34)
%   knows(uniqueVar35, uniqueVar35)
%   knows(a, uniqueVar33)
%   knows(uniqueVar40, uniqueVar40)
%   knows(b, underscore)
%   knows(a, uniqueVar39)
%   knows(b, uniqueVar36)
%   knows(a, uniqueVar38)
%   knows(uniqueVar33, uniqueVar33)
%   knows(a, uniqueVar37)
%   knows(b, a)
%   knows(a, uniqueVar35)
%   knows(uniqueVar38, uniqueVar38)
%   knows(uniqueVar40, a)
%   knows(uniqueVar37, a)
%   knows(b, uniqueVar39)
%   knows(uniqueVar36, b)

%%%%%  WILL-Produced Tree #6 @ 10:54:19 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.2519165586334043;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.2764040929852319;  // std dev = 0,979, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.11768041364736082;  // std dev = 1,230, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.2285742131692746;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.1514093407472434;  // std dev = 2,521, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(B, D), knows(D, B) )
%   | | then return 0.24490633825720523;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.16509144853730856;  // std dev = 2,608, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.23434927456920904;  // std dev = 2,146, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.2447237937790199;  // std dev = 0,188, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.2519165586334043) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2764040929852319) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.11768041364736082) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.2285742131692746) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.1514093407472434) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.24490633825720523) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.16509144853730856) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.23434927456920904) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.2447237937790199) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.2519165586334043) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.2764040929852319) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar41, a),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar41, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.11768041364736082) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar42, a),
   knows(uniqueVar42, uniqueVar42),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.2285742131692746) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar43, a),
   knows(uniqueVar43, uniqueVar43),
   knows(a, uniqueVar43),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.1514093407472434) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar44, a),
   knows(uniqueVar44, uniqueVar44),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.24490633825720523) :-  /* #neg=34 #pos=916 */ 
   knows(a, uniqueVar45),
   knows(uniqueVar45, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.16509144853730856) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar46),
   knows(uniqueVar47, a),
   knows(uniqueVar47, uniqueVar46),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.23434927456920904) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2447237937790199) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar41, a)
%   knows(b, underscore)
%   knows(underscore, a)
%   knows(uniqueVar42, uniqueVar42)
%   knows(a, uniqueVar43)
%   knows(uniqueVar41, uniqueVar41)
%   knows(uniqueVar43, a)
%   knows(uniqueVar44, a)
%   knows(b, b)
%   knows(uniqueVar47, a)
%   knows(b, a)
%   knows(uniqueVar45, a)
%   knows(uniqueVar43, uniqueVar43)
%   knows(uniqueVar47, uniqueVar46)
%   knows(uniqueVar41, b)
%   knows(a, uniqueVar45)
%   knows(uniqueVar44, uniqueVar44)
%   knows(b, uniqueVar46)
%   knows(uniqueVar42, a)

%%%%%  WILL-Produced Tree #7 @ 10:54:30 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.19769524726480153;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.17012887306415517;  // std dev = 5,188, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.21857578450653384;  // std dev = 0,009, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1923191411153547;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.2093688489158066;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.18436541071709567;  // std dev = 5,178, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.20913016220024966;  // std dev = 1,992, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.17565374921594526;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.20861959129809846;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.19769524726480153) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.17012887306415517) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.21857578450653384) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.1923191411153547) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.2093688489158066) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.18436541071709567) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.20913016220024966) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.17565374921594526) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.20861959129809846) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.19769524726480153) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar48),
   knows(uniqueVar48, uniqueVar48),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.17012887306415517) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar49),
   knows(uniqueVar49, uniqueVar49),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.21857578450653384) :-  /* #pos=6 */ 
   knows(a, uniqueVar50),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar50, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.1923191411153547) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar51),
   knows(uniqueVar51, uniqueVar51),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.2093688489158066) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.18436541071709567) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar52, a),
   knows(uniqueVar53, uniqueVar52),
   knows(uniqueVar53, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.20913016220024966) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar54, a),
   knows(underscore, uniqueVar54),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.17565374921594526) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar55, a),
   knows(underscore, uniqueVar55),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.20861959129809846) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(underscore, uniqueVar55)
%   knows(b, underscore)
%   knows(uniqueVar53, uniqueVar52)
%   knows(underscore, uniqueVar54)
%   knows(a, uniqueVar51)
%   knows(a, uniqueVar48)
%   knows(b, a)
%   knows(uniqueVar52, a)
%   knows(uniqueVar50, a)
%   knows(uniqueVar51, uniqueVar51)
%   knows(uniqueVar49, uniqueVar49)
%   knows(a, uniqueVar49)
%   knows(uniqueVar54, a)
%   knows(a, uniqueVar50)
%   knows(uniqueVar48, uniqueVar48)
%   knows(uniqueVar55, a)
%   knows(uniqueVar53, a)
%   knows(uniqueVar50, uniqueVar50)

%%%%%  WILL-Produced Tree #8 @ 10:54:43 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.17326110543369536;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.1890514850369187;  // std dev = 0,979, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.12988316104316686;  // std dev = 1,230, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.14900969624337618;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.08345675744197376;  // std dev = 2,524, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, B), knows(D, D) )
%   | | then return 0.17466522220808162;  // std dev = 0,169, 268,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=260 */
%   | | else if ( knows(E, A), knows(F, E) )
%   | | | then if ( knows(F, A) )
%   | | | | then return 0.13894271362499264;  // std dev = 5,881, 496,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=458 */
%   | | | | else return 0.1740237090194458;  // std dev = 2,609, 318,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=311 */
%   | | | else return 0.1814537234933347;  // std dev = 0,070, 202,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=201 */


% Clauses:

trusts(A, B, 0.17326110543369536) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1890514850369187) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.12988316104316686) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.14900969624337618) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.08345675744197376) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.17466522220808162) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.13894271362499264) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.1740237090194458) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.1814537234933347) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.17326110543369536) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.1890514850369187) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar56, a),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar56, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.12988316104316686) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar57, a),
   knows(uniqueVar57, uniqueVar57),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.14900969624337618) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar58, a),
   knows(uniqueVar58, uniqueVar58),
   knows(a, uniqueVar58),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.08345675744197376) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar59, a),
   knows(uniqueVar59, uniqueVar59),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.17466522220808162) :-  /* #neg=8 #pos=260 */ 
   knows(uniqueVar60, a),
   knows(uniqueVar60, uniqueVar60),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.13894271362499264) :-  /* #neg=38 #pos=458 */ 
   knows(uniqueVar61, a),
   knows(uniqueVar62, uniqueVar61),
   knows(uniqueVar62, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.1740237090194458) :-  /* #neg=7 #pos=311 */ 
   knows(uniqueVar63, a),
   knows(underscore, uniqueVar63),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1814537234933347) :-  /* #neg=1 #pos=201 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar57, a)
%   knows(uniqueVar56, b)
%   knows(uniqueVar59, uniqueVar59)
%   knows(uniqueVar58, uniqueVar58)
%   knows(uniqueVar62, a)
%   knows(uniqueVar59, a)
%   knows(uniqueVar61, a)
%   knows(uniqueVar60, uniqueVar60)
%   knows(uniqueVar62, uniqueVar61)
%   knows(b, b)
%   knows(uniqueVar56, uniqueVar56)
%   knows(uniqueVar56, a)
%   knows(uniqueVar57, uniqueVar57)
%   knows(uniqueVar63, a)
%   knows(b, a)
%   knows(a, uniqueVar58)
%   knows(uniqueVar58, a)
%   knows(underscore, uniqueVar63)
%   knows(uniqueVar60, a)

%%%%%  WILL-Produced Tree #9 @ 10:54:53 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.14006912509767702;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.14026439677427172;  // std dev = 2,160, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.10352978130126075;  // std dev = 4,684, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else if ( knows(C, A) )
%   | | | | then return 0.16050433609645762;  // std dev = 0,014, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else return 0.1361761367665717;  // std dev = 0,978, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(E, A) )
%   | then return 0.1513145385628256;  // std dev = 0,133, 524,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=514 */
%   | else if ( knows(A, F), knows(F, B) )
%   | | then if ( knows(B, F) )
%   | | | then return 0.1541092157524235;  // std dev = 1,008, 80,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | | else return 0.09473780268089832;  // std dev = 0,266, 90,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=83 */
%   | | else return 0.1416751011925075;  // std dev = 0,162, 824,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=801 */


% Clauses:

trusts(A, B, 0.14006912509767702) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.14026439677427172) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.10352978130126075) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.16050433609645762) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.1361761367665717) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.1513145385628256) :- 
     knows(C, B), 
     knows(C, A), 
     !. // Clause #6.

trusts(A, B, 0.1541092157524235) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.09473780268089832) :- 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #8.

trusts(A, B, 0.1416751011925075) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.14006912509767702) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar64),
   knows(uniqueVar64, uniqueVar64),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.14026439677427172) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar65),
   knows(uniqueVar65, uniqueVar65),
   knows(b, uniqueVar65),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.10352978130126075) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar66),
   knows(uniqueVar66, uniqueVar66),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.16050433609645762) :-  /* #pos=6 */ 
   knows(a, uniqueVar67),
   knows(uniqueVar67, uniqueVar67),
   knows(uniqueVar67, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.1361761367665717) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar68),
   knows(uniqueVar68, uniqueVar68),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.1513145385628256) :-  /* #neg=10 #pos=514 */ 
   knows(uniqueVar69, b),
   knows(uniqueVar69, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.1541092157524235) :-  /* #neg=1 #pos=79 */ 
   knows(a, uniqueVar70),
   knows(uniqueVar70, b),
   knows(b, uniqueVar70),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.09473780268089832) :-  /* #neg=7 #pos=83 */ 
   knows(a, uniqueVar71),
   knows(uniqueVar71, b),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1416751011925075) :-  /* #neg=23 #pos=801 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar67, a)
%   knows(uniqueVar69, b)
%   knows(uniqueVar66, uniqueVar66)
%   knows(b, underscore)
%   knows(a, uniqueVar68)
%   knows(uniqueVar67, uniqueVar67)
%   knows(uniqueVar64, uniqueVar64)
%   knows(uniqueVar68, uniqueVar68)
%   knows(uniqueVar71, b)
%   knows(b, uniqueVar70)
%   knows(a, uniqueVar67)
%   knows(uniqueVar70, b)
%   knows(a, uniqueVar66)
%   knows(a, uniqueVar64)
%   knows(uniqueVar65, uniqueVar65)
%   knows(b, a)
%   knows(b, uniqueVar65)
%   knows(a, uniqueVar71)
%   knows(a, uniqueVar65)
%   knows(a, uniqueVar70)
%   knows(uniqueVar69, a)

%%%%%  WILL-Produced Tree #10 @ 10:55:02 10/21/22.  %%%%%

% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.12165841594673887;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.11727505413817003;  // std dev = 2,168, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.10747482126467911;  // std dev = 2,339, 74,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=68 */
%   | | | else if ( knows(D, A) )
%   | | | | then return 0.0856904036308947;  // std dev = 4,073, 178,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=159 */
%   | | | | else return 0.016959063193898838;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.12674582182512226;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(B, G) )
%   | | then if ( knows(G, H) )
%   | | | then return 0.10719687069051645;  // std dev = 2,683, 122,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=114 */
%   | | | else return -0.09126577511761985;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.11883480155835295;  // std dev = 0,195, 170,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=163 */


% Clauses:

trusts(A, B, 0.12165841594673887) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.11727505413817003) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.10747482126467911) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.0856904036308947) :- 
     knows(A, C), 
     knows(C, C), 
     knows(D, A), 
     !. // Clause #4.

trusts(A, B, 0.016959063193898838) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.12674582182512226) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.10719687069051645) :- 
     knows(C, A), 
     knows(B, D), 
     knows(D, E), 
     !. // Clause #7.

trusts(A, B, -0.09126577511761985) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.11883480155835295) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.12165841594673887) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar72),
   knows(uniqueVar72, uniqueVar72),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.11727505413817003) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar73),
   knows(uniqueVar73, uniqueVar73),
   knows(b, uniqueVar73),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.10747482126467911) :-  /* #neg=6 #pos=68 */ 
   knows(a, uniqueVar74),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar74, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.0856904036308947) :-  /* #neg=19 #pos=159 */ 
   knows(a, uniqueVar75),
   knows(uniqueVar75, uniqueVar75),
   knows(underscore, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.016959063193898838) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar76),
   knows(uniqueVar76, uniqueVar76),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.12674582182512226) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar77),
   knows(uniqueVar77, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.10719687069051645) :-  /* #neg=8 #pos=114 */ 
   knows(underscore, a),
   knows(b, uniqueVar78),
   knows(uniqueVar78, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, -0.09126577511761985) :-  /* #neg=1 #pos=3 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.11883480155835295) :-  /* #neg=7 #pos=163 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar74, a)
%   knows(underscore, a)
%   knows(b, underscore)
%   knows(uniqueVar78, underscore)
%   knows(b, uniqueVar73)
%   knows(b, uniqueVar78)
%   knows(uniqueVar73, uniqueVar73)
%   knows(a, uniqueVar72)
%   knows(b, a)
%   knows(uniqueVar72, uniqueVar72)
%   knows(a, uniqueVar73)
%   knows(uniqueVar75, uniqueVar75)
%   knows(a, uniqueVar76)
%   knows(uniqueVar77, a)
%   knows(a, uniqueVar74)
%   knows(uniqueVar74, uniqueVar74)
%   knows(a, uniqueVar75)
%   knows(a, uniqueVar77)
%   knows(uniqueVar76, uniqueVar76)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 169, [
   knows(uniqueVar57, a),
   knows(a, uniqueVar3),
   knows(b, underscore),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar44, a),
   knows(uniqueVar62, uniqueVar61),
   knows(a, uniqueVar38),
   knows(uniqueVar5, a),
   knows(uniqueVar31, a),
   knows(a, uniqueVar37),
   knows(a, uniqueVar64),
   knows(uniqueVar52, a),
   knows(a, uniqueVar72),
   knows(uniqueVar51, uniqueVar51),
   knows(underscore, uniqueVar7),
   knows(uniqueVar49, uniqueVar49),
   knows(a, uniqueVar73),
   knows(uniqueVar41, b),
   knows(a, uniqueVar77),
   knows(b, uniqueVar39),
   knows(a, uniqueVar10),
   knows(uniqueVar16, a),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar17),
   knows(uniqueVar3, a),
   knows(uniqueVar42, uniqueVar42),
   knows(a, uniqueVar68),
   knows(a, uniqueVar39),
   knows(a, uniqueVar4),
   knows(b, uniqueVar73),
   knows(uniqueVar56, a),
   knows(uniqueVar6, a),
   knows(b, uniqueVar15),
   knows(b, a),
   knows(uniqueVar45, a),
   knows(uniqueVar27, a),
   knows(a, uniqueVar49),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar44, uniqueVar44),
   knows(uniqueVar53, a),
   knows(b, uniqueVar46),
   knows(uniqueVar60, a),
   knows(underscore, uniqueVar23),
   knows(uniqueVar67, a),
   knows(a, uniqueVar12),
   knows(uniqueVar18, a),
   knows(underscore, uniqueVar32),
   knows(uniqueVar74, a),
   knows(uniqueVar62, a),
   knows(uniqueVar20, a),
   knows(uniqueVar68, uniqueVar68),
   knows(a, uniqueVar1),
   knows(uniqueVar14, a),
   knows(uniqueVar18, b),
   knows(b, uniqueVar70),
   knows(a, uniqueVar67),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar27, uniqueVar27),
   knows(a, uniqueVar66),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar16, uniqueVar16),
   knows(uniqueVar54, a),
   knows(uniqueVar77, a),
   knows(uniqueVar29, a),
   knows(underscore, uniqueVar29),
   knows(uniqueVar76, uniqueVar76),
   knows(uniqueVar41, a),
   knows(uniqueVar29, b),
   knows(a, uniqueVar33),
   knows(uniqueVar66, uniqueVar66),
   knows(uniqueVar58, uniqueVar58),
   knows(uniqueVar61, a),
   knows(b, b),
   knows(uniqueVar57, uniqueVar57),
   knows(uniqueVar47, a),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar73, uniqueVar73),
   knows(b, uniqueVar65),
   knows(uniqueVar43, uniqueVar43),
   knows(uniqueVar9, uniqueVar9),
   knows(a, uniqueVar76),
   knows(uniqueVar38, uniqueVar38),
   knows(a, uniqueVar74),
   knows(uniqueVar32, a),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar7, a),
   knows(uniqueVar8, a),
   knows(uniqueVar26, uniqueVar26),
   knows(uniqueVar78, underscore),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar33, uniqueVar33),
   knows(underscore, uniqueVar54),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar12, uniqueVar12),
   knows(uniqueVar30, a),
   knows(uniqueVar21, a),
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar24),
   knows(a, uniqueVar75),
   knows(a, uniqueVar28),
   knows(uniqueVar69, b),
   knows(a, uniqueVar43),
   knows(uniqueVar67, uniqueVar67),
   knows(a, uniqueVar25),
   knows(uniqueVar60, uniqueVar60),
   knows(underscore, uniqueVar8),
   knows(uniqueVar13, a),
   knows(uniqueVar28, uniqueVar28),
   knows(b, uniqueVar36),
   knows(uniqueVar70, b),
   knows(b, uniqueVar78),
   knows(uniqueVar53, uniqueVar52),
   knows(a, uniqueVar51),
   knows(a, uniqueVar2),
   knows(uniqueVar17, a),
   knows(a, uniqueVar35),
   knows(uniqueVar50, a),
   knows(uniqueVar19, uniqueVar19),
   knows(a, uniqueVar58),
   knows(a, uniqueVar65),
   knows(uniqueVar19, a),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar11, a),
   knows(uniqueVar40, a),
   knows(uniqueVar48, uniqueVar48),
   knows(uniqueVar55, a),
   knows(a, uniqueVar27),
   knows(uniqueVar25, uniqueVar25),
   knows(a, uniqueVar34),
   knows(underscore, uniqueVar55),
   knows(underscore, a),
   knows(uniqueVar59, uniqueVar59),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar17, uniqueVar17),
   knows(uniqueVar43, a),
   knows(uniqueVar64, uniqueVar64),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar20, uniqueVar20),
   knows(a, uniqueVar48),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar75, uniqueVar75),
   knows(a, uniqueVar70),
   knows(a, uniqueVar50),
   knows(uniqueVar58, a),
   knows(a, uniqueVar45),
   knows(a, uniqueVar13),
   knows(uniqueVar24, a),
   knows(uniqueVar37, a),
   knows(uniqueVar22, a),
   knows(uniqueVar34, uniqueVar34),
   knows(a, uniqueVar26),
   knows(uniqueVar56, b),
   knows(a, uniqueVar11),
   knows(uniqueVar59, a),
   knows(uniqueVar71, b),
   knows(a, uniqueVar9),
   knows(uniqueVar63, a),
   knows(uniqueVar47, uniqueVar46),
   knows(a, uniqueVar71),
   knows(uniqueVar72, uniqueVar72),
   knows(underscore, uniqueVar63),
   knows(uniqueVar69, a),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar36, b),
   knows(uniqueVar42, a)]).
