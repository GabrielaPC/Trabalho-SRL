
% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data/trust/train/train_pos.txt, data/trust/train/train_neg.txt, data/trust/train/train_bk.txt, data/trust/train/train_facts.txt]
%  for N=0: args[N]=data/trust/train/train_pos.txt

% getInputArgWithDefaultValue: args=[data/trust/train/train_pos.txt, data/trust/train/train_neg.txt, data/trust/train/train_bk.txt, data/trust/train/train_facts.txt]
%  for N=1: args[N]=data/trust/train/train_neg.txt

% getInputArgWithDefaultValue: args=[data/trust/train/train_pos.txt, data/trust/train/train_neg.txt, data/trust/train/train_bk.txt, data/trust/train/train_facts.txt]
%  for N=2: args[N]=data/trust/train/train_bk.txt

% getInputArgWithDefaultValue: args=[data/trust/train/train_pos.txt, data/trust/train/train_neg.txt, data/trust/train/train_bk.txt, data/trust/train/train_facts.txt]
%  for N=3: args[N]=data/trust/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 13.619 facts.
% Have read 1.931 examples from 'data/trust/train' [data/trust/train/train*].
% Have read 77 examples from 'data/trust/train' [data/trust/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 trusts(A, B)
%  targetPred:                trusts/2
%  targetArgTypes:            signature = [const, const], types = [+person, +person]
%  targets:                   [trusts(A, B)]
%  targetPredicates:          [trusts/2]
%  targetArgSpecs:            [[A[+person], B[+person]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 141 milliseconds

% Read 1.931 pos examples and 77 neg examples.
% Time to init learnOneClause: 145 milliseconds
% Old dirnull
Setting model dir

% Have 1.931 'raw' positive examples and kept 1.931.
% Have 77 'raw' negative examples and kept 77.

% processing backup's for trusts
%  POS EX = 1.931
%  NEG EX = 77

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data/trust/train/models/
% Learning 10 trees in this iteration for trusts

% Learn model for: trusts
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077538453
Set score:0.0025
% Dataset size: 2.008
Computing probabilities
prob time:6 milliseconds
No hidden examples for : trusts
Time to build dataset: 11 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077537332
Set score:0.0025

% Have these 10 positive seeds: 39 339 785 1068 1122 1214 1273 1333 1607 1864

% LearnOneClause Parameters:
%   Targets (1):
%    trusts(+person, +person)
%  Modes (3):
%    knows(+person, -person),
%    knows(-person, +person),
%    prior(+person)

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for knows/2 with 7.577 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for knows/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for knows/2.
% [ LazyGroundClauseIndex ]  Building full index for prior/1 with 1 assertions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398329 (regressionFit = 73,398328, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,398329): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033215 (regressionFit = 74,033214, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892843 (regressionFit = 73,892842, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,707333 (regressionFit = 73,707331, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,871478 (regressionFit = 73,871476, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047227 (regressionFit = 74,047225, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,020462 (regressionFit = 74,020460, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,247726): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,031883 (regressionFit = 74,031881, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,046320 (regressionFit = 74,046318, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,035502 (regressionFit = 74,035500, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06807163681799892 to score=0.0025 #egs=490.0
Comparing variance: 0.026279724552636413 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,068072)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,068072) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026280)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026280) into the LAST position (#2) in the search queue.

% Time for loop #1: 6,388 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 14 51 168 204 227 233 277 481
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,796973 (regressionFit = 32,796970, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,796973): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,354842 (regressionFit = 33,354839, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,318697 (regressionFit = 33,318694, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,321455 (regressionFit = 33,321452, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,214697 (regressionFit = 33,214694, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,347751 (regressionFit = 33,347748, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,353908 (regressionFit = 33,353905, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024375000000006076 to score=0.0025 #egs=160.0
Comparing variance: 0.08756657483930584 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087567)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087567) into position #1 in the search queue (new size=2).

% Time for loop #2: 699 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 25 38 41 65 81 95 110 162 171 187
%     Score = -28,864319 (regressionFit = 28,864316, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,864319): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,879848 (regressionFit = 28,879845, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,800357 (regressionFit = 28,800354, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,800357): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,876019 (regressionFit = 28,876016, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894636 (regressionFit = 28,894633, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894657 (regressionFit = 28,894654, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,088.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09157505193906215 to score=0.0025 #egs=304.0
Comparing variance: 0.03698224852071082 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036982)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036982) into position #1 in the search queue (new size=2).

% Time for loop #3: 343 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 2 4 10 11 14 18 19 21 22
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,950003 (regressionFit = 0,950000, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,950003): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: -1.4802973661668753E-16 to score=0.0025 #egs=6.0
Comparing variance: 0.047499999999999785 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 78 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 4 5 7 11 13 18
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -73,2477):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon19, A))

% Have these 10 positive seeds: 17 162 375 379 594 669 825 957 1123 1180

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600256 (regressionFit = 39,600255, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,600256): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818384 (regressionFit = 39,818383, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828196 (regressionFit = 39,828195, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,781731 (regressionFit = 39,781729, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,823372 (regressionFit = 39,823370, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,817533 (regressionFit = 39,817531, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,864744 (regressionFit = 39,864742, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,886757 (regressionFit = 39,886755, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221082482 to score=0.0025 #egs=424.0
Comparing variance: 0.034378143705590496 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,034378)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,034378) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,906 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 173 607 690 699 755 773 942 983 986 990

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581829 (regressionFit = 37,581827, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,581829): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435114 (regressionFit = 37,435113, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,435114): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,411430): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605058 (regressionFit = 37,605056, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,558780 (regressionFit = 37,558778, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,591537 (regressionFit = 37,591534, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,600932 (regressionFit = 37,600930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,599450 (regressionFit = 37,599448, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04130221003055439 to score=0.0025 #egs=834.0
Comparing variance: 0.011405325443791324 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,041302)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,041302) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011405) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,762 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 42 402 468 479 530 610 645 653 706
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,431477 (regressionFit = 34,431474, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,431477): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,440650 (regressionFit = 34,440647, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,443513 (regressionFit = 34,443510, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,443775 (regressionFit = 34,443772, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,439499 (regressionFit = 34,439496, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,400752 (regressionFit = 34,400749, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,400752): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,430996 (regressionFit = 34,430993, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,109502 (regressionFit = 34,109499, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,109502): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,436293 (regressionFit = 34,436290, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,364478 (regressionFit = 34,364475, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,438557 (regressionFit = 34,438554, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05676649305556237 to score=0.0025 #egs=480.0
Comparing variance: 0.019382999776567947 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019383)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019383) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,196 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 10 92 126 135 252 259
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,857267 (regressionFit = 6,857264, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,857267): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,838986 (regressionFit = 6,838983, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,838986): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,845915 (regressionFit = 6,845912, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 36,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,819856 (regressionFit = 6,819853, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,819856): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,767371 (regressionFit = 6,767368, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,767371): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,823744 (regressionFit = 6,823741, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858384 (regressionFit = 6,858382, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858762 (regressionFit = 6,858759, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858454 (regressionFit = 6,858452, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,860003 (regressionFit = 6,860000, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 319 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon2563, A), knows(Anon2635, Anon2563))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #1 @ 10:53:30 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.8331489350995097;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.7561752508889822;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.7977322684328414;  // std dev = 5,220, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.8449910403626665;  // std dev = 1,987, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.7981489350995122;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.8466104735610475;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.8331489350995097) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.7561752508889822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.8581489350995123) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.8081489350995122) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.7977322684328414) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.8449910403626665) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.7981489350995122) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8466104735610475) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.8331489350995097) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7561752508889822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar2),
   knows(uniqueVar2, uniqueVar2),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.8581489350995123) :-  /* #pos=6 */ 
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar4),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.7977322684328414) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar5, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar6, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.8449910403626665) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar7, a),
   knows(underscore, uniqueVar7),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7981489350995122) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar8, a),
   knows(underscore, uniqueVar8),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8466104735610475) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar2, uniqueVar2)
%   knows(a, uniqueVar3)
%   knows(uniqueVar3, a)
%   knows(b, underscore)
%   knows(uniqueVar7, a)
%   knows(uniqueVar4, uniqueVar4)
%   knows(uniqueVar8, a)
%   knows(a, uniqueVar1)
%   knows(a, uniqueVar4)
%   knows(underscore, uniqueVar8)
%   knows(uniqueVar6, a)
%   knows(a, uniqueVar2)
%   knows(uniqueVar5, a)
%   knows(b, a)
%   knows(underscore, uniqueVar7)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar1, uniqueVar1)
%   knows(uniqueVar6, uniqueVar5)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 1 trees is 13,948 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01938299977656799
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:381 milliseconds
No hidden examples for : trusts
Time to build dataset: 398 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03645328821973537
Set score:0.0025

% Have these 10 positive seeds: 184 215 499 538 932 941 1251 1351 1601 1627

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780650 (regressionFit = 72,780649, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,780650): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190686 (regressionFit = 73,190685, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098273 (regressionFit = 73,098272, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,934135 (regressionFit = 72,934133, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,083089 (regressionFit = 73,083087, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,197226 (regressionFit = 73,197224, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180663 (regressionFit = 73,180661, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,682084): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180320 (regressionFit = 73,180318, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,189432 (regressionFit = 73,189430, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06759051175403913 to score=0.0025 #egs=490.0
Comparing variance: 0.0260624053267357 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,067591)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,067591) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026062)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026062) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,593 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 67 87 112 190 217 258 347
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,758692 (regressionFit = 32,758689, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,758692): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,118866 (regressionFit = 33,118863, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,085074 (regressionFit = 33,085071, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,097581 (regressionFit = 33,097578, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,005786 (regressionFit = 33,005783, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,112595 (regressionFit = 33,112592, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,119129 (regressionFit = 33,119126, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999968 to score=0.0025 #egs=160.0
Comparing variance: 0.0874505739497112 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087451)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087451) into position #1 in the search queue (new size=2).

% Time for loop #2: 415 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 159 163 187 195 205 230 237 311
%     Score = -28,827988 (regressionFit = 28,827985, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,827988): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,839018 (regressionFit = 28,839015, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,796211 (regressionFit = 28,796208, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,796211): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,839119 (regressionFit = 28,839116, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,855903 (regressionFit = 28,855900, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,856032 (regressionFit = 28,856029, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,087.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09157505193904986 to score=0.0025 #egs=304.0
Comparing variance: 0.036822769656512926 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036823)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036823) into position #1 in the search queue (new size=2).

% Time for loop #3: 326 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 8 9 11 13 14 19 20 21 22
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,950003 (regressionFit = 0,950000, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,950003): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 7.401486830834377E-17 to score=0.0025 #egs=6.0
Comparing variance: 0.04750000000000041 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 48 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 9 12 13 16 17 18
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -72,6821):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon4313, A))

% Have these 10 positive seeds: 134 231 309 353 464 515 570 615 627 633

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,375242): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518845 (regressionFit = 39,518844, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522232 (regressionFit = 39,522231, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,354884): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,488796 (regressionFit = 39,488794, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,514477 (regressionFit = 39,514475, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,534467 (regressionFit = 39,534465, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,558124 (regressionFit = 39,558122, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019871340251457092 to score=0.0025 #egs=1222.0
Comparing variance: 0.05091927147765011 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019871)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019871) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,050919)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,050919) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,635 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 15 17 75 108 153 159 222 236 259 271

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057704 (regressionFit = 15,057703, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,057704): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030703 (regressionFit = 15,030702, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,030703): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,000738): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,015800 (regressionFit = 15,015798, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,069562 (regressionFit = 15,069560, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,065656 (regressionFit = 15,065654, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,053386 (regressionFit = 15,053384, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,051.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0659212063368675 to score=0.0025 #egs=126.0
Comparing variance: 0.0393803764123301 to score=0.0025 #egs=170.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 126,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,065921)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,065921) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,039380)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,039380) into position #2 in the search queue (new size=3).

% Time for loop #7: 339 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 126 positive examples, of which 126 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]'
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 34 41 44 48 71 74 107 111 120
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,286156 (regressionFit = 8,286153, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,286156): trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,277281 (regressionFit = 8,277278, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,277281): trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,305644 (regressionFit = 8,305641, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, B).  [covers 26,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,130356 (regressionFit = 8,130353, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,130356): trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,303435 (regressionFit = 8,303432, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, D), knows(D, C).  [covers 24,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,173367 (regressionFit = 8,173364, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,288215 (regressionFit = 8,288212, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(_, C).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(_, C).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,066.
% Will extend: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10525153248940874 to score=0.0025 #egs=50.0
Comparing variance: 0.037733896120992996 to score=0.0025 #egs=76.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 76,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,037734)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,037734) into position #2 in the search queue (new size=3).

% Time for loop #8: 134 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
% This clause covers 50 positive examples, of which 50 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 23 27 31 48 55 60 64 75 101

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,658453): trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682449 (regressionFit = 6,682448, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,664853 (regressionFit = 6,664851, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,694207 (regressionFit = 6,694205, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,693710 (regressionFit = 6,693708, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 2,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,680084 (regressionFit = 6,680082, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 120,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,694207 (regressionFit = 6,694205, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,692259 (regressionFit = 6,692257, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 30,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,676698 (regressionFit = 6,676695, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 156,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,692259 (regressionFit = 6,692257, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 30,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,693710 (regressionFit = 6,693708, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,162499 (regressionFit = 6,162497, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,162499): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,684762 (regressionFit = 6,684760, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 162,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,039.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
Comparing variance: 0.22332181843132126 to score=0.0025 #egs=6.0
Comparing variance: 0.029405889315173486 to score=0.0025 #egs=164.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 164,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,029406)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,029406) into position #2 in the search queue (new size=3).

% Time for loop #9: 263 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon6849, Anon6919))
Created a leaf under (trusts(A, B) :- knows(Anon7869, B), knows(Anon7869, Anon7869))
Created a leaf under (trusts(A, B) :- knows(B, Anon5967), knows(Anon5967, B))

%%%%%  WILL-Produced Tree #2 @ 10:53:38 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.6994914035015026;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.637613635329692;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.7036147903757071;  // std dev = 0,141, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(B, G) )
%   | | then if ( knows(F, G) )
%   | | | then return 0.6100029593359543;  // std dev = 2,294, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | | else return 0.6863343487994458;  // std dev = 0,194, 76,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | else if ( knows(H, B), knows(H, H) )
%   | | | then return 0.3949349146884212;  // std dev = 1,158, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.698150120082;  // std dev = 0,171, 164,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=159 */


% Clauses:

trusts(A, B, 0.6994914035015026) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.637613635329692) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.7194734122109544) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.6794533872440252) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.7036147903757071) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.6100029593359543) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #6.

trusts(A, B, 0.6863343487994458) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.3949349146884212) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.698150120082) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.6994914035015026) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.637613635329692) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.7194734122109544) :-  /* #pos=6 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar11, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.6794533872440252) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar12),
   knows(uniqueVar12, uniqueVar12),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7036147903757071) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.6100029593359543) :-  /* #neg=6 #pos=44 */ 
   knows(uniqueVar14, a),
   knows(b, uniqueVar15),
   knows(uniqueVar14, uniqueVar15),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.6863343487994458) :-  /* #neg=3 #pos=73 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.3949349146884212) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar16, a),
   knows(uniqueVar16, uniqueVar16),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.698150120082) :-  /* #neg=5 #pos=159 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar12)
%   knows(b, underscore)
%   knows(underscore, a)
%   knows(a, uniqueVar11)
%   knows(uniqueVar14, a)
%   knows(uniqueVar13, a)
%   knows(uniqueVar10, uniqueVar10)
%   knows(a, uniqueVar9)
%   knows(uniqueVar14, uniqueVar15)
%   knows(b, uniqueVar15)
%   knows(b, a)
%   knows(uniqueVar11, uniqueVar11)
%   knows(uniqueVar16, uniqueVar16)
%   knows(uniqueVar12, uniqueVar12)
%   knows(uniqueVar9, uniqueVar9)
%   knows(uniqueVar11, a)
%   knows(a, uniqueVar13)
%   knows(a, uniqueVar10)
%   knows(uniqueVar16, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 2 trees is 22,203 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03938037641233039
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:572 milliseconds
No hidden examples for : trusts
Time to build dataset: 594 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03597287843028468
Set score:0.0025

% Have these 10 positive seeds: 395 561 640 771 846 1000 1172 1679 1720 1811

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,970424): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,205585 (regressionFit = 72,205583, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228633 (regressionFit = 72,228631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,200731 (regressionFit = 72,200729, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,219791 (regressionFit = 72,219789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,152994 (regressionFit = 72,152991, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,157891 (regressionFit = 72,157889, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228633 (regressionFit = 72,228631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,094399 (regressionFit = 72,094397, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,220212 (regressionFit = 72,220210, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,200731 (regressionFit = 72,200729, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,157891 (regressionFit = 72,157889, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,205585 (regressionFit = 72,205583, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,224038 (regressionFit = 72,224036, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,222398 (regressionFit = 72,222396, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,224038 (regressionFit = 72,224036, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,094399 (regressionFit = 72,094397, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,219791 (regressionFit = 72,219789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,230274 (regressionFit = 72,230272, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,226539 (regressionFit = 72,226537, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.01012714589415195 to score=0.0025 #egs=584.0
Comparing variance: 0.04638775937673792 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010127)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010127) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046388)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,046388) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,354 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 132 134 482 609 724 948 1293 1327 1347 1350

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -66,053072 (regressionFit = 66,053071, penalties=1.12E-6) for clause:  trusts(A, _) :- knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,053072): trusts(A, _) :- knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055289 (regressionFit = 66,055288, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895323 (regressionFit = 65,895322, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,895323): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922132 (regressionFit = 65,922130, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,036697 (regressionFit = 66,036695, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922176 (regressionFit = 65,922174, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055362 (regressionFit = 66,055360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,609190): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,873149 (regressionFit = 65,873147, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053072 (regressionFit = 66,053071, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(A, B).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(A, _).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,054188 (regressionFit = 66,054185, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, _).  [covers 16,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(_, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(_, B).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,054188 (regressionFit = 66,054185, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, A).  [covers 16,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,046712 (regressionFit = 66,046711, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,036697 (regressionFit = 66,036695, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,003686 (regressionFit = 66,003684, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053904 (regressionFit = 66,053902, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056012 (regressionFit = 66,056010, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922176 (regressionFit = 65,922174, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053072 (regressionFit = 66,053071, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,046712 (regressionFit = 66,046711, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922132 (regressionFit = 65,922130, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056050 (regressionFit = 66,056048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,774923 (regressionFit = 65,774921, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,050063 (regressionFit = 66,050061, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053073 (regressionFit = 66,053071, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, A).  [covers 18,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056050 (regressionFit = 66,056048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,003686 (regressionFit = 66,003684, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055362 (regressionFit = 66,055360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,042354 (regressionFit = 66,042352, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,045241 (regressionFit = 66,045239, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1052181585294915 to score=0.0025 #egs=140.0
Comparing variance: 0.039625113826422115 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,105218)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,105218) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039625)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039625) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,352 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 11 13 26 30 39 40 51 55 62
%     Score = -14,638671 (regressionFit = 14,638668, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,638671): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,382803 (regressionFit = 14,382800, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,382803): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,409079 (regressionFit = 14,409076, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,730251 (regressionFit = 14,730248, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,428479 (regressionFit = 14,428476, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,105.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07598860049822885 to score=0.0025 #egs=84.0
Comparing variance: 0.1428528094736959 to score=0.0025 #egs=56.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 56,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,142853)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,142853) into position #1 in the search queue (new size=3).

% Time for loop #3: 189 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 84 positive examples, of which 84 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/56,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 0 9 12 26 32 38 44 52 54
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,858342 (regressionFit = 7,858339, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,858342): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,989201 (regressionFit = 7,989198, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,785740 (regressionFit = 7,785737, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,785740): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,143.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
Comparing variance: 1.3406798553091312E-4 to score=0.0025 #egs=6.0
Comparing variance: 0.15569864725976168 to score=0.0025 #egs=50.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 50,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,155699)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,155699) into position #1 in the search queue (new size=3).

% Time for loop #4: 99 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/50,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 5 23 27 30 32 36 37 42 48
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -7,418480 (regressionFit = 7,418478, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,418480): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
%     Score = -7,781503 (regressionFit = 7,781500, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,156.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 79 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 6 167 240 282 344 456 525 666 718 743

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878591 (regressionFit = 50,878590, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,878591): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788128 (regressionFit = 50,788127, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,788128): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,832847 (regressionFit = 50,832845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,864781 (regressionFit = 50,864779, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,807833 (regressionFit = 50,807831, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,857689 (regressionFit = 50,857687, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,773187): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,853994 (regressionFit = 50,853993, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,864781 (regressionFit = 50,864779, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,791459 (regressionFit = 50,791457, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,862669 (regressionFit = 50,862666, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,875617 (regressionFit = 50,875614, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,807833 (regressionFit = 50,807831, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,853994 (regressionFit = 50,853993, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,832847 (regressionFit = 50,832845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,876962 (regressionFit = 50,876960, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,816635 (regressionFit = 50,816633, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,868607 (regressionFit = 50,868605, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,876962 (regressionFit = 50,876960, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,791459 (regressionFit = 50,791457, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,857689 (regressionFit = 50,857687, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,810733 (regressionFit = 50,810731, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,870908 (regressionFit = 50,870906, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04645171688865064 to score=0.0025 #egs=1012.0
Comparing variance: 0.013838410803272553 to score=0.0025 #egs=272.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.012,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,046452)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,046452) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 272,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,013838)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,013838) into position #2 in the search queue (new size=3).

% Time for loop #6: 2,029 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 1012 positive examples, of which 1012 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]'
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 178 590 823 842 855 1005
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,008629 (regressionFit = 47,008625, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,008629): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,002084 (regressionFit = 47,002081, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,002084): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,972676 (regressionFit = 46,972673, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,972676): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,007788 (regressionFit = 47,007785, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 446,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,005429 (regressionFit = 47,005426, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 876,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,944460 (regressionFit = 46,944458, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,944460): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,988817 (regressionFit = 46,988814, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 1.002,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,638875 (regressionFit = 46,638872, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,638875): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,993422 (regressionFit = 46,993419, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 914,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,933945 (regressionFit = 46,933942, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 400,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,004288 (regressionFit = 47,004285, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 1.008,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06482596519640038 to score=0.0025 #egs=598.0
Comparing variance: 0.019016775459190362 to score=0.0025 #egs=414.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 414,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019017)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019017) into position #1 in the search queue (new size=3).

% Time for loop #7: 1,420 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% This clause covers 598 positive examples, of which 598 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/414,0 pos, 0,0/0,0 neg]'
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 32 66 139 207 224 225 248 261 282 311
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,871334 (regressionFit = 7,871331, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,871334): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,830801 (regressionFit = 7,830798, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,830801): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,865032 (regressionFit = 7,865029, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 38,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,858727 (regressionFit = 7,858724, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 102,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,819442 (regressionFit = 7,819439, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,819442): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,841413 (regressionFit = 7,841410, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 86,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,868047 (regressionFit = 7,868044, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 404,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,871408 (regressionFit = 7,871406, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 326,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,862879 (regressionFit = 7,862876, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 88,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,872388 (regressionFit = 7,872385, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 410,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 346 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% This clause covers 358 positive examples, of which 358 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon11053, A), knows(Anon11125, Anon11053))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #3 @ 10:53:48 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.5518120675111413;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.5136447952892345;  // std dev = 2,526, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(C, B) )
%   | | | then return 0.5903733300416331;  // std dev = 0,028, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( knows(B, B) )
%   | | | | then return 0.10017902799766576;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return 0.41574215754902616;  // std dev = 2,533, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, A), knows(E, D) )
%   | | then if ( knows(E, A) )
%   | | | then return 0.5118429639836428;  // std dev = 6,226, 598,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=556 */
%   | | | else if ( knows(B, F) )
%   | | | | then return 0.5552433936131714;  // std dev = 2,231, 358,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=353 */
%   | | | | else return 0.5220030724815337;  // std dev = 1,685, 56,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.5499378936412762;  // std dev = 0,118, 272,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=268 */


% Clauses:

trusts(A, B, 0.5518120675111413) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.5136447952892345) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, 0.5903733300416331) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #3.

trusts(A, B, 0.10017902799766576) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #4.

trusts(A, B, 0.41574215754902616) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.5118429639836428) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.5552433936131714) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.5220030724815337) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.5499378936412762) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5518120675111413) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.5136447952892345) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar17, a),
   knows(uniqueVar17, uniqueVar17),
   knows(a, uniqueVar17),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.5903733300416331) :-  /* #pos=6 */ 
   knows(uniqueVar18, a),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar18, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.10017902799766576) :-  /* #neg=2 #pos=2 */ 
   knows(uniqueVar19, a),
   knows(uniqueVar19, uniqueVar19),
   knows(b, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.41574215754902616) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar20, uniqueVar20),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5118429639836428) :-  /* #neg=42 #pos=556 */ 
   knows(uniqueVar21, a),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar22, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.5552433936131714) :-  /* #neg=5 #pos=353 */ 
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar23),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.5220030724815337) :-  /* #neg=3 #pos=53 */ 
   knows(uniqueVar24, a),
   knows(underscore, uniqueVar24),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5499378936412762) :-  /* #neg=4 #pos=268 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(underscore, uniqueVar23)
%   knows(a, uniqueVar17)
%   knows(uniqueVar18, a)
%   knows(b, underscore)
%   knows(uniqueVar17, uniqueVar17)
%   knows(uniqueVar20, a)
%   knows(b, b)
%   knows(uniqueVar18, b)
%   knows(uniqueVar18, uniqueVar18)
%   knows(uniqueVar20, uniqueVar20)
%   knows(uniqueVar17, a)
%   knows(uniqueVar22, uniqueVar21)
%   knows(b, a)
%   knows(uniqueVar19, uniqueVar19)
%   knows(uniqueVar19, a)
%   knows(uniqueVar21, a)
%   knows(uniqueVar23, a)
%   knows(underscore, uniqueVar24)
%   knows(uniqueVar24, a)
%   knows(uniqueVar22, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 3 trees is 32,715 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.019016775459190338
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:695 milliseconds
No hidden examples for : trusts
Time to build dataset: 712 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03549253932467661
Set score:0.0025

% Have these 10 positive seeds: 146 199 390 433 701 846 897 947 1063 1124

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122301 (regressionFit = 71,122300, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,122301): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268683 (regressionFit = 71,268681, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231654 (regressionFit = 71,231652, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231654 (regressionFit = 71,231652, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,260334 (regressionFit = 71,260332, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,261694 (regressionFit = 71,261693, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,241990 (regressionFit = 71,241987, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,241774 (regressionFit = 71,241772, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,223945 (regressionFit = 71,223943, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268683 (regressionFit = 71,268681, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,186016 (regressionFit = 71,186014, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,261694 (regressionFit = 71,261693, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,170863 (regressionFit = 71,170861, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,265238 (regressionFit = 71,265236, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,264832 (regressionFit = 71,264829, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,241990 (regressionFit = 71,241987, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268683 (regressionFit = 71,268681, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231654 (regressionFit = 71,231652, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,186016 (regressionFit = 71,186014, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,260334 (regressionFit = 71,260332, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,250500 (regressionFit = 71,250498, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,079206 (regressionFit = 71,079204, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,079206): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,256763 (regressionFit = 71,256761, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,250500 (regressionFit = 71,250498, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122302 (regressionFit = 71,122300, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,170863 (regressionFit = 71,170861, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,268684 (regressionFit = 71,268681, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,241774 (regressionFit = 71,241772, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,264494 (regressionFit = 71,264492, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,231655 (regressionFit = 71,231652, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,263820 (regressionFit = 71,263818, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06588699639439324 to score=0.0025 #egs=490.0
Comparing variance: 0.02555637416339691 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065887)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065887) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025556)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025556) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,253 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -71,079206 (regressionFit = 71,079204, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 53 63 201 203 221 250 266 271 283
%     Score = -32,284544 (regressionFit = 32,284541, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,284544): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,188949 (regressionFit = 32,188947, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,188949): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,246749 (regressionFit = 32,246746, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,269355 (regressionFit = 32,269352, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,217014 (regressionFit = 32,217011, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,274246 (regressionFit = 32,274243, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,284481 (regressionFit = 32,284478, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437500000000037 to score=0.0025 #egs=160.0
Comparing variance: 0.08572408068683592 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085724)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085724) into position #1 in the search queue (new size=2).

% Time for loop #2: 388 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -71,079206 (regressionFit = 71,079204, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 26 81 117 142 147 148 187 189 286
%     Score = -28,261465 (regressionFit = 28,261462, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,261465): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,257620 (regressionFit = 28,257617, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,257620): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,272664 (regressionFit = 28,272661, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,279926 (regressionFit = 28,279923, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,288466 (regressionFit = 28,288463, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08980316294449284 to score=0.0025 #egs=304.0
Comparing variance: 0.03682521556711645 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036825)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036825) into position #1 in the search queue (new size=2).

% Time for loop #3: 262 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -71,079206 (regressionFit = 71,079204, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 4 5 10 11 13 15 17 20 22
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,954397 (regressionFit = 0,954394, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,954397): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: -3.700743415417188E-17 to score=0.0025 #egs=6.0
Comparing variance: 0.04771969319839971 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047720)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047720) into position #1 in the search queue (new size=2).

% Time for loop #4: 44 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -71,079206 (regressionFit = 71,079204, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 4 6 7 10 13 15 16 18 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -71,0792):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon12817, A))

% Have these 10 positive seeds: 28 125 228 240 296 347 415 518 527 655

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713413 (regressionFit = 38,713412, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,713413): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783658 (regressionFit = 38,783657, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779085 (regressionFit = 38,779084, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,782511 (regressionFit = 38,782509, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,762628 (regressionFit = 38,762626, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,790954 (regressionFit = 38,790951, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,719951 (regressionFit = 38,719949, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787778 (regressionFit = 38,787776, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,774752 (regressionFit = 38,774750, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,761839 (regressionFit = 38,761837, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,762628 (regressionFit = 38,762626, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,720451 (regressionFit = 38,720449, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,788652 (regressionFit = 38,788650, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,765888 (regressionFit = 38,765886, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,790954 (regressionFit = 38,790951, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,761839 (regressionFit = 38,761837, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,782511 (regressionFit = 38,782509, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,794052 (regressionFit = 38,794050, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777258 (regressionFit = 38,777256, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,794052 (regressionFit = 38,794050, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,713414 (regressionFit = 38,713412, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,720451 (regressionFit = 38,720449, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,783659 (regressionFit = 38,783657, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,719951 (regressionFit = 38,719949, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,793149 (regressionFit = 38,793147, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,779086 (regressionFit = 38,779084, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,791386 (regressionFit = 38,791384, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221071723 to score=0.0025 #egs=424.0
Comparing variance: 0.033567500700332986 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033568)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033568) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,522 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 19 197 465 753 837 957 990

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720537 (regressionFit = 36,720536, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,720537): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678533 (regressionFit = 36,678532, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,678533): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,722846 (regressionFit = 36,722844, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,693428 (regressionFit = 36,693426, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,669544 (regressionFit = 36,669542, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,669544): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720851 (regressionFit = 36,720849, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,685088 (regressionFit = 36,685086, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,710153 (regressionFit = 36,710150, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,693428 (regressionFit = 36,693426, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720851 (regressionFit = 36,720849, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,722846 (regressionFit = 36,722844, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716783 (regressionFit = 36,716781, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,709691 (regressionFit = 36,709689, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716783 (regressionFit = 36,716781, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,685088 (regressionFit = 36,685086, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,720538 (regressionFit = 36,720536, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,678534 (regressionFit = 36,678532, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,718020 (regressionFit = 36,718018, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04057588625139584 to score=0.0025 #egs=834.0
Comparing variance: 0.01088174215509356 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040576)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040576) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,010882)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,010882) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,698 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,669544 (regressionFit = 36,669542, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 12 73 103 156 189 301 318 367 413 483
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,783444 (regressionFit = 33,783441, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,783444): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,825050 (regressionFit = 33,825047, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,834486 (regressionFit = 33,834483, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,829145 (regressionFit = 33,829142, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,839932 (regressionFit = 33,839929, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,766728 (regressionFit = 33,766726, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,766728): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,831812 (regressionFit = 33,831809, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,832332 (regressionFit = 33,832329, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,774370 (regressionFit = 33,774367, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,840215 (regressionFit = 33,840212, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,818286 (regressionFit = 33,818283, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,837547 (regressionFit = 33,837544, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.031145583129178055 to score=0.0025 #egs=300.0
Comparing variance: 0.04573604974620284 to score=0.0025 #egs=534.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 534,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,045736)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,045736) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,185 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 300 positive examples, of which 300 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/534,0 pos, 0,0/0,0 neg]'
%     Score = -36,669544 (regressionFit = 36,669542, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 98 203 212 243 338 366 385 431 437 440
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,414123 (regressionFit = 24,414120, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 412,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,414123): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 412,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,405430 (regressionFit = 24,405427, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 302,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,405430): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 302,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,387770 (regressionFit = 24,387767, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 156,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,387770): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 156,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,421273 (regressionFit = 24,421270, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 440,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,413255 (regressionFit = 24,413253, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 528,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,329764 (regressionFit = 24,329762, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,329764): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,420927 (regressionFit = 24,420924, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 454,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,422175 (regressionFit = 24,422172, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 166,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 532,0/534,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 823 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
% This clause covers 256 positive examples, of which 256 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon15367, A), knows(Anon15439, Anon15367))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #4 @ 10:53:59 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.4043625490831312;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.3717144811284412;  // std dev = 5,225, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.4276936779200579;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4019375685796117;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.4186763332294553;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(E, B) )
%   | | | then return 0.4110114555483461;  // std dev = 3,057, 300,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=290 */
%   | | | else if ( knows(F, A) )
%   | | | | then return 0.37766820376964755;  // std dev = 4,190, 256,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=237 */
%   | | | | else return 0.40412538513823615;  // std dev = 2,603, 278,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=271 */
%   | | else return 0.4148802457451366;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.4043625490831312) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.3717144811284412) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.4276936779200579) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.4019375685796117) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.4186763332294553) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.4110114555483461) :- 
     knows(C, A), 
     knows(D, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.37766820376964755) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.40412538513823615) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.4148802457451366) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.4043625490831312) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar25),
   knows(uniqueVar25, uniqueVar25),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.3717144811284412) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar26),
   knows(uniqueVar26, uniqueVar26),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.4276936779200579) :-  /* #pos=6 */ 
   knows(a, uniqueVar27),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar27, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.4019375685796117) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar28),
   knows(uniqueVar28, uniqueVar28),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.4186763332294553) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.4110114555483461) :-  /* #neg=10 #pos=290 */ 
   knows(uniqueVar29, a),
   knows(underscore, uniqueVar29),
   knows(uniqueVar29, b),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.37766820376964755) :-  /* #neg=19 #pos=237 */ 
   knows(uniqueVar30, a),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar31, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.40412538513823615) :-  /* #neg=7 #pos=271 */ 
   knows(uniqueVar32, a),
   knows(underscore, uniqueVar32),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.4148802457451366) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar25, uniqueVar25)
%   knows(uniqueVar29, b)
%   knows(a, uniqueVar26)
%   knows(b, underscore)
%   knows(underscore, uniqueVar32)
%   knows(uniqueVar26, uniqueVar26)
%   knows(a, uniqueVar25)
%   knows(uniqueVar28, uniqueVar28)
%   knows(uniqueVar27, uniqueVar27)
%   knows(uniqueVar31, a)
%   knows(b, a)
%   knows(uniqueVar30, a)
%   knows(uniqueVar31, uniqueVar30)
%   knows(uniqueVar27, a)
%   knows(uniqueVar29, a)
%   knows(a, uniqueVar28)
%   knows(underscore, uniqueVar29)
%   knows(a, uniqueVar27)
%   knows(uniqueVar32, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 4 trees is 43,689 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04573604974620285
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0354219887230586
Set score:0.0025

% Have these 10 positive seeds: 45 106 322 649 700 769 784 830 1059 1108

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018696 (regressionFit = 71,018695, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,018696): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126837 (regressionFit = 71,126836, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100401 (regressionFit = 71,100399, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100401 (regressionFit = 71,100399, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,121440 (regressionFit = 71,121438, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122867 (regressionFit = 71,122865, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,107692 (regressionFit = 71,107690, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,109284 (regressionFit = 71,109282, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,047033 (regressionFit = 71,047031, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,094257 (regressionFit = 71,094255, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,043530 (regressionFit = 71,043528, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122867 (regressionFit = 71,122865, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,034554 (regressionFit = 71,034552, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122328 (regressionFit = 71,122326, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122695 (regressionFit = 71,122693, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,107692 (regressionFit = 71,107690, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100401 (regressionFit = 71,100399, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,043530 (regressionFit = 71,043528, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,121440 (regressionFit = 71,121438, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,110199 (regressionFit = 71,110197, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,991429 (regressionFit = 70,991427, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,991429): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,113585 (regressionFit = 71,113583, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,110199 (regressionFit = 71,110197, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,018697 (regressionFit = 71,018695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,034554 (regressionFit = 71,034552, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,126838 (regressionFit = 71,126836, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,109284 (regressionFit = 71,109282, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,121189 (regressionFit = 71,121186, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,100402 (regressionFit = 71,100399, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,122968 (regressionFit = 71,122966, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0658474211414011 to score=0.0025 #egs=490.0
Comparing variance: 0.02551132454008274 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065847)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065847) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025511)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025511) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,397 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,991429 (regressionFit = 70,991427, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 14 15 78 86 100 107 115 149 156
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,192834 (regressionFit = 32,192832, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,192834): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,227267 (regressionFit = 32,227264, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,255524 (regressionFit = 32,255521, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,203175 (regressionFit = 32,203172, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,265220 (regressionFit = 32,265217, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999926 to score=0.0025 #egs=160.0
Comparing variance: 0.08573585341174253 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085736)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085736) into position #1 in the search queue (new size=2).

% Time for loop #2: 448 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,991429 (regressionFit = 70,991427, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 12 14 100 120 140 163 172 210 251 254
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,271838 (regressionFit = 28,271835, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,271838): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,277069 (regressionFit = 28,277066, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,283380 (regressionFit = 28,283378, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,292187 (regressionFit = 28,292184, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08985377719730102 to score=0.0025 #egs=304.0
Comparing variance: 0.03678026047746589 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036780)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036780) into position #1 in the search queue (new size=2).

% Time for loop #3: 300 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,991429 (regressionFit = 70,991427, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 3 4 12 13 14 17 20 24 25
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -70,9914):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(B, Anon18145))

% Have these 10 positive seeds: 12 28 263 276 282 457 465 601 829 1018

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667078 (regressionFit = 38,667077, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,667078): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717417 (regressionFit = 38,717415, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715266 (regressionFit = 38,715265, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667078 (regressionFit = 38,667077, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,712516 (regressionFit = 38,712514, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,703719 (regressionFit = 38,703717, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,723417 (regressionFit = 38,723414, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,675894 (regressionFit = 38,675892, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,711763 (regressionFit = 38,711760, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717417 (regressionFit = 38,717415, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,699993 (regressionFit = 38,699991, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,703719 (regressionFit = 38,703717, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661326 (regressionFit = 38,661324, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,661326): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,719254 (regressionFit = 38,719252, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,701169 (regressionFit = 38,701167, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,723417 (regressionFit = 38,723414, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667078 (regressionFit = 38,667077, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717417 (regressionFit = 38,717415, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,699993 (regressionFit = 38,699991, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,712516 (regressionFit = 38,712514, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,726186 (regressionFit = 38,726185, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,707954 (regressionFit = 38,707952, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,726186 (regressionFit = 38,726185, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,667079 (regressionFit = 38,667077, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661326 (regressionFit = 38,661324, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,661326): trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717418 (regressionFit = 38,717415, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,675894 (regressionFit = 38,675892, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715267 (regressionFit = 38,715265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,723381 (regressionFit = 38,723379, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019670480161044415 to score=0.0025 #egs=1222.0
Comparing variance: 0.04940539756823053 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019670)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019670) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,049405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,049405) into position #1 in the search queue (new size=2).

% Time for loop #5: 2,432 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 25 30 38 43 62 101 118 132 169 185

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614385 (regressionFit = 14,614384, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,614385): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612664 (regressionFit = 14,612662, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,612664): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,623860 (regressionFit = 14,623858, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,585248 (regressionFit = 14,585246, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,585248): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,623267 (regressionFit = 14,623265, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,606558 (regressionFit = 14,606556, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,588708 (regressionFit = 14,588706, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,533360 (regressionFit = 14,533358, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,533360): trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,623615 (regressionFit = 14,623612, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,585248 (regressionFit = 14,585246, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,588708 (regressionFit = 14,588706, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,623860 (regressionFit = 14,623858, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,620234 (regressionFit = 14,620232, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,616464 (regressionFit = 14,616462, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,620234 (regressionFit = 14,620232, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614386 (regressionFit = 14,614384, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,623267 (regressionFit = 14,623265, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,612665 (regressionFit = 14,612662, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,615591 (regressionFit = 14,615589, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,049.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1331491089763732 to score=0.0025 #egs=6.0
Comparing variance: 0.047360219522830864 to score=0.0025 #egs=290.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 290,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,047360)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,047360) into position #1 in the search queue (new size=2).

% Time for loop #6: 378 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 5 positive seeds: 74 133 200 205 285

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731278 (regressionFit = 13,731276, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,731278): trusts(_, A) :- knows(A, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726793 (regressionFit = 13,726792, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,726793): trusts(A, _) :- knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,733701 (regressionFit = 13,733699, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 192,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,712371 (regressionFit = 13,712369, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 120,0/290,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,712371): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 120,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,721951 (regressionFit = 13,721949, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 236,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,693178 (regressionFit = 13,693176, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,693178): trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,733834 (regressionFit = 13,733832, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 138,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,712371 (regressionFit = 13,712369, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 120,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,693178 (regressionFit = 13,693176, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,693178): trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,733701 (regressionFit = 13,733699, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 192,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,725152 (regressionFit = 13,725150, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 276,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,731279 (regressionFit = 13,731276, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 146,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,726794 (regressionFit = 13,726792, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 242,0/290,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 290,0/290,0 pos, 0,0/0,0 neg]
%     Score = -13,727325 (regressionFit = 13,727323, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 282,0/290,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,047.
% Will extend: trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08150368567704945 to score=0.0025 #egs=32.0
Comparing variance: 0.04296534215764616 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 32,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,081504)
%         ILP node to extend: trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,081504) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,042965)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,042965) into position #2 in the search queue (new size=3).

% Time for loop #7: 318 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/290,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/32,0 pos, 0,0/0,0 neg]'
%     Score = -13,693178 (regressionFit = 13,693176, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/32,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 3 4 6 7 15 17 22 24 29
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(A, B).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(A, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(B, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(C, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(_, A).  [covers 30,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(_, B).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C), knows(_, C).  [covers 32,0/32,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -13,6932):
%  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(A, Anon20081), knows(B, Anon20081))

% Have these 9 positive seeds: 30 36 51 84 86 118 125 208 254

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084816 (regressionFit = 11,084815, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,084816): trusts(_, A) :- knows(A, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,082645): trusts(A, _) :- knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,074428 (regressionFit = 11,074426, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 164,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,074428): trusts(A, _) :- knows(B, A), knows(A, B).  [covers 164,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082646 (regressionFit = 11,082643, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,081099 (regressionFit = 11,081097, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 90,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,038489 (regressionFit = 11,038487, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 42,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,038489): trusts(A, B) :- knows(C, A), knows(C, B).  [covers 42,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084118 (regressionFit = 11,084116, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082646 (regressionFit = 11,082643, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,079872 (regressionFit = 11,079869, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 206,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,073422 (regressionFit = 11,073420, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 106,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,081099 (regressionFit = 11,081097, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 90,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,074428 (regressionFit = 11,074426, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 164,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,023300 (regressionFit = 11,023298, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 50,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,023300): trusts(A, B) :- knows(A, C), knows(C, B).  [covers 50,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,072296 (regressionFit = 11,072294, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 244,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082646 (regressionFit = 11,082643, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,023300 (regressionFit = 11,023298, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 50,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,084817 (regressionFit = 11,084815, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 114,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,038489 (regressionFit = 11,038487, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 42,0/258,0 pos, 0,0/0,0 neg]
%     Score = -10,954117 (regressionFit = 10,954115, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,954117): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,082645 (regressionFit = 11,082643, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 212,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -11,079793 (regressionFit = 11,079791, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 250,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,043.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 280 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]'
%     Score = -38,661326 (regressionFit = 38,661324, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 120 127 172 256 523 538 607 779 935 1094
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(A, B).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -24,020627 (regressionFit = 24,020624, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(A, C).  [covers 340,0/1.222,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,020627): trusts(A, B) :- knows(C, B), knows(B, C), knows(A, C).  [covers 340,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(A, _).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -24,007248 (regressionFit = 24,007245, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,007248): trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B), knows(A, _).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -24,033569 (regressionFit = 24,033567, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(C, A).  [covers 248,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -24,021822 (regressionFit = 24,021819, penalties=2.9300000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B), knows(B, B).  [covers 128,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B), knows(B, _).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -24,033217 (regressionFit = 24,033214, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(B, C), knows(_, A).  [covers 1.024,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B), knows(_, A).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B), knows(_, B).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,020.
% Will extend: trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0046947312210736504 to score=0.0025 #egs=424.0
Comparing variance: 0.02758982369530442 to score=0.0025 #egs=798.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 798,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,027590)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.222,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,027590) into the LAST position (#1) in the search queue.

% Time for loop #10: 1,129 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #10, the best clause found is:
%      trusts(A, B) :- knows(C, B), knows(B, C), knows(B, A).  [covers 424,0/1.222,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #5 @ 10:54:09 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.3092967441930752;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.281042234941252;  // std dev = 5,226, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else return 0.3106501510356565;  // std dev = 0,192, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( knows(E, B), knows(B, E) )
%   | then if ( knows(B, A) )
%   | | then return 0.3210188746123899;  // std dev = 1,411, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | | else return 0.310595692518425;  // std dev = 0,166, 798,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=775 */
%   | else if ( knows(B, F), knows(F, F) )
%   | | then return 0.1760563400137861;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( knows(A, G), knows(B, G) )
%   | | | then return 0.26634993651193806;  // std dev = 0,285, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else if ( knows(H, B), knows(H, H) )
%   | | | | then return 0.1922413334543231;  // std dev = 1,224, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | | else return 0.3089560615984828;  // std dev = 3,075, 248,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=238 */


% Clauses:

trusts(A, B, 0.3092967441930752) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.281042234941252) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.3106501510356565) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #3.

trusts(A, B, 0.3210188746123899) :- 
     knows(C, B), 
     knows(B, C), 
     knows(B, A), 
     !. // Clause #4.

trusts(A, B, 0.310595692518425) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, 0.1760563400137861) :- 
     knows(B, C), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.26634993651193806) :- 
     knows(A, C), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.1922413334543231) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.3089560615984828) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.3092967441930752) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.281042234941252) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.3106501510356565) :-  /* #neg=1 #pos=25 */ 
   knows(a, uniqueVar35),
   knows(uniqueVar35, uniqueVar35),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.3210188746123899) :-  /* #neg=2 #pos=422 */ 
   knows(uniqueVar36, b),
   knows(b, uniqueVar36),
   knows(b, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.310595692518425) :-  /* #neg=23 #pos=775 */ 
   knows(uniqueVar37, a),
   knows(a, uniqueVar37),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.1760563400137861) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar38),
   knows(uniqueVar38, uniqueVar38),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.26634993651193806) :-  /* #neg=3 #pos=29 */ 
   knows(a, uniqueVar39),
   knows(b, uniqueVar39),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.1922413334543231) :-  /* #neg=2 #pos=8 */ 
   knows(uniqueVar40, a),
   knows(uniqueVar40, uniqueVar40),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.3089560615984828) :-  /* #neg=10 #pos=238 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar34, uniqueVar34)
%   knows(a, uniqueVar34)
%   knows(uniqueVar35, uniqueVar35)
%   knows(a, uniqueVar33)
%   knows(uniqueVar40, uniqueVar40)
%   knows(b, underscore)
%   knows(a, uniqueVar39)
%   knows(b, uniqueVar36)
%   knows(a, uniqueVar38)
%   knows(uniqueVar33, uniqueVar33)
%   knows(a, uniqueVar37)
%   knows(b, a)
%   knows(a, uniqueVar35)
%   knows(uniqueVar38, uniqueVar38)
%   knows(uniqueVar40, a)
%   knows(uniqueVar37, a)
%   knows(b, uniqueVar39)
%   knows(uniqueVar36, b)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 5 trees is 53,576 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.019670480161044418
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03539453982454447
Set score:0.0025

% Have these 10 positive seeds: 116 910 912 966 1049 1077 1080 1389 1412 1734

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973959 (regressionFit = 70,973958, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,973959): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071330 (regressionFit = 71,071329, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038797 (regressionFit = 71,038796, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973959 (regressionFit = 70,973958, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,062393 (regressionFit = 71,062391, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,050515 (regressionFit = 71,050513, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,055618 (regressionFit = 71,055616, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,031878 (regressionFit = 71,031876, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,989965 (regressionFit = 70,989963, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,066578 (regressionFit = 71,066576, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,050515 (regressionFit = 71,050513, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973959 (regressionFit = 70,973958, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,062393 (regressionFit = 71,062391, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,056452 (regressionFit = 71,056450, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,060939 (regressionFit = 71,060936, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,056452 (regressionFit = 71,056450, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,973960 (regressionFit = 70,973958, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,989965 (regressionFit = 70,989963, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,071331 (regressionFit = 71,071329, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,055618 (regressionFit = 71,055616, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,038798 (regressionFit = 71,038796, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,067487 (regressionFit = 71,067485, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010108403209216837 to score=0.0025 #egs=584.0
Comparing variance: 0.045695681236502056 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010108)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010108) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045696)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045696) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,254 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 44 296 329 340 365 403 501 577 604 707

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069656 (regressionFit = 65,069655, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,069656): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998728 (regressionFit = 64,998727, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,998728): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,021990 (regressionFit = 65,021987, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,067096 (regressionFit = 65,067094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,001762 (regressionFit = 65,001760, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,062304 (regressionFit = 65,062302, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,847838 (regressionFit = 64,847836, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,847838): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,986649 (regressionFit = 64,986647, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,038719 (regressionFit = 65,038717, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,067096 (regressionFit = 65,067094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,029952 (regressionFit = 65,029950, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,070496 (regressionFit = 65,070494, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,001762 (regressionFit = 65,001760, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,038719 (regressionFit = 65,038717, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,021990 (regressionFit = 65,021987, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,065821 (regressionFit = 65,065819, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,943251 (regressionFit = 64,943249, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,062623 (regressionFit = 65,062621, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,065821 (regressionFit = 65,065819, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,029952 (regressionFit = 65,029950, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,069657 (regressionFit = 65,069655, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,062304 (regressionFit = 65,062302, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,998729 (regressionFit = 64,998727, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,063979 (regressionFit = 65,063977, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10218040915641134 to score=0.0025 #egs=140.0
Comparing variance: 0.039363378995326985 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,102180)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,102180) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039363)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039363) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,311 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -64,847838 (regressionFit = 64,847836, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 5 18 89 113 131
%     Score = -14,235152 (regressionFit = 14,235150, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,235152): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,080965 (regressionFit = 14,080962, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,080965): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,305259 (regressionFit = 14,305256, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,074304 (regressionFit = 14,074302, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,074304): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,102.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03196277464730722 to score=0.0025 #egs=30.0
Comparing variance: 0.11923107643737298 to score=0.0025 #egs=110.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,119231)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,119231) into position #1 in the search queue (new size=3).

% Time for loop #3: 156 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 30 positive examples, of which 30 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/110,0 pos, 0,0/0,0 neg]'
%     Score = -64,847838 (regressionFit = 64,847836, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 42 43 50 64 75 81 97 108
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,929896 (regressionFit = 12,929893, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,929896): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,562776 (regressionFit = 12,562773, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,562776): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,115165 (regressionFit = 13,115162, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 102,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,119.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.2520297787002732 to score=0.0025 #egs=6.0
Comparing variance: 0.10625571842399413 to score=0.0025 #egs=104.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 104,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106256)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106256) into position #1 in the search queue (new size=3).

% Time for loop #4: 121 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/104,0 pos, 0,0/0,0 neg]'
%     Score = -64,847838 (regressionFit = 64,847836, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 19 47 50 55 59 62 81 82 101
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,897844 (regressionFit = 10,897841, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,897844): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,940712 (regressionFit = 10,940709, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/104,0 pos, 0,0/0,0 neg]
%     Score = -11,049436 (regressionFit = 11,049433, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 96,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,106.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 124 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% This clause covers 58 positive examples, of which 58 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 259 406 540 630 655 684 1010 1049 1116 1130

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542507 (regressionFit = 50,542506, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,542507): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503668 (regressionFit = 50,503667, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,503668): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,531321 (regressionFit = 50,531319, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,522871 (regressionFit = 50,522869, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,504915 (regressionFit = 50,504913, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,495533 (regressionFit = 50,495531, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,495533): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,498235 (regressionFit = 50,498233, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,522871 (regressionFit = 50,522869, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,476183 (regressionFit = 50,476181, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,476183): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,541000 (regressionFit = 50,540997, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,504915 (regressionFit = 50,504913, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,498235 (regressionFit = 50,498233, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,531321 (regressionFit = 50,531319, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542421 (regressionFit = 50,542419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,524837 (regressionFit = 50,524835, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,531515 (regressionFit = 50,531513, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542421 (regressionFit = 50,542419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,476183 (regressionFit = 50,476181, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,542508 (regressionFit = 50,542506, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,477393 (regressionFit = 50,477391, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,503669 (regressionFit = 50,503667, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,537681 (regressionFit = 50,537679, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,039.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.033889215679836805 to score=0.0025 #egs=950.0
Comparing variance: 0.0547348078174812 to score=0.0025 #egs=334.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 950,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,033889)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,033889) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 334,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,054735)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,054735) into position #1 in the search queue (new size=3).

% Time for loop #6: 2,116 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 950 positive examples, of which 950 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 8 14 40 61 97 205 224 228 310 327

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231432 (regressionFit = 18,231431, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,231432): trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258921 (regressionFit = 18,258920, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,230914 (regressionFit = 18,230912, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,230914): trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,251567 (regressionFit = 18,251564, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 164,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,171142 (regressionFit = 18,171140, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,171142): trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,275081 (regressionFit = 18,275079, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,171142 (regressionFit = 18,171140, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,236300 (regressionFit = 18,236298, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,250051 (regressionFit = 18,250048, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 280,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,275081 (regressionFit = 18,275079, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,235619 (regressionFit = 18,235617, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,173045 (regressionFit = 18,173043, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 50,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,277765 (regressionFit = 18,277763, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 320,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,235619 (regressionFit = 18,235617, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,231433 (regressionFit = 18,231431, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,236300 (regressionFit = 18,236298, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,258922 (regressionFit = 18,258920, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,270329 (regressionFit = 18,270327, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 326,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,055.
% Will extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07819734814941064 to score=0.0025 #egs=148.0
Comparing variance: 0.03547275482395599 to score=0.0025 #egs=186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 148,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,078197)
%         ILP node to extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,078197) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 186,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,035473)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,035473) into position #2 in the search queue (new size=4).

% Time for loop #7: 395 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% This clause covers 148 positive examples, of which 148 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]'
%     Score = -18,171142 (regressionFit = 18,171140, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 7 45 60 61 67 79 85 96
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,564871 (regressionFit = 11,564868, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,564871): trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,548904 (regressionFit = 11,548901, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,548904): trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,514972 (regressionFit = 11,514969, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(B, C).  [covers 6,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,514972): trusts(A, B) :- knows(B, _), knows(C, A), knows(B, C).  [covers 6,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(B, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,514972 (regressionFit = 11,514969, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, A).  [covers 6,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,547178 (regressionFit = 11,547175, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 32,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,531920 (regressionFit = 11,531917, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 142,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,558645 (regressionFit = 11,558642, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, B).  [covers 28,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,406235 (regressionFit = 11,406232, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,406235): trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(_, C).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,558667 (regressionFit = 11,558664, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(_, C).  [covers 144,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,078.
% Will extend: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 148 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon24927), knows(Anon24995, A))
Created a leaf under (trusts(A, B) :- knows(B, Anon24155), knows(Anon24155, B))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #6 @ 10:54:19 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.2519165586334043;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.2764040929852319;  // std dev = 0,979, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.11768041364736082;  // std dev = 1,230, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.2285742131692746;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.1514093407472434;  // std dev = 2,521, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(B, D), knows(D, B) )
%   | | then return 0.24490633825720523;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.16509144853730856;  // std dev = 2,608, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.23434927456920904;  // std dev = 2,146, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.2447237937790199;  // std dev = 0,188, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.2519165586334043) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2764040929852319) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.11768041364736082) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.2285742131692746) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.1514093407472434) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.24490633825720523) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.16509144853730856) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.23434927456920904) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.2447237937790199) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.2519165586334043) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.2764040929852319) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar41, a),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar41, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.11768041364736082) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar42, a),
   knows(uniqueVar42, uniqueVar42),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.2285742131692746) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar43, a),
   knows(uniqueVar43, uniqueVar43),
   knows(a, uniqueVar43),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.1514093407472434) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar44, a),
   knows(uniqueVar44, uniqueVar44),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.24490633825720523) :-  /* #neg=34 #pos=916 */ 
   knows(a, uniqueVar45),
   knows(uniqueVar45, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.16509144853730856) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar46),
   knows(uniqueVar47, a),
   knows(uniqueVar47, uniqueVar46),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.23434927456920904) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2447237937790199) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar41, a)
%   knows(b, underscore)
%   knows(underscore, a)
%   knows(uniqueVar42, uniqueVar42)
%   knows(a, uniqueVar43)
%   knows(uniqueVar41, uniqueVar41)
%   knows(uniqueVar43, a)
%   knows(uniqueVar44, a)
%   knows(b, b)
%   knows(uniqueVar47, a)
%   knows(b, a)
%   knows(uniqueVar45, a)
%   knows(uniqueVar43, uniqueVar43)
%   knows(uniqueVar47, uniqueVar46)
%   knows(uniqueVar41, b)
%   knows(a, uniqueVar45)
%   knows(uniqueVar44, uniqueVar44)
%   knows(b, uniqueVar46)
%   knows(uniqueVar42, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 6 trees is 1 minutes and 3,696 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07819734814941065
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03517970274912443
Set score:0.0025

% Have these 9 positive seeds: 165 177 255 331 490 1205 1247 1257 1487

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638800 (regressionFit = 70,638799, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,638800): trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604319 (regressionFit = 70,604318, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,604319): trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,630033 (regressionFit = 70,630031, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,636471 (regressionFit = 70,636469, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,620123 (regressionFit = 70,620121, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,625072 (regressionFit = 70,625070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,584286 (regressionFit = 70,584284, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,584286): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,596720 (regressionFit = 70,596718, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,562330 (regressionFit = 70,562328, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,562330): trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,636471 (regressionFit = 70,636469, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,575916 (regressionFit = 70,575914, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,633825 (regressionFit = 70,633823, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,632754 (regressionFit = 70,632751, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,620123 (regressionFit = 70,620121, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,562330 (regressionFit = 70,562328, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,630033 (regressionFit = 70,630031, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,627139 (regressionFit = 70,627137, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,499312 (regressionFit = 70,499310, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,499312): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,628503 (regressionFit = 70,628501, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,627139 (regressionFit = 70,627137, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,575916 (regressionFit = 70,575914, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,638801 (regressionFit = 70,638799, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,625072 (regressionFit = 70,625070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,633061 (regressionFit = 70,633059, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,604320 (regressionFit = 70,604318, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,635822 (regressionFit = 70,635820, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06502276052769225 to score=0.0025 #egs=490.0
Comparing variance: 0.025453331277030693 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065023)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065023) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025453)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025453) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,410 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,499312 (regressionFit = 70,499310, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 14 68 170 241 248 309 319 341 363 421
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,791961 (regressionFit = 31,791958, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,791961): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,810431 (regressionFit = 31,810428, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,852506 (regressionFit = 31,852503, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,802997 (regressionFit = 31,802994, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,861039 (regressionFit = 31,861036, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,065.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999963 to score=0.0025 #egs=160.0
Comparing variance: 0.08452108436717085 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,084521)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,084521) into position #1 in the search queue (new size=2).

% Time for loop #2: 371 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,499312 (regressionFit = 70,499310, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 31 86 96 109 119 128 194 195 197
%     Score = -27,876506 (regressionFit = 27,876503, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,876506): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,872847 (regressionFit = 27,872844, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,872847): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,878290 (regressionFit = 27,878287, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,878893 (regressionFit = 27,878890, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,891625 (regressionFit = 27,891622, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,085.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08852303451828339 to score=0.0025 #egs=304.0
Comparing variance: 0.03699389334756828 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036994)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036994) into position #1 in the search queue (new size=2).

% Time for loop #3: 277 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,499312 (regressionFit = 70,499310, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 3 4 5 6 8 9 10 13 15
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,958662 (regressionFit = 0,958659, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,958662): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 1.4695531462956731E-5 to score=0.0025 #egs=6.0
Comparing variance: 0.047928557771898715 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047929)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047929) into position #1 in the search queue (new size=2).

% Time for loop #4: 51 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -70,499312 (regressionFit = 70,499310, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 4 8 11 12 14 15 16
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -70,4993):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon26161, A))

% Have these 10 positive seeds: 155 351 365 544 575 582 735 776 987 1155

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588439 (regressionFit = 38,588438, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,588439): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624625 (regressionFit = 38,624624, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620522 (regressionFit = 38,620521, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,630592 (regressionFit = 38,630590, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620708 (regressionFit = 38,620706, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,634767 (regressionFit = 38,634765, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,593573 (regressionFit = 38,593571, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,615791 (regressionFit = 38,615789, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,614805 (regressionFit = 38,614803, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620708 (regressionFit = 38,620706, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594549 (regressionFit = 38,594547, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,631923 (regressionFit = 38,631921, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,605803 (regressionFit = 38,605801, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,634767 (regressionFit = 38,634765, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,614805 (regressionFit = 38,614803, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,630592 (regressionFit = 38,630590, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,637878 (regressionFit = 38,637876, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,621479 (regressionFit = 38,621477, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,637878 (regressionFit = 38,637876, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,588440 (regressionFit = 38,588438, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594549 (regressionFit = 38,594547, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624626 (regressionFit = 38,624624, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,593573 (regressionFit = 38,593571, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,636629 (regressionFit = 38,636627, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620523 (regressionFit = 38,620521, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,634865 (regressionFit = 38,634863, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221074949 to score=0.0025 #egs=424.0
Comparing variance: 0.03345326494360588 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033453)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033453) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,254 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 51 55 86 262 312 320 545 600 618 690

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592560 (regressionFit = 36,592559, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,592560): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557252 (regressionFit = 36,557251, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,557252): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,597869 (regressionFit = 36,597867, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,597726 (regressionFit = 36,597724, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,576520 (regressionFit = 36,576518, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,579723 (regressionFit = 36,579721, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,548709 (regressionFit = 36,548707, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,548709): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,596884 (regressionFit = 36,596882, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,597726 (regressionFit = 36,597724, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,576085 (regressionFit = 36,576083, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,580466 (regressionFit = 36,580464, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,579228 (regressionFit = 36,579226, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,576520 (regressionFit = 36,576518, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,596884 (regressionFit = 36,596882, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,597869 (regressionFit = 36,597867, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,584377 (regressionFit = 36,584375, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,584426 (regressionFit = 36,584424, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,584377 (regressionFit = 36,584375, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,576085 (regressionFit = 36,576083, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,592561 (regressionFit = 36,592559, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,579723 (regressionFit = 36,579721, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,596275 (regressionFit = 36,596273, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,557253 (regressionFit = 36,557251, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,593309 (regressionFit = 36,593307, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,033.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04044039520906207 to score=0.0025 #egs=834.0
Comparing variance: 0.010851604905428813 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040440)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040440) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,010852)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,010852) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,590 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,548709 (regressionFit = 36,548707, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 7 10 60 95 98 278 293 463 521 627
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,674293 (regressionFit = 33,674290, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,674293): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,716384 (regressionFit = 33,716381, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,725805 (regressionFit = 33,725802, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,721453 (regressionFit = 33,721450, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,727199 (regressionFit = 33,727196, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,686957 (regressionFit = 33,686954, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,725788 (regressionFit = 33,725785, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,719503 (regressionFit = 33,719500, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,645499 (regressionFit = 33,645496, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,645499): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,726725 (regressionFit = 33,726722, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,705961 (regressionFit = 33,705958, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,724381 (regressionFit = 33,724378, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.055856277354701375 to score=0.0025 #egs=480.0
Comparing variance: 0.019306448560797333 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019306)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019306) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,214 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -36,548709 (regressionFit = 36,548707, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 1 118 147 159 204 230 251 350
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,831179 (regressionFit = 6,831176, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,831179): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,812815 (regressionFit = 6,812812, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,812815): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,802518 (regressionFit = 6,802515, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,802518): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,786367 (regressionFit = 6,786364, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,786367): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,809092 (regressionFit = 6,809089, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,831366 (regressionFit = 6,831363, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,833614 (regressionFit = 6,833611, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,830411 (regressionFit = 6,830408, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,833528 (regressionFit = 6,833525, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 299 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon28517, A), knows(Anon28589, Anon28517))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #7 @ 10:54:30 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.19769524726480153;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.17012887306415517;  // std dev = 5,188, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.21857578450653384;  // std dev = 0,009, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1923191411153547;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.2093688489158066;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.18436541071709567;  // std dev = 5,178, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.20913016220024966;  // std dev = 1,992, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.17565374921594526;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.20861959129809846;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.19769524726480153) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.17012887306415517) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.21857578450653384) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.1923191411153547) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.2093688489158066) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.18436541071709567) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.20913016220024966) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.17565374921594526) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.20861959129809846) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.19769524726480153) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar48),
   knows(uniqueVar48, uniqueVar48),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.17012887306415517) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar49),
   knows(uniqueVar49, uniqueVar49),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.21857578450653384) :-  /* #pos=6 */ 
   knows(a, uniqueVar50),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar50, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.1923191411153547) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar51),
   knows(uniqueVar51, uniqueVar51),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.2093688489158066) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.18436541071709567) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar52, a),
   knows(uniqueVar53, uniqueVar52),
   knows(uniqueVar53, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.20913016220024966) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar54, a),
   knows(underscore, uniqueVar54),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.17565374921594526) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar55, a),
   knows(underscore, uniqueVar55),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.20861959129809846) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(underscore, uniqueVar55)
%   knows(b, underscore)
%   knows(uniqueVar53, uniqueVar52)
%   knows(underscore, uniqueVar54)
%   knows(a, uniqueVar51)
%   knows(a, uniqueVar48)
%   knows(b, a)
%   knows(uniqueVar52, a)
%   knows(uniqueVar50, a)
%   knows(uniqueVar51, uniqueVar51)
%   knows(uniqueVar49, uniqueVar49)
%   knows(a, uniqueVar49)
%   knows(uniqueVar54, a)
%   knows(a, uniqueVar50)
%   knows(uniqueVar48, uniqueVar48)
%   knows(uniqueVar55, a)
%   knows(uniqueVar53, a)
%   knows(uniqueVar50, uniqueVar50)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 7 trees is 1 minutes and 14,707 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.019306448560797336
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03520493078959874
Set score:0.0025

% Have these 6 positive seeds: 84 252 592 595 1172 1552

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595939 (regressionFit = 70,595938, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,595939): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690136 (regressionFit = 70,690135, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659374 (regressionFit = 70,659373, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,682703 (regressionFit = 70,682701, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,686409 (regressionFit = 70,686407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,671419 (regressionFit = 70,671417, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,672967 (regressionFit = 70,672965, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,652439 (regressionFit = 70,652437, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,608626 (regressionFit = 70,608624, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,686409 (regressionFit = 70,686407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,622355 (regressionFit = 70,622353, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,684228 (regressionFit = 70,684226, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,684736 (regressionFit = 70,684734, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,671419 (regressionFit = 70,671417, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,608626 (regressionFit = 70,608624, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,682703 (regressionFit = 70,682701, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,675641 (regressionFit = 70,675639, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,678065 (regressionFit = 70,678063, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,675641 (regressionFit = 70,675639, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,595940 (regressionFit = 70,595938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,622355 (regressionFit = 70,622353, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,690137 (regressionFit = 70,690135, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,672967 (regressionFit = 70,672965, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,683756 (regressionFit = 70,683754, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,659375 (regressionFit = 70,659373, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,686812 (regressionFit = 70,686809, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010110189941730973 to score=0.0025 #egs=584.0
Comparing variance: 0.04542948530918784 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010110)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010110) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045429)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045429) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,173 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 32 100 277 316 323 356 572 607 715 988

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691027 (regressionFit = 64,691025, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,691027): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622240 (regressionFit = 64,622239, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,622240): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,646121 (regressionFit = 64,646119, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,690368 (regressionFit = 64,690366, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,626567 (regressionFit = 64,626565, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,681164 (regressionFit = 64,681162, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,512397 (regressionFit = 64,512395, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,512397): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,610178 (regressionFit = 64,610176, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,660641 (regressionFit = 64,660639, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,690368 (regressionFit = 64,690366, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,659875 (regressionFit = 64,659873, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,682616 (regressionFit = 64,682614, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691167 (regressionFit = 64,691164, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,626567 (regressionFit = 64,626565, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,660641 (regressionFit = 64,660639, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,646121 (regressionFit = 64,646119, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,686519 (regressionFit = 64,686518, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,550515 (regressionFit = 64,550513, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,681694 (regressionFit = 64,681692, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,686519 (regressionFit = 64,686518, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,659875 (regressionFit = 64,659873, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,691028 (regressionFit = 64,691025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,681164 (regressionFit = 64,681162, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,671827 (regressionFit = 64,671825, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,622241 (regressionFit = 64,622239, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,685015 (regressionFit = 64,685013, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,045.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10008382396735355 to score=0.0025 #egs=140.0
Comparing variance: 0.039330731859143965 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,100084)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,100084) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039331)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039331) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,291 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -64,512397 (regressionFit = 64,512395, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 2 11 18 20 27 44 48
%     Score = -13,970086 (regressionFit = 13,970083, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,970086): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -13,860171 (regressionFit = 13,860168, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,860171): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -13,875247 (regressionFit = 13,875244, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
%     Score = -13,959971 (regressionFit = 13,959968, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 16,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,011697 (regressionFit = 14,011694, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -13,850654 (regressionFit = 13,850651, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,850654): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,100.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03195711449605118 to score=0.0025 #egs=30.0
Comparing variance: 0.11719943672902597 to score=0.0025 #egs=110.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,117199)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,117199) into position #1 in the search queue (new size=3).

% Time for loop #3: 164 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 30 positive examples, of which 30 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/110,0 pos, 0,0/0,0 neg]'
%     Score = -64,512397 (regressionFit = 64,512395, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 7 9 13 23 40 49 61 86 95
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,763150 (regressionFit = 12,763147, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,763150): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,537684 (regressionFit = 12,537681, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,537684): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,891919 (regressionFit = 12,891916, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 102,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,117.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.25197119048450756 to score=0.0025 #egs=6.0
Comparing variance: 0.10601782572789956 to score=0.0025 #egs=104.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 104,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106018)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106018) into position #1 in the search queue (new size=3).

% Time for loop #4: 122 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/104,0 pos, 0,0/0,0 neg]'
%     Score = -64,512397 (regressionFit = 64,512395, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 1 2 49 56 64 72 80 82
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,915617 (regressionFit = 10,915614, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,915617): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -11,024603 (regressionFit = 11,024600, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 96,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,106.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 137 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% This clause covers 58 positive examples, of which 58 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 55 75 88 196 311 363 397 461 592 691

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500638 (regressionFit = 50,500637, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,500638): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460654 (regressionFit = 50,460653, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,460654): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,488885 (regressionFit = 50,488883, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,482312 (regressionFit = 50,482310, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,462411 (regressionFit = 50,462408, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,474314 (regressionFit = 50,474312, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,452147 (regressionFit = 50,452145, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,452147): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,462327 (regressionFit = 50,462325, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,482312 (regressionFit = 50,482310, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,448731 (regressionFit = 50,448729, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,448731): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,486629 (regressionFit = 50,486627, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,498770 (regressionFit = 50,498768, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,462411 (regressionFit = 50,462408, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,462327 (regressionFit = 50,462325, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,488885 (regressionFit = 50,488883, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500275 (regressionFit = 50,500273, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,472259 (regressionFit = 50,472257, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,487787 (regressionFit = 50,487785, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500275 (regressionFit = 50,500273, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,448731 (regressionFit = 50,448729, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,500639 (regressionFit = 50,500637, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,474314 (regressionFit = 50,474312, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,444385 (regressionFit = 50,444383, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,444385): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,460655 (regressionFit = 50,460653, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,495678 (regressionFit = 50,495676, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,039.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.028623065122096523 to score=0.0025 #egs=268.0
Comparing variance: 0.04209980461004166 to score=0.0025 #egs=1016.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 268,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,028623)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,028623) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.016,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,042100)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,042100) into position #1 in the search queue (new size=3).

% Time for loop #6: 2,016 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 268 positive examples, of which 268 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 18 166 179 197 249 286 421 480 499 504

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763566 (regressionFit = 42,763565, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,763566): trusts(_, A) :- knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654886 (regressionFit = 42,654885, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,654886): trusts(A, _) :- knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,745704 (regressionFit = 42,745702, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 672,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,767579 (regressionFit = 42,767577, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 132,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,667456 (regressionFit = 42,667454, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 692,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,771467 (regressionFit = 42,771465, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 270,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,639111 (regressionFit = 42,639109, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,639111): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,760135 (regressionFit = 42,760133, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 326,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,767579 (regressionFit = 42,767577, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 132,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,752442 (regressionFit = 42,752440, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 690,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,770906 (regressionFit = 42,770904, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 850,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,667456 (regressionFit = 42,667454, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 692,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,760135 (regressionFit = 42,760133, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 326,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,745704 (regressionFit = 42,745702, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 672,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,757035 (regressionFit = 42,757033, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 346,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,642299 (regressionFit = 42,642297, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 148,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,758213 (regressionFit = 42,758211, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.004,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,757035 (regressionFit = 42,757033, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 346,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,752442 (regressionFit = 42,752440, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 690,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,763567 (regressionFit = 42,763565, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,771467 (regressionFit = 42,771465, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 270,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,654887 (regressionFit = 42,654885, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,766954 (regressionFit = 42,766951, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.008,0/1.016,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,042.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05115282458597899 to score=0.0025 #egs=814.0
Comparing variance: 0.00495400766278179 to score=0.0025 #egs=202.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 814,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,051153)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,051153) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 202,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,004954)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,004954) into the LAST position (#4) in the search queue.

% Time for loop #7: 1,353 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
% This clause covers 814 positive examples, of which 814 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]'
%     Score = -42,639111 (regressionFit = 42,639109, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 105 208 257 296 325 354 401 795
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,623126 (regressionFit = 41,623123, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 672,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,623126): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 672,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,628069 (regressionFit = 41,628066, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 566,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,616005 (regressionFit = 41,616002, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 132,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,616005): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 132,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,609328 (regressionFit = 41,609325, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 332,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,609328): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 332,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,623653 (regressionFit = 41,623650, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 680,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,613866 (regressionFit = 41,613863, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 268,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,628781 (regressionFit = 41,628778, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 808,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,399935 (regressionFit = 41,399932, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,399935): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,626074 (regressionFit = 41,626072, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 726,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,557463 (regressionFit = 41,557460, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 308,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 812,0/814,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,051.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 1,206 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
% This clause covers 496 positive examples, of which 496 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon32549, B), knows(Anon32549, Anon32549))
Created a leaf under (trusts(A, B) :- knows(B, A))
Created a leaf under (trusts(A, B) :- knows(Anon33363, A), knows(Anon33435, Anon33363))

%%%%%  WILL-Produced Tree #8 @ 10:54:43 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.17326110543369536;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.1890514850369187;  // std dev = 0,979, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.12988316104316686;  // std dev = 1,230, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.14900969624337618;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.08345675744197376;  // std dev = 2,524, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, B), knows(D, D) )
%   | | then return 0.17466522220808162;  // std dev = 0,169, 268,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=260 */
%   | | else if ( knows(E, A), knows(F, E) )
%   | | | then if ( knows(F, A) )
%   | | | | then return 0.13894271362499264;  // std dev = 5,881, 496,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=458 */
%   | | | | else return 0.1740237090194458;  // std dev = 2,609, 318,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=311 */
%   | | | else return 0.1814537234933347;  // std dev = 0,070, 202,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=201 */


% Clauses:

trusts(A, B, 0.17326110543369536) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1890514850369187) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.12988316104316686) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.14900969624337618) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.08345675744197376) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.17466522220808162) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.13894271362499264) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.1740237090194458) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.1814537234933347) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.17326110543369536) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.1890514850369187) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar56, a),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar56, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.12988316104316686) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar57, a),
   knows(uniqueVar57, uniqueVar57),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.14900969624337618) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar58, a),
   knows(uniqueVar58, uniqueVar58),
   knows(a, uniqueVar58),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.08345675744197376) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar59, a),
   knows(uniqueVar59, uniqueVar59),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.17466522220808162) :-  /* #neg=8 #pos=260 */ 
   knows(uniqueVar60, a),
   knows(uniqueVar60, uniqueVar60),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.13894271362499264) :-  /* #neg=38 #pos=458 */ 
   knows(uniqueVar61, a),
   knows(uniqueVar62, uniqueVar61),
   knows(uniqueVar62, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.1740237090194458) :-  /* #neg=7 #pos=311 */ 
   knows(uniqueVar63, a),
   knows(underscore, uniqueVar63),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1814537234933347) :-  /* #neg=1 #pos=201 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar57, a)
%   knows(uniqueVar56, b)
%   knows(uniqueVar59, uniqueVar59)
%   knows(uniqueVar58, uniqueVar58)
%   knows(uniqueVar62, a)
%   knows(uniqueVar59, a)
%   knows(uniqueVar61, a)
%   knows(uniqueVar60, uniqueVar60)
%   knows(uniqueVar62, uniqueVar61)
%   knows(b, b)
%   knows(uniqueVar56, uniqueVar56)
%   knows(uniqueVar56, a)
%   knows(uniqueVar57, uniqueVar57)
%   knows(uniqueVar63, a)
%   knows(b, a)
%   knows(a, uniqueVar58)
%   knows(uniqueVar58, a)
%   knows(underscore, uniqueVar63)
%   knows(uniqueVar60, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 8 trees is 1 minutes and 26,876 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05115282458597899
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035063762102020266
Set score:0.0025

% Have these 9 positive seeds: 137 182 1106 1197 1351 1494 1884 1953 1960

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -70,392484 (regressionFit = 70,392483, penalties=1.12E-6) for clause:  trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,392484): trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313569 (regressionFit = 70,313568, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,313569): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406848 (regressionFit = 70,406847, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384108 (regressionFit = 70,384107, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,403790 (regressionFit = 70,403788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,399480 (regressionFit = 70,399478, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392284 (regressionFit = 70,392282, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384817 (regressionFit = 70,384815, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,362135 (regressionFit = 70,362133, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,378376 (regressionFit = 70,378374, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392484 (regressionFit = 70,392483, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(A, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(A, _).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,389916 (regressionFit = 70,389914, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, _).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(_, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(_, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,389916 (regressionFit = 70,389914, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, A).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,322571 (regressionFit = 70,322569, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,399480 (regressionFit = 70,399478, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,337481 (regressionFit = 70,337479, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,401480 (regressionFit = 70,401478, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,401622 (regressionFit = 70,401620, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392284 (regressionFit = 70,392282, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392484 (regressionFit = 70,392483, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,322571 (regressionFit = 70,322569, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,403790 (regressionFit = 70,403788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,390817 (regressionFit = 70,390815, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,260071 (regressionFit = 70,260069, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,260071): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392835 (regressionFit = 70,392832, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,392485 (regressionFit = 70,392483, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,390817 (regressionFit = 70,390815, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,313570 (regressionFit = 70,313568, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,337481 (regressionFit = 70,337479, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,406849 (regressionFit = 70,406847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384817 (regressionFit = 70,384815, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,404024 (regressionFit = 70,404022, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,384109 (regressionFit = 70,384107, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,403912 (regressionFit = 70,403910, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06455450100431602 to score=0.0025 #egs=490.0
Comparing variance: 0.02544687962712508 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,064555)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,064555) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025447)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025447) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,297 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,260071 (regressionFit = 70,260069, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 35 47 51 64 110 145 186 195 236 246
%     Score = -31,629916 (regressionFit = 31,629913, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,629916): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,561585 (regressionFit = 31,561582, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,561585): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,612755 (regressionFit = 31,612753, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,574555 (regressionFit = 31,574553, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,621899 (regressionFit = 31,621896, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,575826 (regressionFit = 31,575824, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,617639 (regressionFit = 31,617636, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,631207 (regressionFit = 31,631204, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,065.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999998 to score=0.0025 #egs=160.0
Comparing variance: 0.08382297725123755 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,083823)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,083823) into position #1 in the search queue (new size=2).

% Time for loop #2: 376 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,260071 (regressionFit = 70,260069, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 49 127 133 145 195 256 329
%     Score = -27,651263 (regressionFit = 27,651261, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,651263): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,653330 (regressionFit = 27,653327, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,600734 (regressionFit = 27,600731, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,600734): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,640656 (regressionFit = 27,640653, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,649461 (regressionFit = 27,649458, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,647546 (regressionFit = 27,647543, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,661538 (regressionFit = 27,661535, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,084.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06480672185629016 to score=0.0025 #egs=72.0
Comparing variance: 0.0888939798536767 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,088894)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,088894) into position #1 in the search queue (new size=2).

% Time for loop #3: 306 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -70,260071 (regressionFit = 70,260069, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 10 18 65 142 177 200 230 236 256
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,900425 (regressionFit = 22,900422, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,900425): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,904574 (regressionFit = 22,904571, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,900651 (regressionFit = 22,900648, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09457005281151463 to score=0.0025 #egs=232.0
Comparing variance: 0.03692959592949685 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036930)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,036930) into position #1 in the search queue (new size=2).

% Time for loop #4: 223 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 232 positive examples, of which 232 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,260071 (regressionFit = 70,260069, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 3 5 6 8 9 10 13 14 20
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,957441 (regressionFit = 0,957438, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,957441): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 52 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 3 positive seeds: 26 1083 1263

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579716 (regressionFit = 38,579715, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,579716): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616743 (regressionFit = 38,616741, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619157 (regressionFit = 38,619156, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616743 (regressionFit = 38,616741, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,600901 (regressionFit = 38,600899, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,606218 (regressionFit = 38,606216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579193 (regressionFit = 38,579191, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,579193): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,598625 (regressionFit = 38,598623, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,626971 (regressionFit = 38,626969, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,612405 (regressionFit = 38,612403, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,606218 (regressionFit = 38,606216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,626971 (regressionFit = 38,626969, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,571368 (regressionFit = 38,571366, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,571368): trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616022 (regressionFit = 38,616019, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616743 (regressionFit = 38,616741, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,600901 (regressionFit = 38,600899, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,612405 (regressionFit = 38,612403, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,628358 (regressionFit = 38,628356, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,608267 (regressionFit = 38,608265, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,628358 (regressionFit = 38,628356, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579717 (regressionFit = 38,579715, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579193 (regressionFit = 38,579191, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,616744 (regressionFit = 38,616741, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,571368 (regressionFit = 38,571366, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,571368): trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619158 (regressionFit = 38,619156, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,625822 (regressionFit = 38,625820, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.017742898172361056 to score=0.0025 #egs=524.0
Comparing variance: 0.02945079203152008 to score=0.0025 #egs=994.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 524,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,017743)
%         ILP node to extend: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,017743) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 994,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,029451)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,029451) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,345 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 524 positive examples, of which 524 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 241 338 362 656 684 787 877 943 977

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254434 (regressionFit = 29,254433, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,254434): trusts(A, B) :- knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265047 (regressionFit = 29,265046, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241075 (regressionFit = 29,241074, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,241075): trusts(A, _) :- knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,272185 (regressionFit = 29,272183, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 614,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,258315 (regressionFit = 29,258313, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 652,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,234643 (regressionFit = 29,234641, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 736,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,234643): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 736,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,263095 (regressionFit = 29,263093, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 240,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,250043 (regressionFit = 29,250041, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 750,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,247196 (regressionFit = 29,247194, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 868,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,258315 (regressionFit = 29,258313, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 652,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,263095 (regressionFit = 29,263093, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 240,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,272185 (regressionFit = 29,272183, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 614,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,223227 (regressionFit = 29,223225, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,223227): trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,258376 (regressionFit = 29,258374, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 980,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,223227 (regressionFit = 29,223225, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,254435 (regressionFit = 29,254433, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,250043 (regressionFit = 29,250041, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 750,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,265048 (regressionFit = 29,265046, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,274087 (regressionFit = 29,274085, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 144,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,241076 (regressionFit = 29,241074, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,270103 (regressionFit = 29,270101, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 986,0/994,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,029.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04442678497545509 to score=0.0025 #egs=170.0
Comparing variance: 0.026299358538670603 to score=0.0025 #egs=824.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,044427)
%         ILP node to extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,044427) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 824,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,026299)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,026299) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,348 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
% This clause covers 170 positive examples, of which 170 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]'
%     Score = -29,223227 (regressionFit = 29,223225, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 7 19 22 26 31 50 59 64 72
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,523330 (regressionFit = 7,523327, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, A).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,523330): trusts(A, B) :- knows(A, C), knows(C, B), knows(B, A).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,403264 (regressionFit = 7,403261, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,403264): trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,523215 (regressionFit = 7,523213, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, _).  [covers 160,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(C, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,544286 (regressionFit = 7,544283, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, A).  [covers 130,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, C).  [covers 170,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,044.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
Comparing variance: 0.012698792542228315 to score=0.0025 #egs=80.0
Comparing variance: 0.07097063800310839 to score=0.0025 #egs=90.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 90,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,070971)
%         ILP node to extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,070971) into position #1 in the search queue (new size=3).

% Time for loop #8: 94 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon37433))
Created a leaf under (trusts(A, B) :- knows(A, Anon37433), knows(Anon37433, B))
Created a leaf under (trusts(A, B) :- knows(Anon36543, B), knows(Anon36543, A))

%%%%%  WILL-Produced Tree #9 @ 10:54:53 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.14006912509767702;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.14026439677427172;  // std dev = 2,160, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.10352978130126075;  // std dev = 4,684, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else if ( knows(C, A) )
%   | | | | then return 0.16050433609645762;  // std dev = 0,014, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else return 0.1361761367665717;  // std dev = 0,978, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(E, A) )
%   | then return 0.1513145385628256;  // std dev = 0,133, 524,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=514 */
%   | else if ( knows(A, F), knows(F, B) )
%   | | then if ( knows(B, F) )
%   | | | then return 0.1541092157524235;  // std dev = 1,008, 80,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | | else return 0.09473780268089832;  // std dev = 0,266, 90,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=83 */
%   | | else return 0.1416751011925075;  // std dev = 0,162, 824,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=801 */


% Clauses:

trusts(A, B, 0.14006912509767702) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.14026439677427172) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.10352978130126075) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.16050433609645762) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.1361761367665717) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.1513145385628256) :- 
     knows(C, B), 
     knows(C, A), 
     !. // Clause #6.

trusts(A, B, 0.1541092157524235) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.09473780268089832) :- 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #8.

trusts(A, B, 0.1416751011925075) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.14006912509767702) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar64),
   knows(uniqueVar64, uniqueVar64),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.14026439677427172) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar65),
   knows(uniqueVar65, uniqueVar65),
   knows(b, uniqueVar65),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.10352978130126075) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar66),
   knows(uniqueVar66, uniqueVar66),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.16050433609645762) :-  /* #pos=6 */ 
   knows(a, uniqueVar67),
   knows(uniqueVar67, uniqueVar67),
   knows(uniqueVar67, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.1361761367665717) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar68),
   knows(uniqueVar68, uniqueVar68),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.1513145385628256) :-  /* #neg=10 #pos=514 */ 
   knows(uniqueVar69, b),
   knows(uniqueVar69, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.1541092157524235) :-  /* #neg=1 #pos=79 */ 
   knows(a, uniqueVar70),
   knows(uniqueVar70, b),
   knows(b, uniqueVar70),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.09473780268089832) :-  /* #neg=7 #pos=83 */ 
   knows(a, uniqueVar71),
   knows(uniqueVar71, b),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1416751011925075) :-  /* #neg=23 #pos=801 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar67, a)
%   knows(uniqueVar69, b)
%   knows(uniqueVar66, uniqueVar66)
%   knows(b, underscore)
%   knows(a, uniqueVar68)
%   knows(uniqueVar67, uniqueVar67)
%   knows(uniqueVar64, uniqueVar64)
%   knows(uniqueVar68, uniqueVar68)
%   knows(uniqueVar71, b)
%   knows(b, uniqueVar70)
%   knows(a, uniqueVar67)
%   knows(uniqueVar70, b)
%   knows(a, uniqueVar66)
%   knows(a, uniqueVar64)
%   knows(uniqueVar65, uniqueVar65)
%   knows(b, a)
%   knows(b, uniqueVar65)
%   knows(a, uniqueVar71)
%   knows(a, uniqueVar65)
%   knows(a, uniqueVar70)
%   knows(uniqueVar69, a)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 9 trees is 1 minutes and 36,852 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04442678497545509
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035077382640745065
Set score:0.0025

% Have these 10 positive seeds: 11 205 443 610 914 1147 1213 1401 1450 1652

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330498 (regressionFit = 70,330497, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,330498): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435360 (regressionFit = 70,435359, penalties=1.12E-6) for clause:  trusts(_, A) :- knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433054 (regressionFit = 70,433053, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405376 (regressionFit = 70,405375, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,421524 (regressionFit = 70,421522, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, B).  [covers 18,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,429171 (regressionFit = 70,429169, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433889 (regressionFit = 70,433887, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, B).  [covers 52,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,428220 (regressionFit = 70,428218, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,418543 (regressionFit = 70,418541, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,419583 (regressionFit = 70,419581, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,385314 (regressionFit = 70,385312, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,399025 (regressionFit = 70,399023, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433055 (regressionFit = 70,433053, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,357055 (regressionFit = 70,357054, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433055 (regressionFit = 70,433053, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433056 (regressionFit = 70,433053, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,428220 (regressionFit = 70,428218, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,355882 (regressionFit = 70,355880, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,430509 (regressionFit = 70,430507, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,426688 (regressionFit = 70,426686, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,418543 (regressionFit = 70,418541, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433056 (regressionFit = 70,433053, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433055 (regressionFit = 70,433053, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, B), knows(A, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, B), knows(A, _).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,421524 (regressionFit = 70,421522, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, B), knows(B, A).  [covers 18,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(A, _).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433889 (regressionFit = 70,433887, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, B), knows(_, A).  [covers 52,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(_, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433055 (regressionFit = 70,433053, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,357055 (regressionFit = 70,357054, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433055 (regressionFit = 70,433053, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,429171 (regressionFit = 70,429169, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,418129 (regressionFit = 70,418127, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,298975 (regressionFit = 70,298973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,298975): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,419591 (regressionFit = 70,419589, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,418129 (regressionFit = 70,418127, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,330499 (regressionFit = 70,330497, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,435361 (regressionFit = 70,435359, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,355882 (regressionFit = 70,355880, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,433056 (regressionFit = 70,433053, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,419583 (regressionFit = 70,419581, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,431790 (regressionFit = 70,431788, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,405377 (regressionFit = 70,405375, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,430978 (regressionFit = 70,430976, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06461292590513892 to score=0.0025 #egs=490.0
Comparing variance: 0.025453649098264985 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,064613)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,064613) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025454)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025454) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,499 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,298975 (regressionFit = 70,298973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 66 118 142 204 287 291 335 400 420 483
%     Score = -31,659065 (regressionFit = 31,659062, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,659065): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,590590 (regressionFit = 31,590587, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,590590): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,648228 (regressionFit = 31,648225, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,618781 (regressionFit = 31,618778, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,652061 (regressionFit = 31,652058, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,602099 (regressionFit = 31,602096, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,650989 (regressionFit = 31,650986, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,659770 (regressionFit = 31,659767, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,065.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024375000000000015 to score=0.0025 #egs=160.0
Comparing variance: 0.08391087010303289 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,083911)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,083911) into position #1 in the search queue (new size=2).

% Time for loop #2: 398 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,298975 (regressionFit = 70,298973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 34 36 107 117 164 179 211 236 258
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,649752 (regressionFit = 27,649749, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,649752): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,671995 (regressionFit = 27,671992, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,676944 (regressionFit = 27,676941, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,682266 (regressionFit = 27,682263, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,690561 (regressionFit = 27,690558, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,084.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06531060081160306 to score=0.0025 #egs=72.0
Comparing variance: 0.08894335551312517 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,088943)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,088943) into position #1 in the search queue (new size=2).

% Time for loop #3: 299 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -70,298975 (regressionFit = 70,298973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 41 54 112 119 132 141 180 188 215
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,918617 (regressionFit = 22,918614, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,918617): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,916925 (regressionFit = 22,916922, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,916925): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,914311 (regressionFit = 22,914308, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07390245600105091 to score=0.0025 #egs=74.0
Comparing variance: 0.09482685020325606 to score=0.0025 #egs=184.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 184,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,094827)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,094827) into position #1 in the search queue (new size=2).

% Time for loop #4: 219 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 74 positive examples, of which 74 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/184,0 pos, 0,0/0,0 neg]'
%     Score = -70,298975 (regressionFit = 70,298973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 15 56 59 91 112 120 151 154 176
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -17,423723 (regressionFit = 17,423720, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 164,0/184,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,423723): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 164,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -17,420724 (regressionFit = 17,420721, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,420724): trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,095.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 180 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
% This clause covers 178 positive examples, of which 178 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 17 280 328 450 625 782 1052 1427

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581323 (regressionFit = 38,581322, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,581323): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624601 (regressionFit = 38,624599, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624601 (regressionFit = 38,624599, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,626820 (regressionFit = 38,626818, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619101 (regressionFit = 38,619099, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,636381 (regressionFit = 38,636379, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,595934 (regressionFit = 38,595932, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,620774 (regressionFit = 38,620771, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,615307 (regressionFit = 38,615305, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624643 (regressionFit = 38,624640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619101 (regressionFit = 38,619099, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581047 (regressionFit = 38,581045, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,581047): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,631494 (regressionFit = 38,631492, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,605294 (regressionFit = 38,605291, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,636381 (regressionFit = 38,636379, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624643 (regressionFit = 38,624640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624601 (regressionFit = 38,624599, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,615307 (regressionFit = 38,615305, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624642 (regressionFit = 38,624640, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,626820 (regressionFit = 38,626818, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,638638 (regressionFit = 38,638636, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,618070 (regressionFit = 38,618068, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,638638 (regressionFit = 38,638636, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581324 (regressionFit = 38,581322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581047 (regressionFit = 38,581045, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624643 (regressionFit = 38,624640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,595934 (regressionFit = 38,595932, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,638329 (regressionFit = 38,638327, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,624602 (regressionFit = 38,624599, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,635815 (regressionFit = 38,635813, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019638498369206364 to score=0.0025 #egs=1222.0
Comparing variance: 0.04926621583172548 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019638)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019638) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,049266)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,049266) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,457 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 29 31 82 84 87 93 94 110 113 160

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580045 (regressionFit = 14,580044, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,580045): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571350 (regressionFit = 14,571349, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,571350): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582753 (regressionFit = 14,582751, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559516 (regressionFit = 14,559514, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,559516): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,581507 (regressionFit = 14,581505, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,565376 (regressionFit = 14,565374, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559833 (regressionFit = 14,559831, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582065 (regressionFit = 14,582063, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559516 (regressionFit = 14,559514, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559833 (regressionFit = 14,559831, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582753 (regressionFit = 14,582751, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,574868 (regressionFit = 14,574866, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,573142 (regressionFit = 14,573140, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,574868 (regressionFit = 14,574866, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,580046 (regressionFit = 14,580044, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,581507 (regressionFit = 14,581505, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,571351 (regressionFit = 14,571349, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,574767 (regressionFit = 14,574765, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,049.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06449144242617222 to score=0.0025 #egs=126.0
Comparing variance: 0.0378446605983223 to score=0.0025 #egs=170.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 126,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,064491)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,064491) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,037845)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,037845) into position #2 in the search queue (new size=3).

% Time for loop #7: 353 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 126 positive examples, of which 126 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]'
%     Score = -14,559516 (regressionFit = 14,559514, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 5 10 22 27 30 59 66 70 75
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,121035 (regressionFit = 8,121032, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,121035): trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,111526 (regressionFit = 8,111523, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,111526): trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,125922 (regressionFit = 8,125920, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, B).  [covers 26,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,125612 (regressionFit = 8,125609, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, C).  [covers 10,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,050681 (regressionFit = 8,050679, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,050681): trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -7,973377 (regressionFit = 7,973374, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,973377): trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,117819 (regressionFit = 8,117816, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(_, C).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(_, C).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,064.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05901002255001988 to score=0.0025 #egs=122.0
Comparing variance: 0.19353772120991122 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4,0 < 2.1 * minPosCov = 6,3

% Time for loop #8: 97 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
% This clause covers 122 positive examples, of which 122 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon41377, A), knows(B, Anon41447))
Created a leaf under (trusts(A, B) :- knows(B, Anon40471), knows(Anon40471, B))

%%%%%  WILL-Produced Tree #10 @ 10:55:02 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.12165841594673887;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.11727505413817003;  // std dev = 2,168, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.10747482126467911;  // std dev = 2,339, 74,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=68 */
%   | | | else if ( knows(D, A) )
%   | | | | then return 0.0856904036308947;  // std dev = 4,073, 178,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=159 */
%   | | | | else return 0.016959063193898838;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.12674582182512226;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(B, G) )
%   | | then if ( knows(G, H) )
%   | | | then return 0.10719687069051645;  // std dev = 2,683, 122,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=114 */
%   | | | else return -0.09126577511761985;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.11883480155835295;  // std dev = 0,195, 170,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=163 */


% Clauses:

trusts(A, B, 0.12165841594673887) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.11727505413817003) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.10747482126467911) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.0856904036308947) :- 
     knows(A, C), 
     knows(C, C), 
     knows(D, A), 
     !. // Clause #4.

trusts(A, B, 0.016959063193898838) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.12674582182512226) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.10719687069051645) :- 
     knows(C, A), 
     knows(B, D), 
     knows(D, E), 
     !. // Clause #7.

trusts(A, B, -0.09126577511761985) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.11883480155835295) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.12165841594673887) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar72),
   knows(uniqueVar72, uniqueVar72),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.11727505413817003) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar73),
   knows(uniqueVar73, uniqueVar73),
   knows(b, uniqueVar73),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.10747482126467911) :-  /* #neg=6 #pos=68 */ 
   knows(a, uniqueVar74),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar74, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.0856904036308947) :-  /* #neg=19 #pos=159 */ 
   knows(a, uniqueVar75),
   knows(uniqueVar75, uniqueVar75),
   knows(underscore, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.016959063193898838) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar76),
   knows(uniqueVar76, uniqueVar76),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.12674582182512226) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar77),
   knows(uniqueVar77, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.10719687069051645) :-  /* #neg=8 #pos=114 */ 
   knows(underscore, a),
   knows(b, uniqueVar78),
   knows(uniqueVar78, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, -0.09126577511761985) :-  /* #neg=1 #pos=3 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.11883480155835295) :-  /* #neg=7 #pos=163 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar74, a)
%   knows(underscore, a)
%   knows(b, underscore)
%   knows(uniqueVar78, underscore)
%   knows(b, uniqueVar73)
%   knows(b, uniqueVar78)
%   knows(uniqueVar73, uniqueVar73)
%   knows(a, uniqueVar72)
%   knows(b, a)
%   knows(uniqueVar72, uniqueVar72)
%   knows(a, uniqueVar73)
%   knows(uniqueVar75, uniqueVar75)
%   knows(a, uniqueVar76)
%   knows(uniqueVar77, a)
%   knows(a, uniqueVar74)
%   knows(uniqueVar74, uniqueVar74)
%   knows(a, uniqueVar75)
%   knows(a, uniqueVar77)
%   knows(uniqueVar76, uniqueVar76)

% Saving model in: data/trust/train/models/bRDNs/trusts.model.ckpt
% Saving model in: data/trust/train/models/bRDNs/trusts.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 169, [
   knows(uniqueVar57, a),
   knows(a, uniqueVar3),
   knows(b, underscore),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar44, a),
   knows(uniqueVar62, uniqueVar61),
   knows(a, uniqueVar38),
   knows(uniqueVar5, a),
   knows(uniqueVar31, a),
   knows(a, uniqueVar37),
   knows(a, uniqueVar64),
   knows(uniqueVar52, a),
   knows(a, uniqueVar72),
   knows(uniqueVar51, uniqueVar51),
   knows(underscore, uniqueVar7),
   knows(uniqueVar49, uniqueVar49),
   knows(a, uniqueVar73),
   knows(uniqueVar41, b),
   knows(a, uniqueVar77),
   knows(b, uniqueVar39),
   knows(a, uniqueVar10),
   knows(uniqueVar16, a),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar2, uniqueVar2),
   knows(a, uniqueVar17),
   knows(uniqueVar3, a),
   knows(uniqueVar42, uniqueVar42),
   knows(a, uniqueVar68),
   knows(a, uniqueVar39),
   knows(a, uniqueVar4),
   knows(b, uniqueVar73),
   knows(uniqueVar56, a),
   knows(uniqueVar6, a),
   knows(b, uniqueVar15),
   knows(b, a),
   knows(uniqueVar45, a),
   knows(uniqueVar27, a),
   knows(a, uniqueVar49),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar44, uniqueVar44),
   knows(uniqueVar53, a),
   knows(b, uniqueVar46),
   knows(uniqueVar60, a),
   knows(underscore, uniqueVar23),
   knows(uniqueVar67, a),
   knows(a, uniqueVar12),
   knows(uniqueVar18, a),
   knows(underscore, uniqueVar32),
   knows(uniqueVar74, a),
   knows(uniqueVar62, a),
   knows(uniqueVar20, a),
   knows(uniqueVar68, uniqueVar68),
   knows(a, uniqueVar1),
   knows(uniqueVar14, a),
   knows(uniqueVar18, b),
   knows(b, uniqueVar70),
   knows(a, uniqueVar67),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar27, uniqueVar27),
   knows(a, uniqueVar66),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar16, uniqueVar16),
   knows(uniqueVar54, a),
   knows(uniqueVar77, a),
   knows(uniqueVar29, a),
   knows(underscore, uniqueVar29),
   knows(uniqueVar76, uniqueVar76),
   knows(uniqueVar41, a),
   knows(uniqueVar29, b),
   knows(a, uniqueVar33),
   knows(uniqueVar66, uniqueVar66),
   knows(uniqueVar58, uniqueVar58),
   knows(uniqueVar61, a),
   knows(b, b),
   knows(uniqueVar57, uniqueVar57),
   knows(uniqueVar47, a),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar73, uniqueVar73),
   knows(b, uniqueVar65),
   knows(uniqueVar43, uniqueVar43),
   knows(uniqueVar9, uniqueVar9),
   knows(a, uniqueVar76),
   knows(uniqueVar38, uniqueVar38),
   knows(a, uniqueVar74),
   knows(uniqueVar32, a),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar7, a),
   knows(uniqueVar8, a),
   knows(uniqueVar26, uniqueVar26),
   knows(uniqueVar78, underscore),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar33, uniqueVar33),
   knows(underscore, uniqueVar54),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar12, uniqueVar12),
   knows(uniqueVar30, a),
   knows(uniqueVar21, a),
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar24),
   knows(a, uniqueVar75),
   knows(a, uniqueVar28),
   knows(uniqueVar69, b),
   knows(a, uniqueVar43),
   knows(uniqueVar67, uniqueVar67),
   knows(a, uniqueVar25),
   knows(uniqueVar60, uniqueVar60),
   knows(underscore, uniqueVar8),
   knows(uniqueVar13, a),
   knows(uniqueVar28, uniqueVar28),
   knows(b, uniqueVar36),
   knows(uniqueVar70, b),
   knows(b, uniqueVar78),
   knows(uniqueVar53, uniqueVar52),
   knows(a, uniqueVar51),
   knows(a, uniqueVar2),
   knows(uniqueVar17, a),
   knows(a, uniqueVar35),
   knows(uniqueVar50, a),
   knows(uniqueVar19, uniqueVar19),
   knows(a, uniqueVar58),
   knows(a, uniqueVar65),
   knows(uniqueVar19, a),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar11, a),
   knows(uniqueVar40, a),
   knows(uniqueVar48, uniqueVar48),
   knows(uniqueVar55, a),
   knows(a, uniqueVar27),
   knows(uniqueVar25, uniqueVar25),
   knows(a, uniqueVar34),
   knows(underscore, uniqueVar55),
   knows(underscore, a),
   knows(uniqueVar59, uniqueVar59),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar17, uniqueVar17),
   knows(uniqueVar43, a),
   knows(uniqueVar64, uniqueVar64),
   knows(uniqueVar56, uniqueVar56),
   knows(uniqueVar14, uniqueVar15),
   knows(uniqueVar20, uniqueVar20),
   knows(a, uniqueVar48),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar75, uniqueVar75),
   knows(a, uniqueVar70),
   knows(a, uniqueVar50),
   knows(uniqueVar58, a),
   knows(a, uniqueVar45),
   knows(a, uniqueVar13),
   knows(uniqueVar24, a),
   knows(uniqueVar37, a),
   knows(uniqueVar22, a),
   knows(uniqueVar34, uniqueVar34),
   knows(a, uniqueVar26),
   knows(uniqueVar56, b),
   knows(a, uniqueVar11),
   knows(uniqueVar59, a),
   knows(uniqueVar71, b),
   knows(a, uniqueVar9),
   knows(uniqueVar63, a),
   knows(uniqueVar47, uniqueVar46),
   knows(a, uniqueVar71),
   knows(uniqueVar72, uniqueVar72),
   knows(underscore, uniqueVar63),
   knows(uniqueVar69, a),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar36, b),
   knows(uniqueVar42, a)]).
% Time taken to learn model for 'trusts': 1 minutes and 46,631 seconds.
% Saving model in: data/trust/train/models/bRDNs/trusts.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 1 minutes and 47,349 seconds.
