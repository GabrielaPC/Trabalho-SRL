
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=0: args[N]=SRLBoost/data/citeseer/train/train_pos.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=1: args[N]=SRLBoost/data/citeseer/train/train_neg.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=2: args[N]=SRLBoost/data/citeseer/train/train_bk.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/citeseer/train/train_pos.txt, SRLBoost/data/citeseer/train/train_neg.txt, SRLBoost/data/citeseer/train/train_bk.txt, SRLBoost/data/citeseer/train/train_facts.txt]
%  for N=3: args[N]=SRLBoost/data/citeseer/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 1.930 facts.
% Have read 1.656 examples from 'SRLBoost/data/citeseer/train' [SRLBoost/data/citeseer/train/train*].
% Have read 207 examples from 'SRLBoost/data/citeseer/train' [SRLBoost/data/citeseer/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 hasCat(A, B)
%  targetPred:                hasCat/2
%  targetArgTypes:            signature = [const, const], types = [+Id, #cat]
%  targets:                   [hasCat(A, B)]
%  targetPredicates:          [hasCat/2]
%  targetArgSpecs:            [[A[+Id], B[#cat]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '2' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'link', from 'link(2, 1938)',
%  which has types = [signature = [const, const], types = [+Id, -Id], signature = [const, const], types = [-Id, +Id]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.

%   *** WARNING ***  Constant '5' is already marked as being of types = [cat];
%          type = 'Id' may be added if not already known.
%  PredicateName = 'hasCat', from 'hasCat(5, 2)',
%  which has types = [signature = [const, const], types = [+Id, #cat]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.
% Time to collect constants: 149 milliseconds

% Read 1.656 pos examples and 207 neg examples.
% Time to init learnOneClause: 165 milliseconds
% Old dirnull
Setting model dir

% Have 1.656 'raw' positive examples and kept 1.656.
% Have 207 'raw' negative examples and kept 207.

% processing backup's for hasCat
%  POS EX = 1.656
%  NEG EX = 207

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
SRLBoost/data/citeseer/train/models/
% Learning 10 trees in this iteration for hasCat

% Learn model for: hasCat
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209876543
Set score:0.0025
% Dataset size: 1.863
Computing probabilities
prob time:6 milliseconds
No hidden examples for : hasCat
Time to build dataset: 19 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09876543209875999
Set score:0.0025

% Have these 10 positive seeds: 87 581 608 754 860 1094 1115 1336 1476 1708

% LearnOneClause Parameters:
%   Targets (1):
%    hasCat(+Id, #cat)
%  Modes (2):
%    link(+Id, -Id),
%    link(-Id, +Id)

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for link/2 with 1.128 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for link/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for link/2.
%     Score = -183,998598 (regressionFit = 183,998596, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,998598): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999758 (regressionFit = 183,999757, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994947 (regressionFit = 183,994945, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,994947): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999414 (regressionFit = 183,999411, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998746 (regressionFit = 183,998742, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999414 (regressionFit = 183,999411, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998599 (regressionFit = 183,998596, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999608 (regressionFit = 183,999605, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999414 (regressionFit = 183,999411, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,999414 (regressionFit = 183,999411, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,994948 (regressionFit = 183,994945, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,998600 (regressionFit = 183,998596, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10220246913580809 to score=0.0025 #egs=225.0
Comparing variance: 0.09829022557961883 to score=0.0025 #egs=1638.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 225,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,102202)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,102202) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.638,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,098290)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,098290) into the LAST position (#2) in the search queue.

% Time for loop #1: 1,442 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 225 positive examples, of which 225 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]'
%     Score = -183,994947 (regressionFit = 183,994945, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 79 136 147 154 195 221
%     Score = -22,995026 (regressionFit = 22,995023, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/225,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,995026): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -22,985340 (regressionFit = 22,985337, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/225,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,985340): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/225,0 pos, 0,0/0,0 neg]
%     Score = -22,804581 (regressionFit = 22,804578, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,804581): hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/225,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,102.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07018106072744623 to score=0.0025 #egs=79.0
Comparing variance: 0.1182210546068724 to score=0.0025 #egs=146.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 146,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,118221)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,118221) into position #1 in the search queue (new size=2).

% Time for loop #2: 192 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]
% This clause covers 79 positive examples, of which 79 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/146,0 pos, 0,0/0,0 neg]'
%     Score = -183,994947 (regressionFit = 183,994945, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/146,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 9 16 46 64 72 75 97 99 106
%     Score = -17,249600 (regressionFit = 17,249597, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/146,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,249600): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/146,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/146,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/146,0 pos, 0,0/0,0 neg]
%     Score = -17,259743 (regressionFit = 17,259740, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 14,0/146,0 pos, 0,0/0,0 neg]
%     Score = -17,209130 (regressionFit = 17,209127, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,209130): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/146,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/146,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,118.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13488520408163301 to score=0.0025 #egs=56.0
Comparing variance: 0.1072839506172843 to score=0.0025 #egs=90.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 90,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,107284)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/146,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,107284) into position #1 in the search queue (new size=2).

% Time for loop #3: 183 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/146,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/90,0 pos, 0,0/0,0 neg]'
%     Score = -183,994947 (regressionFit = 183,994945, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 90,0/90,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 15 16 25 29 30 41 44 49 51
%     Score = -9,526501 (regressionFit = 9,526498, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,526501): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 90,0/90,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 90,0/90,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 90,0/90,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 90,0/90,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1466836734693886 to score=0.0025 #egs=28.0
Comparing variance: 0.08740894901144611 to score=0.0025 #egs=62.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 62,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,087409)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 90,0/90,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,087409) into the LAST position (#2) in the search queue.

% Time for loop #4: 71 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 28,0/90,0 pos, 0,0/0,0 neg]
% This clause covers 28 positive examples, of which 28 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 273 359 785 841 1013 1041 1101 1223 1256 1282

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.638,0/1.638,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.638,0/1.638,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -160,999382 (regressionFit = 160,999381, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -160,999382): hasCat(A, _) :- link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968133 (regressionFit = 160,968132, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -160,968133): hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968134 (regressionFit = 160,968132, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968134 (regressionFit = 160,968132, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999386 (regressionFit = 160,999384, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,989794 (regressionFit = 160,989791, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 383,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999387 (regressionFit = 160,999384, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,968135 (regressionFit = 160,968132, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999387 (regressionFit = 160,999384, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999387 (regressionFit = 160,999384, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999383 (regressionFit = 160,999381, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999384 (regressionFit = 160,999381, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999387 (regressionFit = 160,999384, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,999387 (regressionFit = 160,999384, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 235,0/1.638,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10207100591716954 to score=0.0025 #egs=728.0
Comparing variance: 0.09523125226423797 to score=0.0025 #egs=910.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 728,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,102071)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,102071) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 910,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,095231)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,095231) into position #2 in the search queue (new size=3).

% Time for loop #5: 1,302 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
% This clause covers 728 positive examples, of which 728 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]'
%     Score = -160,968133 (regressionFit = 160,968132, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 12 20 65 203 280 292 312 337 440 465
%     Score = -74,152139 (regressionFit = 74,152137, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -74,152139): hasCat(A, _) :- link(_, A), link(A, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299877 (regressionFit = 74,299875, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,152140 (regressionFit = 74,152137, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,152140 (regressionFit = 74,152137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,193854 (regressionFit = 74,193851, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 45,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,152140 (regressionFit = 74,152137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,193854 (regressionFit = 74,193851, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 45,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,165166 (regressionFit = 74,165163, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,110255 (regressionFit = 74,110252, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -74,110255): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,152140 (regressionFit = 74,152137, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,165166 (regressionFit = 74,165163, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,307492 (regressionFit = 74,307489, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 383,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,152140 (regressionFit = 74,152137, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 121,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,165166 (regressionFit = 74,165163, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,165166 (regressionFit = 74,165163, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -74,299878 (regressionFit = 74,299875, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966824 to score=0.0025 #egs=95.0
Comparing variance: 0.09712270613868018 to score=0.0025 #egs=633.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 633,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,097123)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,097123) into position #1 in the search queue (new size=3).

% Time for loop #6: 618 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
% This clause covers 95 positive examples, of which 95 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 728,0/633,0 pos, 0,0/0,0 neg]'
%     Score = -160,968133 (regressionFit = 160,968132, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 142 209 222 285 289 313 341 359 433 444
%     Score = -61,335508 (regressionFit = 61,335505, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,335508): hasCat(A, _) :- link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312187 (regressionFit = 61,312185, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,312187): hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,298345 (regressionFit = 61,298342, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,298345): hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312188 (regressionFit = 61,312185, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,467752 (regressionFit = 61,467749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312188 (regressionFit = 61,312185, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,357425 (regressionFit = 61,357422, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, C), link(B, C).  [covers 49,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,335509 (regressionFit = 61,335505, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,335509 (regressionFit = 61,335505, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,298345 (regressionFit = 61,298342, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,335509 (regressionFit = 61,335505, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,357425 (regressionFit = 61,357422, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 49,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,335509 (regressionFit = 61,335505, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,467752 (regressionFit = 61,467749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,446744 (regressionFit = 61,446741, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 305,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312188 (regressionFit = 61,312185, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,335509 (regressionFit = 61,335505, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,467752 (regressionFit = 61,467749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,467752 (regressionFit = 61,467749, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312188 (regressionFit = 61,312185, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,312188 (regressionFit = 61,312185, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03222222222222335 to score=0.0025 #egs=30.0
Comparing variance: 0.10005252895280731 to score=0.0025 #egs=603.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 603,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,100053)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,100053) into position #1 in the search queue (new size=3).

% Time for loop #7: 411 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
% This clause covers 30 positive examples, of which 30 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 633,0/603,0 pos, 0,0/0,0 neg]'
%     Score = -160,968133 (regressionFit = 160,968132, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 603,0/603,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 29 62 74 103 225 271 408 471 492
%     Score = -60,294544 (regressionFit = 60,294542, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -60,294544): hasCat(A, _) :- link(_, A), link(A, _).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,267382 (regressionFit = 60,267380, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -60,267382): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,323035 (regressionFit = 60,323032, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 31,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,267383 (regressionFit = 60,267380, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,294545 (regressionFit = 60,294542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,294545 (regressionFit = 60,294542, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,294545 (regressionFit = 60,294542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,294545 (regressionFit = 60,294542, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,323035 (regressionFit = 60,323032, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 31,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,324837 (regressionFit = 60,324834, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 275,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,267383 (regressionFit = 60,267380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,294545 (regressionFit = 60,294542, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 76,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,323035 (regressionFit = 60,323032, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 31,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,323035 (regressionFit = 60,323032, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 31,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,267383 (regressionFit = 60,267380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
%     Score = -60,267383 (regressionFit = 60,267380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08264462809917578 to score=0.0025 #egs=110.0
Comparing variance: 0.10380622837370648 to score=0.0025 #egs=493.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,082645)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,082645) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 493,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,103806)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 603,0/603,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,103806) into position #1 in the search queue (new size=4).

% Time for loop #8: 370 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/603,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon2879, Anon1161))
Created a leaf under (hasCat(A, B) :- link(Anon1161, A))
Created a leaf under (hasCat(A, B) :- link(A, Anon53))
Created a leaf under (hasCat(A, B) :- link(Anon2879, Anon1161))

%%%%%  WILL-Produced Tree #1 @ 19:17:15 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(C, D) )
%   then if ( link(E, A) )
%   | then return 0.7821995680109053;  // std dev = 2,355, 79,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | else if ( link(D, F) )
%   | | then return 0.6974346493852267;  // std dev = 2,748, 56,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=47 */
%   | | else if ( link(A, D) )
%   | | | then return 0.6795775065280832;  // std dev = 2,027, 28,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | | else return 0.7613747415511255;  // std dev = 0,296, 62,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   else if ( link(G, A) )
%   | then if ( link(H, G), link(I, H) )
%   | | then return 0.7002541982574063;  // std dev = 3,554, 95,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=80 */
%   | | else if ( link(J, G), link(A, K) )
%   | | | then return 0.8248156017661784;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else if ( link(L, G) )
%   | | | | then return 0.76723984419042;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | | | else return 0.7405018762759786;  // std dev = 0,322, 493,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=435 */
%   | else return 0.751555528506101;  // std dev = 0,309, 910,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=813 */


% Clauses:

hasCat(A, B, 0.7821995680109053) :- 
     link(A, C), 
     link(C, D), 
     link(E, A), 
     !. // Clause #1.

hasCat(A, B, 0.6974346493852267) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #2.

hasCat(A, B, 0.6795775065280832) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #3.

hasCat(A, B, 0.7613747415511255) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.7002541982574063) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.8248156017661784) :- 
     link(C, A), 
     link(D, C), 
     link(A, E), 
     !. // Clause #6.

hasCat(A, B, 0.76723984419042) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #7.

hasCat(A, B, 0.7405018762759786) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.751555528506101) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.7821995680109053) :-  /* #neg=6 #pos=73 */ 
   link(a, uniqueVar1),
   link(uniqueVar1, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.6974346493852267) :-  /* #neg=9 #pos=47 */ 
   link(a, uniqueVar2),
   link(uniqueVar2, uniqueVar3),
   link(uniqueVar3, underscore),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.6795775065280832) :-  /* #neg=5 #pos=23 */ 
   link(a, uniqueVar4),
   link(uniqueVar4, uniqueVar5),
   link(a, uniqueVar5),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.7613747415511255) :-  /* #neg=6 #pos=56 */ 
   link(a, uniqueVar6),
   link(uniqueVar6, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.7002541982574063) :-  /* #neg=15 #pos=80 */ 
   link(uniqueVar7, a),
   link(uniqueVar8, uniqueVar7),
   link(underscore, uniqueVar8),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.8248156017661784) :-  /* #neg=1 #pos=29 */ 
   link(uniqueVar9, a),
   link(underscore, uniqueVar9),
   link(a, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.76723984419042) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar10, a),
   link(underscore, uniqueVar10),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.7405018762759786) :-  /* #neg=58 #pos=435 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.751555528506101) :-  /* #neg=97 #pos=813 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar1, underscore)
%   link(a, uniqueVar1)
%   link(uniqueVar6, underscore)
%   link(uniqueVar7, a)
%   link(a, underscore)
%   link(underscore, uniqueVar8)
%   link(uniqueVar2, uniqueVar3)
%   link(a, uniqueVar5)
%   link(underscore, uniqueVar10)
%   link(a, uniqueVar2)
%   link(underscore, uniqueVar9)
%   link(a, uniqueVar6)
%   link(uniqueVar10, a)
%   link(uniqueVar9, a)
%   link(uniqueVar4, uniqueVar5)
%   link(a, uniqueVar4)
%   link(uniqueVar8, uniqueVar7)
%   link(underscore, a)
%   link(uniqueVar3, underscore)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 1 trees is 4,922 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10005252895281114
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:202 milliseconds
No hidden examples for : hasCat
Time to build dataset: 217 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09860759092136495
Set score:0.0025

% Have these 8 positive seeds: 395 516 821 848 1237 1450 1747 1862

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,703116 (regressionFit = 183,703115, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,703116): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705774 (regressionFit = 183,705773, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703117 (regressionFit = 183,703115, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702537 (regressionFit = 183,702535, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,702537): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538857 (regressionFit = 183,538855, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,538857): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703117 (regressionFit = 183,703115, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,639483 (regressionFit = 183,639479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705680 (regressionFit = 183,705677, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,701734 (regressionFit = 183,701731, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,639483 (regressionFit = 183,639479, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705680 (regressionFit = 183,705677, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705855 (regressionFit = 183,705852, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705680 (regressionFit = 183,705677, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705680 (regressionFit = 183,705677, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702538 (regressionFit = 183,702535, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,703118 (regressionFit = 183,703115, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705775 (regressionFit = 183,705773, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,538858 (regressionFit = 183,538855, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705776 (regressionFit = 183,705773, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,702823 (regressionFit = 183,702820, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,705776 (regressionFit = 183,705773, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07332784588155078 to score=0.0025 #egs=200.0
Comparing variance: 0.10154737551301858 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,073328)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,073328) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101547)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101547) into position #1 in the search queue (new size=2).

% Time for loop #1: 1,111 seconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 139 253 286 491 523 538 646 721 727 934

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,799828 (regressionFit = 168,799827, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,799828): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,836879 (regressionFit = 168,836878, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,823163 (regressionFit = 168,823161, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,799829 (regressionFit = 168,799827, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,823164 (regressionFit = 168,823161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,799830 (regressionFit = 168,799827, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,799830 (regressionFit = 168,799827, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,697316 (regressionFit = 168,697313, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,697316): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,823164 (regressionFit = 168,823161, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,823164 (regressionFit = 168,823161, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,836880 (regressionFit = 168,836878, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,836881 (regressionFit = 168,836878, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,836881 (regressionFit = 168,836878, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,102.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12854510027008534 to score=0.0025 #egs=145.0
Comparing variance: 0.09885261746131127 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098853)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098853) into position #1 in the search queue (new size=2).

% Time for loop #2: 388 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 6 202 227 347 442 707 880 932 1286 1420

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -150,052458 (regressionFit = 150,052456, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -150,052458): hasCat(A, _) :- link(A, _).  [covers 332,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969838 (regressionFit = 149,969837, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -149,969838): hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969839 (regressionFit = 149,969837, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969839 (regressionFit = 149,969837, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043188 (regressionFit = 150,043186, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043189 (regressionFit = 150,043186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -149,969840 (regressionFit = 149,969837, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043189 (regressionFit = 150,043186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043189 (regressionFit = 150,043186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043189 (regressionFit = 150,043186, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -150,043189 (regressionFit = 150,043186, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10692187331003278 to score=0.0025 #egs=607.0
Comparing variance: 0.0933789900462407 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 607,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,106922)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,106922) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,093379)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,093379) into position #2 in the search queue (new size=3).

% Time for loop #3: 422 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 607,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 607 positive examples, of which 607 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]'
%     Score = -149,969838 (regressionFit = 149,969837, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 18 167 178 307 392 581 591
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901294 (regressionFit = 64,901292, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,901294): hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,711289 (regressionFit = 64,711286, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,711289): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,800974 (regressionFit = 64,800971, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,711289 (regressionFit = 64,711286, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,876232 (regressionFit = 64,876229, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,711289 (regressionFit = 64,711286, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,711289 (regressionFit = 64,711286, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]
%     Score = -64,901295 (regressionFit = 64,901292, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14139549099393176 to score=0.0025 #egs=76.0
Comparing variance: 0.10162943236066566 to score=0.0025 #egs=531.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101629)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 607,0/607,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101629) into position #1 in the search queue (new size=3).

% Time for loop #4: 351 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/607,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 607,0/531,0 pos, 0,0/0,0 neg]'
%     Score = -149,969838 (regressionFit = 149,969837, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 57 98 114 143 170 181 193 324 335
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865617 (regressionFit = 53,865615, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -53,865617): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,962542 (regressionFit = 53,962539, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,964110 (regressionFit = 53,964107, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%     Score = -53,865618 (regressionFit = 53,865615, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,102.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07985109373045816 to score=0.0025 #egs=114.0
Comparing variance: 0.1073443403550443 to score=0.0025 #egs=417.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,079851)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,079851) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/531,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=4).

% Time for loop #5: 273 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/531,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 531,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -149,969838 (regressionFit = 149,969837, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 8 18 80 86 96 114 197 357 364
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337963 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398583284 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #6: 137 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -149,969838 (regressionFit = 149,969837, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 1 63 72 90 149 185 231 239 281
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -149,9698):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon4739, Anon6031), link(Anon6031, Anon6051))

% Have these 10 positive seeds: 142 156 168 176 273 320 474 524 546 549

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -85,016751 (regressionFit = 85,016750, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -85,016751): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,057119 (regressionFit = 85,057117, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,016752 (regressionFit = 85,016750, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,057120 (regressionFit = 85,057117, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,016753 (regressionFit = 85,016750, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,016753 (regressionFit = 85,016750, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -85,057120 (regressionFit = 85,057117, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10128960403240271 to score=0.0025 #egs=332.0
Comparing variance: 0.08875406051169162 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101290)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101290) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #8: 91 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -85,016751 (regressionFit = 85,016750, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 37 64 72 98 107 157 270 326
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591428 (regressionFit = 33,591426, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,591428): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,605453 (regressionFit = 33,605450, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,591429 (regressionFit = 33,591426, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08349430211178148 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629382 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,083494)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,083494) into position #2 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104614) into position #1 in the search queue (new size=5).

% Time for loop #9: 113 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon6365, Anon6553))
Created a leaf under (hasCat(A, B) :- link(A, Anon6365))
Created a leaf under (hasCat(A, B) :- link(Anon6365, Anon6553))
Created a leaf under (hasCat(A, B) :- link(Anon5603, Anon4739))
Created a leaf under (hasCat(A, B) :- link(A, Anon3611), link(Anon3647, A))

%%%%%  WILL-Produced Tree #2 @ 19:17:19 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A) )
%   then return 0.6575194924103062;  // std dev = 0,271, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(A, E), link(F, E), link(G, F) )
%   | then return 0.5936434045755001;  // std dev = 4,317, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | else if ( link(H, A) )
%   | | then if ( link(I, H), link(I, A) )
%   | | | then return 0.5739543651695433;  // std dev = 3,278, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | | | else if ( link(J, H) )
%   | | | | then return 0.6536494620857681;  // std dev = 0,283, 114,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=104 */
%   | | | | else if ( link(H, K), link(K, L) )
%   | | | | | then return 0.6213825032009659;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.619787606869233;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | else if ( link(A, M) )
%   | | | then if ( link(M, N) )
%   | | | | then return 0.6502691114851378;  // std dev = 0,289, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | else return 0.6217710471857545;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | else return 0.6420304873020553;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.6575194924103062) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.5936434045755001) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #2.

hasCat(A, B, 0.5739543651695433) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.6536494620857681) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #4.

hasCat(A, B, 0.6213825032009659) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #5.

hasCat(A, B, 0.619787606869233) :- 
     link(C, A), 
     !. // Clause #6.

hasCat(A, B, 0.6502691114851378) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #7.

hasCat(A, B, 0.6217710471857545) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.6420304873020553) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.6575194924103062) :-  /* #neg=16 #pos=184 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.5936434045755001) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar11),
   link(uniqueVar12, uniqueVar11),
   link(underscore, uniqueVar12),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.5739543651695433) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar13, a),
   link(uniqueVar14, uniqueVar13),
   link(uniqueVar14, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.6536494620857681) :-  /* #neg=10 #pos=104 */ 
   link(uniqueVar15, a),
   link(underscore, uniqueVar15),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.6213825032009659) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar16, a),
   link(uniqueVar16, uniqueVar17),
   link(uniqueVar17, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.619787606869233) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.6502691114851378) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar18),
   link(uniqueVar18, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.6217710471857545) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.6420304873020553) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar16, uniqueVar17)
%   link(underscore, uniqueVar15)
%   link(uniqueVar18, underscore)
%   link(underscore, uniqueVar12)
%   link(uniqueVar16, a)
%   link(uniqueVar12, uniqueVar11)
%   link(uniqueVar15, a)
%   link(a, underscore)
%   link(uniqueVar17, underscore)
%   link(a, uniqueVar18)
%   link(uniqueVar14, uniqueVar13)
%   link(uniqueVar14, a)
%   link(a, uniqueVar11)
%   link(underscore, a)
%   link(uniqueVar13, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 2 trees is 8,160 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10128960403240278
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:185 milliseconds
No hidden examples for : hasCat
Time to build dataset: 200 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09839529958868135
Set score:0.0025

% Have these 10 positive seeds: 131 152 225 307 481 534 873 984 1098 1118

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,308494 (regressionFit = 183,308493, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,308494): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310358 (regressionFit = 183,310357, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307613 (regressionFit = 183,307611, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,307613): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,308495 (regressionFit = 183,308493, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307614 (regressionFit = 183,307611, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307614 (regressionFit = 183,307611, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,307614 (regressionFit = 183,307611, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,308496 (regressionFit = 183,308493, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,308496 (regressionFit = 183,308493, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310424 (regressionFit = 183,310421, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310359 (regressionFit = 183,310357, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310359 (regressionFit = 183,310357, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303424 (regressionFit = 183,303422, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,303424): hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,309193 (regressionFit = 183,309190, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,310360 (regressionFit = 183,310357, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,303425 (regressionFit = 183,303422, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09212582600661784 to score=0.0025 #egs=278.0
Comparing variance: 0.09949049985523804 to score=0.0025 #egs=1585.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,092126)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,092126) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.585,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099490)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099490) into position #1 in the search queue (new size=2).

% Time for loop #1: 738 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 278 positive examples, of which 278 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 96 132 204 285 405 509 553 598 707 823

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,670032 (regressionFit = 157,670031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,670032): hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689275 (regressionFit = 157,689274, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670033 (regressionFit = 157,670031, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670034 (regressionFit = 157,670031, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,670034 (regressionFit = 157,670031, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689276 (regressionFit = 157,689274, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689276 (regressionFit = 157,689274, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,688678 (regressionFit = 157,688675, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 244,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,689277 (regressionFit = 157,689274, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10434085802112958 to score=0.0025 #egs=589.0
Comparing variance: 0.09659966379872871 to score=0.0025 #egs=996.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 589,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,104341)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,104341) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 996,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,096600)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,096600) into position #2 in the search queue (new size=3).

% Time for loop #2: 575 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% This clause covers 589 positive examples, of which 589 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]'
%     Score = -157,670032 (regressionFit = 157,670031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 58 138 158 239 274 449 486 498 575 577
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451112 (regressionFit = 61,451110, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,451112): hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404987 (regressionFit = 61,404985, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,404987): hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404988 (regressionFit = 61,404985, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,443675 (regressionFit = 61,443671, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 36,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404988 (regressionFit = 61,404985, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404988 (regressionFit = 61,404985, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,455074 (regressionFit = 61,455071, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 75,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,443675 (regressionFit = 61,443671, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 36,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,455074 (regressionFit = 61,455071, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 75,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,455074 (regressionFit = 61,455071, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 75,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404988 (regressionFit = 61,404985, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,455074 (regressionFit = 61,455071, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 75,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451113 (regressionFit = 61,451110, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,404988 (regressionFit = 61,404985, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%     Score = -61,451197 (regressionFit = 61,451194, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/589,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,104.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08129735128105782 to score=0.0025 #egs=112.0
Comparing variance: 0.1096429384914066 to score=0.0025 #egs=477.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 112,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,081297)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,081297) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,109643)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 589,0/589,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,109643) into position #1 in the search queue (new size=4).

% Time for loop #3: 366 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/589,0 pos, 0,0/0,0 neg]
% This clause covers 112 positive examples, of which 112 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 589,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -157,670032 (regressionFit = 157,670031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 16 53 106 136 167 179 252 399 419
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292631 (regressionFit = 52,292629, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,292631): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,298620 (regressionFit = 52,298617, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,299669 (regressionFit = 52,299666, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 14,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,264798 (regressionFit = 52,264795, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,264798): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,298620 (regressionFit = 52,298617, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,298620 (regressionFit = 52,298617, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,298620 (regressionFit = 52,298617, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,299669 (regressionFit = 52,299666, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 14,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,292632 (regressionFit = 52,292629, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,242290 (regressionFit = 52,242287, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,242290): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,110.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1285179585026891 to score=0.0025 #egs=145.0
Comparing variance: 0.10122645430798748 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101226)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101226) into position #1 in the search queue (new size=4).

% Time for loop #4: 247 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -157,670032 (regressionFit = 157,670031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 33 40 51 70 320 325 331
%     Score = -33,584693 (regressionFit = 33,584691, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,584693): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,584694 (regressionFit = 33,584691, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,584694 (regressionFit = 33,584691, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,584694 (regressionFit = 33,584691, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08336957542478883 to score=0.0025 #egs=54.0
Comparing variance: 0.10461415040629521 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,083370)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,083370) into position #3 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104614) into position #1 in the search queue (new size=5).

% Time for loop #5: 83 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -157,670032 (regressionFit = 157,670031, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 40 58 76 88 95 137 239 254 257
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -157,6700):
%  hasCat(A, _) :- link(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon7713, Anon9205))

% Have these 10 positive seeds: 144 172 174 456 458 618 729 741 761 781

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,151096 (regressionFit = 96,151095, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,151096): hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734410929529796 to score=0.0025 #egs=417.0
Comparing variance: 0.08875406051168735 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,107344) into position #1 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,088754) into position #3 in the search queue (new size=5).

% Time for loop #7: 47 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -96,151096 (regressionFit = 96,151095, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 11 53 74 83 91 144 257 287 311 320
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337829 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398583908 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107725) into position #1 in the search queue (new size=5).

% Time for loop #8: 203 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -96,151096 (regressionFit = 96,151095, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 40 50 87 108 119 121 185 186 190 203
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -96,1511):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon9599, Anon9665), link(Anon9665, Anon9701))

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]'
%     Score = -183,303424 (regressionFit = 183,303422, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 39 51 86 88 89 90 95 147 161
%     Score = -25,542171 (regressionFit = 25,542168, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -25,542171): hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/278,0 pos, 0,0/0,0 neg]
%     Score = -25,309621 (regressionFit = 25,309618, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -25,309621): hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -25,510879 (regressionFit = 25,510876, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -25,602213 (regressionFit = 25,602210, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 125,0/278,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,092.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]
Comparing variance: 0.022745435605147427 to score=0.0025 #egs=41.0
Comparing variance: 0.10285677295049252 to score=0.0025 #egs=237.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 237,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,102857)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,102857) into position #1 in the search queue (new size=4).

% Time for loop #10: 56 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #10, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(B, C).  [covers 41,0/278,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon7125, Anon7331))
Created a leaf under (hasCat(A, B) :- link(Anon9599, A))
Created a leaf under (hasCat(A, B) :- link(Anon7713, Anon9205))
Created a leaf under (hasCat(A, B) :- link(Anon8039, A))

%%%%%  WILL-Produced Tree #3 @ 19:17:21 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(D, C) )
%   then if ( link(C, D) )
%   | then return 0.5767936658714953;  // std dev = 0,966, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else return 0.4839397466815737;  // std dev = 0,321, 237,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=209 */
%   else if ( link(A, E) )
%   | then if ( link(F, A) )
%   | | then return 0.5066454320087301;  // std dev = 0,285, 112,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=102 */
%   | | else if ( link(G, E), link(H, G) )
%   | | | then return 0.4661541081882743;  // std dev = 4,317, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | else if ( link(E, I) )
%   | | | | then return 0.5086769967333873;  // std dev = 0,289, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | else return 0.4863739977668335;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | else if ( link(J, A) )
%   | | then if ( link(J, K), link(K, L) )
%   | | | then return 0.48659780814176956;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | else return 0.48538303300265107;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | else return 0.5017821127813551;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.5767936658714953) :- 
     link(C, A), 
     link(D, C), 
     link(C, D), 
     !. // Clause #1.

hasCat(A, B, 0.4839397466815737) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.5066454320087301) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.4661541081882743) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #4.

hasCat(A, B, 0.5086769967333873) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.4863739977668335) :- 
     link(A, C), 
     !. // Clause #6.

hasCat(A, B, 0.48659780814176956) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.48538303300265107) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.5017821127813551) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.5767936658714953) :-  /* #neg=1 #pos=40 */ 
   link(uniqueVar19, a),
   link(uniqueVar20, uniqueVar19),
   link(uniqueVar19, uniqueVar20),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.4839397466815737) :-  /* #neg=28 #pos=209 */ 
   link(uniqueVar21, a),
   link(underscore, uniqueVar21),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.5066454320087301) :-  /* #neg=10 #pos=102 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.4661541081882743) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar22),
   link(uniqueVar23, uniqueVar22),
   link(underscore, uniqueVar23),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.5086769967333873) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar24),
   link(uniqueVar24, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.4863739977668335) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.48659780814176956) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar25, a),
   link(uniqueVar25, uniqueVar26),
   link(uniqueVar26, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.48538303300265107) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.5017821127813551) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar21, a)
%   link(uniqueVar19, a)
%   link(underscore, uniqueVar21)
%   link(a, underscore)
%   link(uniqueVar24, underscore)
%   link(uniqueVar25, a)
%   link(a, uniqueVar22)
%   link(uniqueVar23, uniqueVar22)
%   link(a, uniqueVar24)
%   link(uniqueVar25, uniqueVar26)
%   link(uniqueVar19, uniqueVar20)
%   link(underscore, uniqueVar23)
%   link(uniqueVar26, underscore)
%   link(uniqueVar20, uniqueVar19)
%   link(underscore, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 3 trees is 10,904 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09212582600661781
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:171 milliseconds
No hidden examples for : hasCat
Time to build dataset: 184 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0982600070334903
Set score:0.0025

% Have these 10 positive seeds: 56 134 241 282 459 585 747 748 1080 1397

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -183,057778 (regressionFit = 183,057777, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,057778): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058359 (regressionFit = 183,058358, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057779 (regressionFit = 183,057777, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053965 (regressionFit = 183,053963, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,053965): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006083 (regressionFit = 183,006081, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -183,006083): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057779 (regressionFit = 183,057777, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,047153 (regressionFit = 183,047150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053734 (regressionFit = 183,053731, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,047153 (regressionFit = 183,047150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053966 (regressionFit = 183,053963, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053734 (regressionFit = 183,053731, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057780 (regressionFit = 183,057777, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053966 (regressionFit = 183,053963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057780 (regressionFit = 183,057777, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057780 (regressionFit = 183,057777, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058195 (regressionFit = 183,058192, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057781 (regressionFit = 183,057777, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053734 (regressionFit = 183,053731, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053966 (regressionFit = 183,053963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053734 (regressionFit = 183,053731, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,053966 (regressionFit = 183,053963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057780 (regressionFit = 183,057777, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,057780 (regressionFit = 183,057777, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058360 (regressionFit = 183,058358, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058360 (regressionFit = 183,058358, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058394 (regressionFit = 183,058391, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,006084 (regressionFit = 183,006081, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -183,058361 (regressionFit = 183,058358, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07285606174230891 to score=0.0025 #egs=200.0
Comparing variance: 0.10128374541671588 to score=0.0025 #egs=1663.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 200,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,072856)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,072856) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.663,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,101284)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,101284) into position #1 in the search queue (new size=2).

% Time for loop #1: 851 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 200 positive examples, of which 200 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 52 98 262 769 844 897 1006 1351 1520

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.663,0/1.663,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,413525 (regressionFit = 168,413524, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,413525): hasCat(A, _) :- link(A, _).  [covers 477,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423776 (regressionFit = 168,423774, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423777 (regressionFit = 168,423774, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423777 (regressionFit = 168,423774, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432504 (regressionFit = 168,432502, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423778 (regressionFit = 168,423774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,307575 (regressionFit = 168,307572, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,307575): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,405449 (regressionFit = 168,405446, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423778 (regressionFit = 168,423774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423777 (regressionFit = 168,423774, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,307575 (regressionFit = 168,307572, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423778 (regressionFit = 168,423774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,307575 (regressionFit = 168,307572, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423778 (regressionFit = 168,423774, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,423778 (regressionFit = 168,423774, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,307575 (regressionFit = 168,307572, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,307575): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,432505 (regressionFit = 168,432502, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.663,0 pos, 0,0/0,0 neg]
%     Score = -168,337552 (regressionFit = 168,337549, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14087321449039036 to score=0.0025 #egs=76.0
Comparing variance: 0.09930762952226847 to score=0.0025 #egs=1587.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.587,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099308) into position #1 in the search queue (new size=2).

% Time for loop #2: 414 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 76,0/1.663,0 pos, 0,0/0,0 neg]
% This clause covers 76 positive examples, of which 76 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 104 158 328 772 789 856 911 1106 1282 1374

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.587,0/1.587,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.587,0/1.587,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,562193 (regressionFit = 157,562192, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,562193): hasCat(A, _) :- link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601203 (regressionFit = 157,601202, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562194 (regressionFit = 157,562192, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574842 (regressionFit = 157,574840, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562194 (regressionFit = 157,562192, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,540450 (regressionFit = 157,540447, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,540450): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,562195 (regressionFit = 157,562192, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,574843 (regressionFit = 157,574840, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601204 (regressionFit = 157,601202, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601204 (regressionFit = 157,601202, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]
%     Score = -157,601205 (regressionFit = 157,601202, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/1.587,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12851053058034506 to score=0.0025 #egs=145.0
Comparing variance: 0.0963290012120876 to score=0.0025 #egs=1442.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.442,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096329)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,096329) into position #1 in the search queue (new size=2).

% Time for loop #3: 471 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/1.587,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 17 117 614 658 740 971 1017 1297 1346

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.442,0/1.442,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.442,0/1.442,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -138,898420 (regressionFit = 138,898419, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,898420): hasCat(A, _) :- link(A, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902893 (regressionFit = 138,902891, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898421 (regressionFit = 138,898419, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901257 (regressionFit = 138,901255, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898421 (regressionFit = 138,898419, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,898422 (regressionFit = 138,898419, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,866794 (regressionFit = 138,866791, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -138,866794): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,901258 (regressionFit = 138,901255, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902894 (regressionFit = 138,902891, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902894 (regressionFit = 138,902891, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902895 (regressionFit = 138,902891, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,906094 (regressionFit = 138,906090, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 186,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902895 (regressionFit = 138,902891, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902894 (regressionFit = 138,902891, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902895 (regressionFit = 138,902891, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902895 (regressionFit = 138,902891, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]
%     Score = -138,902895 (regressionFit = 138,902891, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/1.442,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,096.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13296398891966743 to score=0.0025 #egs=19.0
Comparing variance: 0.09581199939480811 to score=0.0025 #egs=1423.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.423,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,095812)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,095812) into position #1 in the search queue (new size=2).

% Time for loop #4: 423 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 19,0/1.442,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 90 178 565 587 593 1019 1073 1192 1235

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.423,0/1.423,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.423,0/1.423,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -136,338126 (regressionFit = 136,338125, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/1.423,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -136,338126): hasCat(A, _) :- link(A, _).  [covers 313,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334507 (regressionFit = 136,334506, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -136,334507): hasCat(A, _) :- link(_, A).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334508 (regressionFit = 136,334506, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334508 (regressionFit = 136,334506, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306185 (regressionFit = 136,306183, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -136,306185): hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306186 (regressionFit = 136,306183, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306186 (regressionFit = 136,306183, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,340475 (regressionFit = 136,340472, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306186 (regressionFit = 136,306183, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,334509 (regressionFit = 136,334506, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306186 (regressionFit = 136,306183, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,306186 (regressionFit = 136,306183, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,338127 (regressionFit = 136,338125, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/1.423,0 pos, 0,0/0,0 neg]
%     Score = -136,338128 (regressionFit = 136,338125, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/1.423,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,096.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07970397899993496 to score=0.0025 #egs=114.0
Comparing variance: 0.09718863939306496 to score=0.0025 #egs=1309.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 114,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,079704)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,079704) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.309,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,097189)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,097189) into position #1 in the search queue (new size=3).

% Time for loop #5: 378 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/1.423,0 pos, 0,0/0,0 neg]
% This clause covers 114 positive examples, of which 114 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 526 704 992 1076 1154 1197 1281

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.309,0/1.309,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.309,0/1.309,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -127,219542 (regressionFit = 127,219541, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -127,219542): hasCat(A, _) :- link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194240 (regressionFit = 127,194239, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -127,194240): hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194241 (regressionFit = 127,194239, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194241 (regressionFit = 127,194239, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,214875 (regressionFit = 127,214872, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,194242 (regressionFit = 127,194239, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,219543 (regressionFit = 127,219541, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]
%     Score = -127,219544 (regressionFit = 127,219541, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/1.309,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734396251262629 to score=0.0025 #egs=417.0
Comparing variance: 0.09241233926765904 to score=0.0025 #egs=892.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107344) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 892,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,092412)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,092412) into position #2 in the search queue (new size=4).

% Time for loop #6: 231 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/1.309,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -127,194240 (regressionFit = 127,194239, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 51 73 125 162 263 277 352 380
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -127,1942):
%  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon13511, A))

% Have these 10 positive seeds: 58 127 131 134 250 496 515 559 567 588

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 892,0/892,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -82,424090 (regressionFit = 82,424089, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,424090): hasCat(A, _) :- link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424091 (regressionFit = 82,424089, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,381273 (regressionFit = 82,381271, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -82,381273): hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424091 (regressionFit = 82,424089, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,381274 (regressionFit = 82,381271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,381274 (regressionFit = 82,381271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,381274 (regressionFit = 82,381271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,381274 (regressionFit = 82,381271, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]
%     Score = -82,424092 (regressionFit = 82,424089, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 313,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,092.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #8: 121 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/892,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]'
%     Score = -136,306185 (regressionFit = 136,306183, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 2 19 55 70 71 75 79 108
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%     Score = -9,072750 (regressionFit = 9,072746, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,072750): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,080.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10081264746346158 to score=0.0025 #egs=35.0
Comparing variance: 0.07018106072744727 to score=0.0025 #egs=79.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 79,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,070181)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 114,0/114,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,070181) into the LAST position (#2) in the search queue.

% Time for loop #9: 22 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 35,0/114,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon10505), link(Anon10541, A))
Created a leaf under (hasCat(A, B) :- link(Anon14345, Anon13103))

%%%%%  WILL-Produced Tree #4 @ 19:17:25 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, A) )
%   then return 0.3866227058155897;  // std dev = 0,270, 200,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=184 */
%   else if ( link(E, A), link(F, E), link(F, A) )
%   | then return 0.32952490785209293;  // std dev = 3,272, 76,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=63 */
%   | else if ( link(A, G), link(H, G), link(I, H) )
%   | | then return 0.35190657645928664;  // std dev = 4,317, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | else if ( link(A, J), link(J, K), link(K, L) )
%   | | | then return 0.3280138063741651;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( link(M, A), link(N, M) )
%   | | | | then if ( link(P, N) )
%   | | | | | then return 0.3742687191717071;  // std dev = 1,878, 35,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | | | | else return 0.3978673429137638;  // std dev = 0,265, 79,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | | | | else if ( link(Q, A) )
%   | | | | | then return 0.36605947219213647;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | | | else if ( link(A, R), link(R, S) )
%   | | | | | | then return 0.4128131674923947;  // std dev = 1,373, 35,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | | | | else return 0.37404662628881247;  // std dev = 8,972, 857,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=767 */


% Clauses:

hasCat(A, B, 0.3866227058155897) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.32952490785209293) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.35190657645928664) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.3280138063741651) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.3742687191717071) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.3978673429137638) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.36605947219213647) :- 
     link(C, A), 
     !. // Clause #7.

hasCat(A, B, 0.4128131674923947) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #8.

hasCat(A, B, 0.37404662628881247) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.3866227058155897) :-  /* #neg=16 #pos=184 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.32952490785209293) :-  /* #neg=13 #pos=63 */ 
   link(uniqueVar27, a),
   link(uniqueVar28, uniqueVar27),
   link(uniqueVar28, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.35190657645928664) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar29),
   link(uniqueVar30, uniqueVar29),
   link(underscore, uniqueVar30),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.3280138063741651) :-  /* #neg=3 #pos=16 */ 
   link(a, uniqueVar31),
   link(uniqueVar31, uniqueVar32),
   link(uniqueVar32, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.3742687191717071) :-  /* #neg=4 #pos=31 */ 
   link(uniqueVar33, a),
   link(uniqueVar34, uniqueVar33),
   link(underscore, uniqueVar34),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.3978673429137638) :-  /* #neg=6 #pos=73 */ 
   link(uniqueVar35, a),
   link(underscore, uniqueVar35),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.36605947219213647) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.4128131674923947) :-  /* #neg=2 #pos=33 */ 
   link(a, uniqueVar36),
   link(uniqueVar36, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.37404662628881247) :-  /* #neg=90 #pos=767 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar35)
%   link(uniqueVar31, uniqueVar32)
%   link(uniqueVar33, a)
%   link(a, uniqueVar29)
%   link(a, underscore)
%   link(uniqueVar34, uniqueVar33)
%   link(a, uniqueVar31)
%   link(a, uniqueVar36)
%   link(uniqueVar30, uniqueVar29)
%   link(uniqueVar32, underscore)
%   link(uniqueVar35, a)
%   link(uniqueVar36, underscore)
%   link(uniqueVar28, a)
%   link(underscore, a)
%   link(uniqueVar28, uniqueVar27)
%   link(uniqueVar27, a)
%   link(underscore, uniqueVar30)
%   link(underscore, uniqueVar34)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 4 trees is 14,209 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07970397899993498
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:221 milliseconds
No hidden examples for : hasCat
Time to build dataset: 234 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09818373836328255
Set score:0.0025

% Have these 10 positive seeds: 241 340 490 565 657 697 734 735 859 1086

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,914523 (regressionFit = 182,914522, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,914523): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916289 (regressionFit = 182,916288, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914524 (regressionFit = 182,914522, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912192 (regressionFit = 182,912190, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,912192): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881382 (regressionFit = 182,881380, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,881382): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914524 (regressionFit = 182,914522, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,846407 (regressionFit = 182,846404, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,846407): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,880532 (regressionFit = 182,880529, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,909770 (regressionFit = 182,909767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,828195 (regressionFit = 182,828192, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,828195): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912322 (regressionFit = 182,912319, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,909770 (regressionFit = 182,909767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,828195 (regressionFit = 182,828192, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,828195): hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,846407 (regressionFit = 182,846404, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916108 (regressionFit = 182,916105, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,909770 (regressionFit = 182,909767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,909770 (regressionFit = 182,909767, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912193 (regressionFit = 182,912190, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,914525 (regressionFit = 182,914522, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916290 (regressionFit = 182,916288, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912391 (regressionFit = 182,912388, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,880532 (regressionFit = 182,880529, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912392 (regressionFit = 182,912388, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912392 (regressionFit = 182,912388, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912392 (regressionFit = 182,912388, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,846407 (regressionFit = 182,846404, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,881383 (regressionFit = 182,881380, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916291 (regressionFit = 182,916288, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916291 (regressionFit = 182,916288, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,912392 (regressionFit = 182,912388, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,916291 (regressionFit = 182,916288, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04518765216276117 to score=0.0025 #egs=39.0
Comparing variance: 0.09926857115666772 to score=0.0025 #egs=1824.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.824,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099269)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099269) into the LAST position (#1) in the search queue.

% Time for loop #1: 745 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 39 positive examples, of which 39 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 559 592 661 720 757 964 1179 1594

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -181,055555 (regressionFit = 181,055553, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,055555): hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063002 (regressionFit = 181,063001, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,026965 (regressionFit = 181,026963, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,026965): hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061409 (regressionFit = 181,061407, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055555 (regressionFit = 181,055553, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,026966 (regressionFit = 181,026963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,026966 (regressionFit = 181,026963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,036978 (regressionFit = 181,036976, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,059344 (regressionFit = 181,059341, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 306,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055557 (regressionFit = 181,055553, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,026966 (regressionFit = 181,026963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,026966 (regressionFit = 181,026963, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,055556 (regressionFit = 181,055553, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,036978 (regressionFit = 181,036976, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,065854 (regressionFit = 181,065851, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063003 (regressionFit = 181,063001, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063003 (regressionFit = 181,063001, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064137 (regressionFit = 181,064135, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,036978 (regressionFit = 181,036976, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 79,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,013967 (regressionFit = 181,013964, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,013967): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,060661 (regressionFit = 181,060658, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 437,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064138 (regressionFit = 181,064135, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,061410 (regressionFit = 181,061407, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,013967 (regressionFit = 181,013964, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,013967 (regressionFit = 181,013964, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,063004 (regressionFit = 181,063001, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064138 (regressionFit = 181,064135, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064138 (regressionFit = 181,064135, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,065854 (regressionFit = 181,065851, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064138 (regressionFit = 181,064135, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,013967 (regressionFit = 181,013964, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -181,013967): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -181,064138 (regressionFit = 181,064135, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1270846394166302 to score=0.0025 #egs=99.0
Comparing variance: 0.09764207817162945 to score=0.0025 #egs=1725.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.725,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097642)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097642) into the LAST position (#1) in the search queue.

% Time for loop #2: 863 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% This clause covers 99 positive examples, of which 99 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 89 262 438 597 656 754 1202 1395 1448 1511

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.725,0/1.725,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.725,0/1.725,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,409241 (regressionFit = 168,409240, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,409241): hasCat(A, _) :- link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,432490 (regressionFit = 168,432489, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409242 (regressionFit = 168,409240, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395863 (regressionFit = 168,395860, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,395863): hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431047 (regressionFit = 168,431045, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409242 (regressionFit = 168,409240, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,420334 (regressionFit = 168,420331, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 47,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,412947 (regressionFit = 168,412944, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,418341 (regressionFit = 168,418338, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 283,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,395864 (regressionFit = 168,395860, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,409243 (regressionFit = 168,409240, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,420334 (regressionFit = 168,420331, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 47,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,412947 (regressionFit = 168,412944, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,430687 (regressionFit = 168,430683, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 40,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,432491 (regressionFit = 168,432489, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,418767 (regressionFit = 168,418765, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,430687 (regressionFit = 168,430683, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 40,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,418768 (regressionFit = 168,418765, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,418768 (regressionFit = 168,418765, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,416385 (regressionFit = 168,416382, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 45,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,412947 (regressionFit = 168,412944, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431048 (regressionFit = 168,431045, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,432492 (regressionFit = 168,432489, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,431823 (regressionFit = 168,431820, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 338,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,418768 (regressionFit = 168,418765, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,432492 (regressionFit = 168,432489, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11055088102520369 to score=0.0025 #egs=179.0
Comparing variance: 0.09612370813405684 to score=0.0025 #egs=1546.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 179,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,110551)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,110551) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.546,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096124)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,096124) into the LAST position (#2) in the search queue.

% Time for loop #3: 659 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/1.725,0 pos, 0,0/0,0 neg]
% This clause covers 179 positive examples, of which 179 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/179,0 pos, 0,0/0,0 neg]'
%     Score = -168,395863 (regressionFit = 168,395860, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/179,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 32 41 64 67 87 113 138 161 165
%     Score = -19,788024 (regressionFit = 19,788021, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 70,0/179,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,788024): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 70,0/179,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 179,0/179,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 179,0/179,0 pos, 0,0/0,0 neg]
%     Score = -19,781349 (regressionFit = 19,781346, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -19,781349): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]
%     Score = -19,788254 (regressionFit = 19,788251, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 47,0/179,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 179,0/179,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 179,0/179,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,111.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12511908813268838 to score=0.0025 #egs=54.0
Comparing variance: 0.10419932116920923 to score=0.0025 #egs=125.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 125,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,104199)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/179,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,104199) into position #1 in the search queue (new size=2).

% Time for loop #4: 48 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 54,0/179,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 179,0/125,0 pos, 0,0/0,0 neg]'
%     Score = -168,395863 (regressionFit = 168,395860, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 10 36 41 68 75 94 112 122
%     Score = -12,978820 (regressionFit = 12,978817, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,978820): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -13,014289 (regressionFit = 13,014286, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 35,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 125,0/125,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,104.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13586127112084068 to score=0.0025 #egs=43.0
Comparing variance: 0.08703393383481242 to score=0.0025 #egs=82.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 82,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,087034)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 125,0/125,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,087034) into the LAST position (#2) in the search queue.

% Time for loop #5: 27 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 43,0/125,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 190 252 895 1048 1170 1454 1498

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.546,0/1.546,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.546,0/1.546,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -148,607247 (regressionFit = 148,607246, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 636,0/1.546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -148,607247): hasCat(A, _) :- link(_, A).  [covers 636,0/1.546,0 pos, 0,0/0,0 neg]
%     Score = -148,607248 (regressionFit = 148,607246, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 636,0/1.546,0 pos, 0,0/0,0 neg]
%     Score = -148,607249 (regressionFit = 148,607246, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 636,0/1.546,0 pos, 0,0/0,0 neg]
%     Score = -148,604889 (regressionFit = 148,604886, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -148,604889): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]
%     Score = -148,607249 (regressionFit = 148,607246, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 636,0/1.546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,096.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09187459786797543 to score=0.0025 #egs=291.0
Comparing variance: 0.09710707428467015 to score=0.0025 #egs=1255.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.255,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097107)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,097107) into position #1 in the search queue (new size=2).

% Time for loop #6: 270 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 291,0/1.546,0 pos, 0,0/0,0 neg]
% This clause covers 291 positive examples, of which 291 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 57 64 116 254 519 784 829 1049

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.255,0/1.255,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.255,0/1.255,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -121,850495 (regressionFit = 121,850494, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -121,850495): hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,867972 (regressionFit = 121,867971, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 345,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850496 (regressionFit = 121,850494, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850496 (regressionFit = 121,850494, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,868710 (regressionFit = 121,868707, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%     Score = -121,850497 (regressionFit = 121,850494, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10621985597092123 to score=0.0025 #egs=331.0
Comparing variance: 0.09382220974406218 to score=0.0025 #egs=924.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 331,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,106220)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,106220) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 924,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,093822)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,093822) into position #2 in the search queue (new size=3).

% Time for loop #7: 150 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 331,0/1.255,0 pos, 0,0/0,0 neg]
% This clause covers 331 positive examples, of which 331 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]'
%     Score = -121,850495 (regressionFit = 121,850494, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 32 63 114 117 119 139 148 282 290 314
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%     Score = -35,158209 (regressionFit = 35,158206, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -35,158209): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,106.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11463154147383418 to score=0.0025 #egs=53.0
Comparing variance: 0.10461415040629511 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,104614)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 331,0/331,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,104614) into position #1 in the search queue (new size=3).

% Time for loop #8: 108 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 53,0/331,0 pos, 0,0/0,0 neg]
% This clause covers 53 positive examples, of which 53 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon18463, Anon18197), link(Anon18563, Anon18463))
Created a leaf under (hasCat(A, B) :- link(A, Anon18197))
Created a leaf under (hasCat(A, B) :- link(A, Anon16779))

%%%%%  WILL-Produced Tree #5 @ 19:17:28 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, C), link(C, D) )
%   then return 0.327364532970671;  // std dev = 1,328, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   else if ( link(E, A), link(F, E), link(F, A) )
%   | then return 0.2570586906606973;  // std dev = 3,547, 99,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=84 */
%   | else if ( link(A, G), link(G, H) )
%   | | then if ( link(H, I) )
%   | | | then return 0.2573543744482423;  // std dev = 2,599, 54,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=46 */
%   | | | else if ( link(A, H) )
%   | | | | then return 0.24471233828081118;  // std dev = 2,417, 43,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=36 */
%   | | | | else return 0.28513775326746404;  // std dev = 0,295, 82,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=74 */
%   | | else if ( link(J, A), link(J, K), link(K, L) )
%   | | | then return 0.2847444858761528;  // std dev = 5,171, 291,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=261 */
%   | | | else if ( link(A, M) )
%   | | | | then if ( link(N, M), link(P, N) )
%   | | | | | then return 0.27809526235588244;  // std dev = 2,465, 53,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=46 */
%   | | | | | else return 0.2745268547956197;  // std dev = 0,323, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | | else return 0.28390101423140623;  // std dev = 0,306, 924,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=827 */


% Clauses:

hasCat(A, B, 0.327364532970671) :- 
     link(A, C), 
     link(D, C), 
     link(C, D), 
     !. // Clause #1.

hasCat(A, B, 0.2570586906606973) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.2573543744482423) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.24471233828081118) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #4.

hasCat(A, B, 0.28513775326746404) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #5.

hasCat(A, B, 0.2847444858761528) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #6.

hasCat(A, B, 0.27809526235588244) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #7.

hasCat(A, B, 0.2745268547956197) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.28390101423140623) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.327364532970671) :-  /* #neg=2 #pos=37 */ 
   link(a, uniqueVar37),
   link(uniqueVar38, uniqueVar37),
   link(uniqueVar37, uniqueVar38),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.2570586906606973) :-  /* #neg=15 #pos=84 */ 
   link(uniqueVar39, a),
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar40, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.2573543744482423) :-  /* #neg=8 #pos=46 */ 
   link(a, uniqueVar41),
   link(uniqueVar41, uniqueVar42),
   link(uniqueVar42, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.24471233828081118) :-  /* #neg=7 #pos=36 */ 
   link(a, uniqueVar43),
   link(uniqueVar43, uniqueVar44),
   link(a, uniqueVar44),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.28513775326746404) :-  /* #neg=8 #pos=74 */ 
   link(a, uniqueVar45),
   link(uniqueVar45, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.2847444858761528) :-  /* #neg=30 #pos=261 */ 
   link(uniqueVar46, a),
   link(uniqueVar46, uniqueVar47),
   link(uniqueVar47, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.27809526235588244) :-  /* #neg=7 #pos=46 */ 
   link(a, uniqueVar48),
   link(uniqueVar49, uniqueVar48),
   link(underscore, uniqueVar49),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.2745268547956197) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.28390101423140623) :-  /* #neg=97 #pos=827 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar40, uniqueVar39)
%   link(uniqueVar41, uniqueVar42)
%   link(uniqueVar42, underscore)
%   link(uniqueVar37, uniqueVar38)
%   link(uniqueVar46, a)
%   link(a, uniqueVar37)
%   link(uniqueVar47, underscore)
%   link(a, underscore)
%   link(uniqueVar38, uniqueVar37)
%   link(uniqueVar43, uniqueVar44)
%   link(uniqueVar49, uniqueVar48)
%   link(underscore, uniqueVar49)
%   link(uniqueVar39, a)
%   link(a, uniqueVar45)
%   link(a, uniqueVar48)
%   link(a, uniqueVar41)
%   link(uniqueVar45, underscore)
%   link(a, uniqueVar43)
%   link(uniqueVar40, a)
%   link(a, uniqueVar44)
%   link(uniqueVar46, uniqueVar47)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 5 trees is 17,356 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10621985597092125
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:325 milliseconds
No hidden examples for : hasCat
Time to build dataset: 337 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09816003005444404
Set score:0.0025

% Have these 8 positive seeds: 15 32 331 660 684 914 963 1306

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,871903 (regressionFit = 182,871902, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,871903): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872015 (regressionFit = 182,872014, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871904 (regressionFit = 182,871902, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869644 (regressionFit = 182,869642, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,869644): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830810 (regressionFit = 182,830807, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,830810): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871904 (regressionFit = 182,871902, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830811 (regressionFit = 182,830807, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,862591 (regressionFit = 182,862588, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,794916 (regressionFit = 182,794913, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,794916): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830811 (regressionFit = 182,830807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,835090 (regressionFit = 182,835087, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869581 (regressionFit = 182,869578, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,862591 (regressionFit = 182,862588, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,794916 (regressionFit = 182,794913, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830811 (regressionFit = 182,830807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871584 (regressionFit = 182,871581, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,869645 (regressionFit = 182,869642, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830811 (regressionFit = 182,830807, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871905 (regressionFit = 182,871902, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872016 (regressionFit = 182,872014, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865827 (regressionFit = 182,865825, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,835090 (regressionFit = 182,835087, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865828 (regressionFit = 182,865825, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,794916 (regressionFit = 182,794913, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,794916): hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,830811 (regressionFit = 182,830807, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 200,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,872017 (regressionFit = 182,872014, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,871820 (regressionFit = 182,871817, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,865828 (regressionFit = 182,865825, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05880428982134285 to score=0.0025 #egs=94.0
Comparing variance: 0.10020763677242599 to score=0.0025 #egs=1769.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,100208)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,100208) into the LAST position (#1) in the search queue.

% Time for loop #1: 712 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 94,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 762 839 1045 1110 1297 1407 1669

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.769,0/1.769,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -177,256265 (regressionFit = 177,256264, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,256265): hasCat(A, _) :- link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259670 (regressionFit = 177,259669, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256266 (regressionFit = 177,256264, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248871 (regressionFit = 177,248869, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,248871): hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256266 (regressionFit = 177,256264, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,266928 (regressionFit = 177,266925, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,264787 (regressionFit = 177,264784, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 68,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,266928 (regressionFit = 177,266925, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,251287 (regressionFit = 177,251284, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,266928 (regressionFit = 177,266925, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,266928 (regressionFit = 177,266925, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 65,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,248872 (regressionFit = 177,248869, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256267 (regressionFit = 177,256264, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 583,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259671 (regressionFit = 177,259669, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259671 (regressionFit = 177,259669, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267198 (regressionFit = 177,267196, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,210724 (regressionFit = 177,210721, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,210724): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,256847 (regressionFit = 177,256844, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 368,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,210724 (regressionFit = 177,210721, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,210724 (regressionFit = 177,210721, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,259672 (regressionFit = 177,259669, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 713,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,210724 (regressionFit = 177,210721, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -177,210724): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]
%     Score = -177,267199 (regressionFit = 177,267196, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 227,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13662322449211597 to score=0.0025 #egs=85.0
Comparing variance: 0.09833595429584757 to score=0.0025 #egs=1684.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.684,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,098336)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,098336) into the LAST position (#1) in the search queue.

% Time for loop #2: 689 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 85,0/1.769,0 pos, 0,0/0,0 neg]
% This clause covers 85 positive examples, of which 85 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 179 183 222 447 502 606 845 1133

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.684,0/1.684,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.684,0/1.684,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -165,577566 (regressionFit = 165,577565, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 574,0/1.684,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,577566): hasCat(A, _) :- link(A, _).  [covers 574,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597207 (regressionFit = 165,597206, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,577567 (regressionFit = 165,577565, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 574,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,577568 (regressionFit = 165,577565, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 574,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,577568 (regressionFit = 165,577565, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 574,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,576031 (regressionFit = 165,576028, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 242,0/1.684,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,576031): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 242,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597208 (regressionFit = 165,597206, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597208 (regressionFit = 165,597206, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563533 (regressionFit = 165,563531, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -165,563533): hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563534 (regressionFit = 165,563531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563534 (regressionFit = 165,563531, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597745 (regressionFit = 165,597742, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 283,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563534 (regressionFit = 165,563531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,597209 (regressionFit = 165,597206, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 628,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563534 (regressionFit = 165,563531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%     Score = -165,563534 (regressionFit = 165,563531, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07660647228237863 to score=0.0025 #egs=142.0
Comparing variance: 0.10031479346094987 to score=0.0025 #egs=1542.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 142,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,076606)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,076606) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.542,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,100315)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,100315) into position #1 in the search queue (new size=2).

% Time for loop #3: 182 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 142,0/1.684,0 pos, 0,0/0,0 neg]
% This clause covers 142 positive examples, of which 142 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 8 137 226 533 677 820 832 836 859 948

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -154,668623 (regressionFit = 154,668622, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,668623): hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,674498 (regressionFit = 154,674497, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668624 (regressionFit = 154,668622, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673868 (regressionFit = 154,673866, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685056 (regressionFit = 154,685053, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668624 (regressionFit = 154,668622, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685056 (regressionFit = 154,685053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,658052 (regressionFit = 154,658049, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,658052): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685057 (regressionFit = 154,685053, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,668625 (regressionFit = 154,668622, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,659776 (regressionFit = 154,659773, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685410 (regressionFit = 154,685406, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 21,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,673869 (regressionFit = 154,673866, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 167,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685057 (regressionFit = 154,685053, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685410 (regressionFit = 154,685406, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 21,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,685056 (regressionFit = 154,685053, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 69,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11644644710222661 to score=0.0025 #egs=214.0
Comparing variance: 0.09769466063844352 to score=0.0025 #egs=1328.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.328,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,097695)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,097695) into position #1 in the search queue (new size=2).

% Time for loop #4: 167 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/1.542,0 pos, 0,0/0,0 neg]
% This clause covers 214 positive examples, of which 214 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 107 111 285 529 617 706 964 1095 1160

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.328,0/1.328,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -129,736257 (regressionFit = 129,736256, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -129,736257): hasCat(A, _) :- link(A, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,717399 (regressionFit = 129,717398, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -129,717399): hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736258 (regressionFit = 129,736256, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736258 (regressionFit = 129,736256, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]
%     Score = -129,736259 (regressionFit = 129,736256, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734392310441424 to score=0.0025 #egs=417.0
Comparing variance: 0.09325464557498983 to score=0.0025 #egs=911.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 911,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,093255)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,093255) into position #2 in the search queue (new size=3).

% Time for loop #5: 96 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/1.328,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -129,717399 (regressionFit = 129,717398, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 32 54 64 78 161 351 398
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337936 to score=0.0025 #egs=132.0
Comparing variance: 0.10772545398584235 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,107725) into position #1 in the search queue (new size=3).

% Time for loop #6: 70 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/285,0 pos, 0,0/0,0 neg]'
%     Score = -129,717399 (regressionFit = 129,717398, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 38 44 78 93 119 143 153 170 222 227
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -129,7174):
%  hasCat(A, _) :- link(_, A).  [covers 285,0/285,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon21811, Anon22059), link(Anon22059, Anon22095))

% Have these 9 positive seeds: 376 401 410 424 425 482 549 805 905

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 911,0/911,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -84,942164 (regressionFit = 84,942163, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -84,942164): hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942165 (regressionFit = 84,942163, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942165 (regressionFit = 84,942163, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%     Score = -84,942166 (regressionFit = 84,942163, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,093.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10106494540843185 to score=0.0025 #egs=332.0
Comparing variance: 0.08875406051169 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,101065)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,101065) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 6 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #8: 43 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 332,0/911,0 pos, 0,0/0,0 neg]
% This clause covers 332 positive examples, of which 332 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -84,942164 (regressionFit = 84,942163, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 95 114 116 123 140 148 172 175 206
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542152 (regressionFit = 33,542150, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,542152): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542153 (regressionFit = 33,542150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542153 (regressionFit = 33,542150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542153 (regressionFit = 33,542150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,542153 (regressionFit = 33,542150, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #9: 43 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(A, Anon22493))
Created a leaf under (hasCat(A, B) :- link(Anon20707, A), link(Anon20835, Anon20707))

%%%%%  WILL-Produced Tree #6 @ 19:17:30 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(A, D) )
%   then return 0.24393567488467882;  // std dev = 2,351, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   else if ( link(E, A), link(F, E), link(F, A) )
%   | then return 0.18934724965625946;  // std dev = 3,408, 85,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=71 */
%   | else if ( link(G, A), link(H, G) )
%   | | then return 0.23064648606163485;  // std dev = 0,277, 142,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=130 */
%   | | else if ( link(A, I), link(J, I), link(K, J) )
%   | | | then return 0.20393088629297387;  // std dev = 4,992, 214,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=185 */
%   | | | else if ( link(L, A) )
%   | | | | then if ( link(L, M), link(M, N) )
%   | | | | | then return 0.2107583963083462;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | | else return 0.20997413995085207;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | | else if ( link(A, P) )
%   | | | | | then if ( link(P, Q) )
%   | | | | | | then return 0.2271619809116494;  // std dev = 2,112, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | | | else return 0.21127528717411106;  // std dev = 5,393, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | | | else return 0.22165364512847807;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.24393567488467882) :- 
     link(C, A), 
     link(C, D), 
     link(A, D), 
     !. // Clause #1.

hasCat(A, B, 0.18934724965625946) :- 
     link(C, A), 
     link(D, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.23064648606163485) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #3.

hasCat(A, B, 0.20393088629297387) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #4.

hasCat(A, B, 0.2107583963083462) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #5.

hasCat(A, B, 0.20997413995085207) :- 
     link(C, A), 
     !. // Clause #6.

hasCat(A, B, 0.2271619809116494) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #7.

hasCat(A, B, 0.21127528717411106) :- 
     link(A, C), 
     !. // Clause #8.

hasCat(A, B, 0.22165364512847807) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.24393567488467882) :-  /* #neg=6 #pos=88 */ 
   link(uniqueVar50, a),
   link(uniqueVar50, uniqueVar51),
   link(a, uniqueVar51),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.18934724965625946) :-  /* #neg=14 #pos=71 */ 
   link(uniqueVar52, a),
   link(uniqueVar53, uniqueVar52),
   link(uniqueVar53, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.23064648606163485) :-  /* #neg=12 #pos=130 */ 
   link(uniqueVar54, a),
   link(underscore, uniqueVar54),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.20393088629297387) :-  /* #neg=29 #pos=185 */ 
   link(a, uniqueVar55),
   link(uniqueVar56, uniqueVar55),
   link(underscore, uniqueVar56),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.2107583963083462) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar57, a),
   link(uniqueVar57, uniqueVar58),
   link(uniqueVar58, underscore),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.20997413995085207) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.2271619809116494) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar59),
   link(uniqueVar59, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.21127528717411106) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.22165364512847807) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar56, uniqueVar55)
%   link(uniqueVar50, uniqueVar51)
%   link(uniqueVar53, a)
%   link(uniqueVar57, a)
%   link(uniqueVar57, uniqueVar58)
%   link(a, uniqueVar51)
%   link(a, uniqueVar55)
%   link(uniqueVar53, uniqueVar52)
%   link(a, underscore)
%   link(a, uniqueVar59)
%   link(underscore, uniqueVar54)
%   link(underscore, uniqueVar56)
%   link(uniqueVar54, a)
%   link(uniqueVar58, underscore)
%   link(uniqueVar59, underscore)
%   link(uniqueVar52, a)
%   link(uniqueVar50, a)
%   link(underscore, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 6 trees is 19,745 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10106494540843182
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:151 milliseconds
No hidden examples for : hasCat
Time to build dataset: 156 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09814447768788075
Set score:0.0025

% Have these 8 positive seeds: 119 582 1006 1031 1363 1470 1478 1495

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,843046 (regressionFit = 182,843045, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,843046): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843158 (regressionFit = 182,843156, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,840080 (regressionFit = 182,840078, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,840080): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843047 (regressionFit = 182,843045, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,840081 (regressionFit = 182,840078, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,841647 (regressionFit = 182,841644, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,840081 (regressionFit = 182,840078, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,840081 (regressionFit = 182,840078, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,840081 (regressionFit = 182,840078, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843048 (regressionFit = 182,843045, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843048 (regressionFit = 182,843045, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843159 (regressionFit = 182,843156, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843160 (regressionFit = 182,843156, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,842565 (regressionFit = 182,842562, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,843160 (regressionFit = 182,843156, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09992257669078887 to score=0.0025 #egs=225.0
Comparing variance: 0.09789835041194757 to score=0.0025 #egs=1638.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 225,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099923)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,099923) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.638,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,097898)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,097898) into the LAST position (#2) in the search queue.

% Time for loop #1: 226 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 225 positive examples, of which 225 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]'
%     Score = -182,840080 (regressionFit = 182,840078, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 40 41 61 83 109 112 124 128 142
%     Score = -22,452586 (regressionFit = 22,452583, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/225,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,452586): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -22,350575 (regressionFit = 22,350572, penalties=3.0400000000000005E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,350575): hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -22,473881 (regressionFit = 22,473878, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/225,0 pos, 0,0/0,0 neg]
%     Score = -22,458956 (regressionFit = 22,458953, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/225,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]
Comparing variance: 1.4056919620530905E-6 to score=0.0025 #egs=24.0
Comparing variance: 0.11119670845910337 to score=0.0025 #egs=201.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 201,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,111197)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/225,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,111197) into position #1 in the search queue (new size=2).

% Time for loop #2: 22 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _), link(B, A).  [covers 24,0/225,0 pos, 0,0/0,0 neg]
% This clause covers 24 positive examples, of which 24 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/201,0 pos, 0,0/0,0 neg]'
%     Score = -182,840080 (regressionFit = 182,840078, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 201,0/201,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 30 34 64 80 86 103 106 138 165 186
%     Score = -22,318861 (regressionFit = 22,318858, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,318861): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 201,0/201,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 201,0/201,0 pos, 0,0/0,0 neg]
%     Score = -22,350109 (regressionFit = 22,350107, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 15,0/201,0 pos, 0,0/0,0 neg]
%     Score = -22,346727 (regressionFit = 22,346724, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 69,0/201,0 pos, 0,0/0,0 neg]
%     Score = -22,350172 (regressionFit = 22,350169, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 55,0/201,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 201,0/201,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 201,0/201,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,111.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1103908850852664 to score=0.0025 #egs=78.0
Comparing variance: 0.11145015669257469 to score=0.0025 #egs=123.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 123,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,111450)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 201,0/201,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,111450) into position #1 in the search queue (new size=2).

% Time for loop #3: 18 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 78,0/201,0 pos, 0,0/0,0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, B), link(B, _).  [covers 201,0/123,0 pos, 0,0/0,0 neg]'
%     Score = -182,840080 (regressionFit = 182,840078, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 123,0/123,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 4 35 43 55 60 82 109 118
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 123,0/123,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 123,0/123,0 pos, 0,0/0,0 neg]
%     Score = -13,613457 (regressionFit = 13,613454, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 8,0/123,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,613457): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 8,0/123,0 pos, 0,0/0,0 neg]
%     Score = -13,562688 (regressionFit = 13,562685, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,562688): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]
%     Score = -13,700060 (regressionFit = 13,700057, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 31,0/123,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 123,0/123,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 123,0/123,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,111.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]
Comparing variance: 0.15944044927748502 to score=0.0025 #egs=35.0
Comparing variance: 0.09070759995130268 to score=0.0025 #egs=88.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 88,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,090708)
%         ILP node to extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 123,0/123,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,090708) into the LAST position (#2) in the search queue.

% Time for loop #4: 10 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 35,0/123,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 162 260 338 394 511 1146 1204 1235 1268 1431

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.638,0/1.638,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.638,0/1.638,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -160,357145 (regressionFit = 160,357143, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -160,357145): hasCat(A, _) :- link(A, _).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,353799 (regressionFit = 160,353797, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -160,353799): hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,353800 (regressionFit = 160,353797, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,353801 (regressionFit = 160,353797, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,356462 (regressionFit = 160,356459, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 383,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,353801 (regressionFit = 160,353797, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,357145 (regressionFit = 160,357143, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]
%     Score = -160,357146 (regressionFit = 160,357143, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 452,0/1.638,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,098.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10136068230835456 to score=0.0025 #egs=728.0
Comparing variance: 0.09512441838896929 to score=0.0025 #egs=910.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 728,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,101361)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,101361) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 910,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,095124)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,095124) into position #2 in the search queue (new size=3).

% Time for loop #5: 133 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 728,0/1.638,0 pos, 0,0/0,0 neg]
% This clause covers 728 positive examples, of which 728 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]'
%     Score = -160,353799 (regressionFit = 160,353797, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 19 20 55 104 108 407 545 674 692
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784609 (regressionFit = 73,784607, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,784609): hasCat(A, _) :- link(B, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,771593 (regressionFit = 73,771590, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,771593): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,709153 (regressionFit = 73,709150, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,709153): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,771593 (regressionFit = 73,771590, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,790534 (regressionFit = 73,790531, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 383,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,771593 (regressionFit = 73,771590, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,771593 (regressionFit = 73,771590, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 92,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]
%     Score = -73,784610 (regressionFit = 73,784607, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 235,0/728,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,101.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13141801163374087 to score=0.0025 #egs=95.0
Comparing variance: 0.09672107314147535 to score=0.0025 #egs=633.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 633,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096721)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 728,0/728,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,096721) into position #1 in the search queue (new size=3).

% Time for loop #6: 212 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 95,0/728,0 pos, 0,0/0,0 neg]
% This clause covers 95 positive examples, of which 95 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 728,0/633,0 pos, 0,0/0,0 neg]'
%     Score = -160,353799 (regressionFit = 160,353797, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 32 117 213 238 244 266 273 424 497 541
%     Score = -61,186484 (regressionFit = 61,186482, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,186484): hasCat(A, _) :- link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,142200 (regressionFit = 61,142198, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,142200): hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,147507 (regressionFit = 61,147504, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,224433 (regressionFit = 61,224430, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,142201 (regressionFit = 61,142198, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(B, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, _), link(_, A).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,147507 (regressionFit = 61,147504, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(A, _), link(_, B).  [covers 30,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(A, B), link(_, B).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,224433 (regressionFit = 61,224430, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,212399 (regressionFit = 61,212395, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 305,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,142201 (regressionFit = 61,142198, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,186485 (regressionFit = 61,186482, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 106,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,224433 (regressionFit = 61,224430, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,224433 (regressionFit = 61,224430, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 40,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,142201 (regressionFit = 61,142198, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%     Score = -61,142201 (regressionFit = 61,142198, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07158829846923544 to score=0.0025 #egs=140.0
Comparing variance: 0.10369135038003582 to score=0.0025 #egs=493.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,071588)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,071588) into the LAST position (#3) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 493,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,103691)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 633,0/633,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,103691) into position #1 in the search queue (new size=4).

% Time for loop #7: 157 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 140,0/633,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 633,0/493,0 pos, 0,0/0,0 neg]'
%     Score = -160,353799 (regressionFit = 160,353797, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 493,0/493,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 48 177 196 197 319 387 400 482
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -51,116695 (regressionFit = 51,116692, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -51,116695): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 493,0/493,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,104.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09814873717184064 to score=0.0025 #egs=208.0
Comparing variance: 0.10772545398584199 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #8: 68 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 208,0/493,0 pos, 0,0/0,0 neg]
% This clause covers 208 positive examples, of which 208 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon24259, Anon25581), link(Anon25581, Anon25601))
Created a leaf under (hasCat(A, B) :- link(Anon24259, A))
Created a leaf under (hasCat(A, B) :- link(Anon23259, Anon24039))
Created a leaf under (hasCat(A, B) :- link(Anon24981, Anon24259))

%%%%%  WILL-Produced Tree #7 @ 19:17:31 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(C, D) )
%   then if ( link(C, A) )
%   | then return 0.23705618833188882;  // std dev = 0,006, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( link(A, D) )
%   | | then return 0.1743544120734732;  // std dev = 2,934, 78,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=68 */
%   | | else if ( link(D, E) )
%   | | | then return 0.09402072496114336;  // std dev = 2,362, 35,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | else return 0.1702960818041161;  // std dev = 0,301, 88,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=79 */
%   else if ( link(F, A) )
%   | then if ( link(G, F), link(H, G) )
%   | | then return 0.14192737475443953;  // std dev = 3,533, 95,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=80 */
%   | | else if ( link(I, F) )
%   | | | then return 0.19471376265223725;  // std dev = 0,268, 140,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=129 */
%   | | | else if ( link(F, J), link(J, K) )
%   | | | | then return 0.17020600080208512;  // std dev = 4,518, 208,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=185 */
%   | | | | else return 0.1650925746530566;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | else return 0.17225184143785557;  // std dev = 0,308, 910,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=813 */


% Clauses:

hasCat(A, B, 0.23705618833188882) :- 
     link(A, C), 
     link(C, D), 
     link(C, A), 
     !. // Clause #1.

hasCat(A, B, 0.1743544120734732) :- 
     link(A, C), 
     link(C, D), 
     link(A, D), 
     !. // Clause #2.

hasCat(A, B, 0.09402072496114336) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #3.

hasCat(A, B, 0.1702960818041161) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.14192737475443953) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.19471376265223725) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.17020600080208512) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.1650925746530566) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.17225184143785557) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.23705618833188882) :-  /* #pos=24 */ 
   link(a, uniqueVar60),
   link(uniqueVar60, underscore),
   link(uniqueVar60, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.1743544120734732) :-  /* #neg=10 #pos=68 */ 
   link(a, uniqueVar61),
   link(uniqueVar61, uniqueVar62),
   link(a, uniqueVar62),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.09402072496114336) :-  /* #neg=7 #pos=28 */ 
   link(a, uniqueVar63),
   link(uniqueVar63, uniqueVar64),
   link(uniqueVar64, underscore),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.1702960818041161) :-  /* #neg=9 #pos=79 */ 
   link(a, uniqueVar65),
   link(uniqueVar65, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.14192737475443953) :-  /* #neg=15 #pos=80 */ 
   link(uniqueVar66, a),
   link(uniqueVar67, uniqueVar66),
   link(underscore, uniqueVar67),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.19471376265223725) :-  /* #neg=11 #pos=129 */ 
   link(uniqueVar68, a),
   link(underscore, uniqueVar68),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.17020600080208512) :-  /* #neg=23 #pos=185 */ 
   link(uniqueVar69, a),
   link(uniqueVar69, uniqueVar70),
   link(uniqueVar70, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.1650925746530566) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.17225184143785557) :-  /* #neg=97 #pos=813 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar66, a)
%   link(a, uniqueVar63)
%   link(a, uniqueVar65)
%   link(uniqueVar69, uniqueVar70)
%   link(uniqueVar69, a)
%   link(underscore, uniqueVar68)
%   link(uniqueVar61, uniqueVar62)
%   link(underscore, uniqueVar67)
%   link(uniqueVar68, a)
%   link(uniqueVar63, uniqueVar64)
%   link(uniqueVar60, a)
%   link(uniqueVar60, underscore)
%   link(uniqueVar67, uniqueVar66)
%   link(uniqueVar70, underscore)
%   link(a, uniqueVar60)
%   link(uniqueVar65, underscore)
%   link(underscore, a)
%   link(a, uniqueVar61)
%   link(a, uniqueVar62)
%   link(uniqueVar64, underscore)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 7 trees is 20,762 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10369135038003582
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:166 milliseconds
No hidden examples for : hasCat
Time to build dataset: 171 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09808667125246397
Set score:0.0025

% Have these 7 positive seeds: 249 550 656 747 1289 1650 1851

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,735331 (regressionFit = 182,735330, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,735331): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735332 (regressionFit = 182,735330, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735332 (regressionFit = 182,735330, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,735333 (regressionFit = 182,735330, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09853909931676413 to score=0.0025 #egs=677.0
Comparing variance: 0.09782829629851753 to score=0.0025 #egs=1186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 677,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,098539)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,098539) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.186,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,097828)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,097828) into the LAST position (#2) in the search queue.

% Time for loop #1: 170 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 677 positive examples, of which 677 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]'
%     Score = -182,735331 (regressionFit = 182,735330, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 50 82 154 167 278 374 439 550 557 606
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709284 (regressionFit = 66,709281, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,709284): hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658244 (regressionFit = 66,658242, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,658244): hasCat(A, _) :- link(A, _), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658245 (regressionFit = 66,658242, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,701755 (regressionFit = 66,701752, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 79,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,644969 (regressionFit = 66,644966, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,644969): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658245 (regressionFit = 66,658242, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658245 (regressionFit = 66,658242, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,678360 (regressionFit = 66,678357, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,703765 (regressionFit = 66,703762, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,705842 (regressionFit = 66,705839, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,701755 (regressionFit = 66,701752, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 79,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709284 (regressionFit = 66,709281, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,703765 (regressionFit = 66,703762, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,703765 (regressionFit = 66,703762, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658245 (regressionFit = 66,658242, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,703765 (regressionFit = 66,703762, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,709285 (regressionFit = 66,709281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,644969 (regressionFit = 66,644966, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,658245 (regressionFit = 66,658242, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 200,0/677,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%     Score = -66,710141 (regressionFit = 66,710138, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/677,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
Comparing variance: 0.058535252033482824 to score=0.0025 #egs=94.0
Comparing variance: 0.10487590466367766 to score=0.0025 #egs=583.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 583,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,104876)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 677,0/677,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,104876) into position #1 in the search queue (new size=2).

% Time for loop #2: 402 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 94,0/677,0 pos, 0,0/0,0 neg]
% This clause covers 94 positive examples, of which 94 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 677,0/583,0 pos, 0,0/0,0 neg]'
%     Score = -182,735331 (regressionFit = 182,735330, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 31 33 59 86 172 218 251 352 375
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135238 (regressionFit = 61,135235, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,135238): hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134622 (regressionFit = 61,134620, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -61,134622): hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,141079 (regressionFit = 61,141076, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 40,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134623 (regressionFit = 61,134620, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134623 (regressionFit = 61,134620, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134623 (regressionFit = 61,134620, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134873 (regressionFit = 61,134870, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 37,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135239 (regressionFit = 61,135235, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,141079 (regressionFit = 61,141076, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 40,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135239 (regressionFit = 61,135235, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135239 (regressionFit = 61,135235, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135239 (regressionFit = 61,135235, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134623 (regressionFit = 61,134620, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,135239 (regressionFit = 61,135235, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,134623 (regressionFit = 61,134620, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%     Score = -61,136461 (regressionFit = 61,136458, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 251,0/583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,105.
% Will extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0846778525003273 to score=0.0025 #egs=106.0
Comparing variance: 0.1093475215388389 to score=0.0025 #egs=477.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 106,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,084678)
%         ILP node to extend: hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,084678) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 477,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,109348)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 583,0/583,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,109348) into position #1 in the search queue (new size=3).

% Time for loop #3: 338 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, _), link(_, A).  [covers 106,0/583,0 pos, 0,0/0,0 neg]
% This clause covers 106 positive examples, of which 106 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 583,0/477,0 pos, 0,0/0,0 neg]'
%     Score = -182,735331 (regressionFit = 182,735330, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 53 86 107 152 164 166 177 188 224
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156576 (regressionFit = 52,156574, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,156576): hasCat(A, _) :- link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,158549 (regressionFit = 52,158546, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,147034 (regressionFit = 52,147031, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,147034): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 56,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,158549 (regressionFit = 52,158546, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,158549 (regressionFit = 52,158546, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,158549 (regressionFit = 52,158546, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 54,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,156577 (regressionFit = 52,156574, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 146,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%     Score = -52,135821 (regressionFit = 52,135818, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -52,135821): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,109.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12819094046321464 to score=0.0025 #egs=145.0
Comparing variance: 0.10104858884122198 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,101049)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 477,0/477,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,101049) into position #1 in the search queue (new size=3).

% Time for loop #4: 231 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 145,0/477,0 pos, 0,0/0,0 neg]
% This clause covers 145 positive examples, of which 145 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 477,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -182,735331 (regressionFit = 182,735330, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 51 90 103 108 134 136 171 175 193 224
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -182,7353):
%  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
Created a leaf under (hasCat(A, B) :- link(Anon27423, Anon25921), link(Anon27749, Anon27423))

% Have these 10 positive seeds: 21 32 74 124 368 480 559 969 1130 1152

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -115,996283 (regressionFit = 115,996282, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -115,996283): hasCat(A, _) :- link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996284 (regressionFit = 115,996282, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996284 (regressionFit = 115,996282, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021054 (regressionFit = 116,021052, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996528 (regressionFit = 115,996525, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 262,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,996285 (regressionFit = 115,996282, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 607,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -116,021055 (regressionFit = 116,021052, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 190,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -115,966903 (regressionFit = 115,966900, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -115,966903): hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,098.
% Will extend: hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1343258077981397 to score=0.0025 #egs=80.0
Comparing variance: 0.0951363793735758 to score=0.0025 #egs=1106.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.106,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,095136)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,095136) into position #1 in the search queue (new size=2).

% Time for loop #6: 312 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(C, B), link(_, C).  [covers 80,0/1.186,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 45 64 147 190 261 280 298 429 508 768

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.106,0/1.106,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,209085 (regressionFit = 105,209084, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,209085): hasCat(A, _) :- link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209086 (regressionFit = 105,209084, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209086 (regressionFit = 105,209084, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207764 (regressionFit = 105,207761, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,207764): hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207765 (regressionFit = 105,207761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207764 (regressionFit = 105,207761, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207765 (regressionFit = 105,207761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,218022 (regressionFit = 105,218019, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 199,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207765 (regressionFit = 105,207761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,209087 (regressionFit = 105,209084, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 527,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207765 (regressionFit = 105,207761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%     Score = -105,207765 (regressionFit = 105,207761, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,095.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08210716066546789 to score=0.0025 #egs=110.0
Comparing variance: 0.09656222264373958 to score=0.0025 #egs=996.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,082107)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,082107) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 996,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,096562)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,096562) into position #1 in the search queue (new size=3).

% Time for loop #7: 270 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 110,0/1.106,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 213 249 261 454 643 659 685 764 847 872

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,150967 (regressionFit = 96,150966, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,150967): hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150968 (regressionFit = 96,150966, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150968 (regressionFit = 96,150966, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,170403 (regressionFit = 96,170400, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150969 (regressionFit = 96,150966, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734380018378309 to score=0.0025 #egs=417.0
Comparing variance: 0.08875406051169184 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107344) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,088754) into position #2 in the search queue (new size=4).

% Time for loop #8: 196 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]'
%     Score = -96,150967 (regressionFit = 96,150966, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% Have these 2 positive seeds: 318 328
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%     Score = -44,762363 (regressionFit = 44,762360, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,762363): hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10651974288337886 to score=0.0025 #egs=132.0
Comparing variance: 0.1077254539858409 to score=0.0025 #egs=285.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 285,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107725)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/417,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107725) into position #1 in the search queue (new size=4).

% Time for loop #9: 167 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 132,0/417,0 pos, 0,0/0,0 neg]
% This clause covers 132 positive examples, of which 132 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon28953, Anon29199), link(Anon29199, Anon29219))
Created a leaf under (hasCat(A, B) :- link(Anon28953, A))
Created a leaf under (hasCat(A, B) :- link(Anon26865, A))
Created a leaf under (hasCat(A, B) :- link(Anon28547, A), link(Anon28569, Anon28547))

%%%%%  WILL-Produced Tree #8 @ 19:17:34 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C) )
%   then if ( link(D, A), link(D, C) )
%   | then return 0.16159204181364645;  // std dev = 2,346, 94,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=88 */
%   | else if ( link(E, A) )
%   | | then return 0.1409110010707729;  // std dev = 0,291, 106,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=96 */
%   | | else if ( link(F, C), link(G, F) )
%   | | | then return 0.12079149261599192;  // std dev = 4,311, 145,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=123 */
%   | | | else return 0.13587132988030431;  // std dev = 0,318, 332,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=294 */
%   else if ( link(H, A), link(I, H), link(J, I) )
%   | then return 0.11168922221500029;  // std dev = 3,278, 80,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=67 */
%   | else if ( link(K, A), link(L, K) )
%   | | then return 0.14978732645172127;  // std dev = 0,287, 110,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   | | else if ( link(M, A) )
%   | | | then if ( link(M, N), link(N, P) )
%   | | | | then return 0.13224648547995665;  // std dev = 3,750, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | | else return 0.13246302254570896;  // std dev = 0,328, 285,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=250 */
%   | | | else return 0.14255140213308354;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.16159204181364645) :- 
     link(A, C), 
     link(D, A), 
     link(D, C), 
     !. // Clause #1.

hasCat(A, B, 0.1409110010707729) :- 
     link(A, C), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.12079149261599192) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #3.

hasCat(A, B, 0.13587132988030431) :- 
     link(A, C), 
     !. // Clause #4.

hasCat(A, B, 0.11168922221500029) :- 
     link(C, A), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.14978732645172127) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #6.

hasCat(A, B, 0.13224648547995665) :- 
     link(C, A), 
     link(C, D), 
     link(D, E), 
     !. // Clause #7.

hasCat(A, B, 0.13246302254570896) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.14255140213308354) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.16159204181364645) :-  /* #neg=6 #pos=88 */ 
   link(a, uniqueVar71),
   link(uniqueVar72, a),
   link(uniqueVar72, uniqueVar71),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.1409110010707729) :-  /* #neg=10 #pos=96 */ 
   link(a, underscore),
   link(underscore, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.12079149261599192) :-  /* #neg=22 #pos=123 */ 
   link(a, uniqueVar73),
   link(uniqueVar74, uniqueVar73),
   link(underscore, uniqueVar74),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.13587132988030431) :-  /* #neg=38 #pos=294 */ 
   link(a, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.11168922221500029) :-  /* #neg=13 #pos=67 */ 
   link(uniqueVar75, a),
   link(uniqueVar76, uniqueVar75),
   link(underscore, uniqueVar76),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.14978732645172127) :-  /* #neg=10 #pos=100 */ 
   link(uniqueVar77, a),
   link(underscore, uniqueVar77),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.13224648547995665) :-  /* #neg=16 #pos=116 */ 
   link(uniqueVar78, a),
   link(uniqueVar78, uniqueVar79),
   link(uniqueVar79, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.13246302254570896) :-  /* #neg=35 #pos=250 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.14255140213308354) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(a, underscore)
%   link(a, uniqueVar71)
%   link(underscore, uniqueVar76)
%   link(a, uniqueVar73)
%   link(underscore, uniqueVar77)
%   link(uniqueVar79, underscore)
%   link(uniqueVar76, uniqueVar75)
%   link(uniqueVar78, a)
%   link(uniqueVar72, uniqueVar71)
%   link(uniqueVar72, a)
%   link(uniqueVar77, a)
%   link(uniqueVar78, uniqueVar79)
%   link(underscore, a)
%   link(uniqueVar74, uniqueVar73)
%   link(underscore, uniqueVar74)
%   link(uniqueVar75, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 8 trees is 23,163 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10734380018378309
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:465 milliseconds
No hidden examples for : hasCat
Time to build dataset: 476 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09808335653956353
Set score:0.0025

% Have these 10 positive seeds: 0 68 159 318 559 592 682 913 1125 1330

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,729195 (regressionFit = 182,729194, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,729195): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729284 (regressionFit = 182,729282, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729196 (regressionFit = 182,729194, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729034 (regressionFit = 182,729031, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,729034): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729285 (regressionFit = 182,729282, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729285 (regressionFit = 182,729282, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726069 (regressionFit = 182,726067, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,726069): hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,713923 (regressionFit = 182,713920, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,713923): hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729286 (regressionFit = 182,729282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,713923 (regressionFit = 182,713920, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,713923): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729137 (regressionFit = 182,729134, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729286 (regressionFit = 182,729282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729285 (regressionFit = 182,729282, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,713923 (regressionFit = 182,713920, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729286 (regressionFit = 182,729282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,713923 (regressionFit = 182,713920, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729286 (regressionFit = 182,729282, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729286 (regressionFit = 182,729282, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726070 (regressionFit = 182,726067, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11674272388256945 to score=0.0025 #egs=108.0
Comparing variance: 0.09692632808112571 to score=0.0025 #egs=1755.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.755,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,096926)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,096926) into the LAST position (#1) in the search queue.

% Time for loop #1: 606 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 108,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 108 positive examples, of which 108 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 140 141 148 157 324 386 410 579 794 802

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.755,0/1.755,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.755,0/1.755,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -170,100418 (regressionFit = 170,100416, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,100418): hasCat(A, _) :- link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104600 (regressionFit = 170,104599, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101834 (regressionFit = 170,101832, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089902 (regressionFit = 170,089900, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,089902): hasCat(A, _) :- link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100418 (regressionFit = 170,100416, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,084134 (regressionFit = 170,084132, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 71,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,084134): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 71,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,097900 (regressionFit = 170,097897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 56,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,084134 (regressionFit = 170,084132, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 71,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,084134): hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 71,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,103498 (regressionFit = 170,103495, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 313,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100420 (regressionFit = 170,100416, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100419 (regressionFit = 170,100416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 645,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,105700 (regressionFit = 170,105697, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 84,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,101835 (regressionFit = 170,101832, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 209,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104601 (regressionFit = 170,104599, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104601 (regressionFit = 170,104599, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079576 (regressionFit = 170,079573, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -170,079576): hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,097900 (regressionFit = 170,097897, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 56,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079577 (regressionFit = 170,079573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079577 (regressionFit = 170,079573, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,084134 (regressionFit = 170,084132, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 71,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,100325 (regressionFit = 170,100322, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 354,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079577 (regressionFit = 170,079573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,089903 (regressionFit = 170,089900, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 168,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,104602 (regressionFit = 170,104599, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 699,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079577 (regressionFit = 170,079573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%     Score = -170,079577 (regressionFit = 170,079573, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,097.
% Will extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07429610202483536 to score=0.0025 #egs=170.0
Comparing variance: 0.09933705749013094 to score=0.0025 #egs=1585.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,074296)
%         ILP node to extend: hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,074296) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.585,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,099337)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,099337) into position #1 in the search queue (new size=2).

% Time for loop #2: 689 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(_, B).  [covers 170,0/1.755,0 pos, 0,0/0,0 neg]
% This clause covers 170 positive examples, of which 170 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 38 238 291 298 350 439 785 941 948 1014

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.585,0/1.585,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -157,444127 (regressionFit = 157,444126, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,444127): hasCat(A, _) :- link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,448030 (regressionFit = 157,448029, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444128 (regressionFit = 157,444126, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446275 (regressionFit = 157,446273, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,438837 (regressionFit = 157,438835, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,438837): hasCat(A, _) :- link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444128 (regressionFit = 157,444126, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,443349 (regressionFit = 157,443346, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 36,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,425957 (regressionFit = 157,425954, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,425957): hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,438838 (regressionFit = 157,438835, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446276 (regressionFit = 157,446273, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,425957 (regressionFit = 157,425954, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -157,425957): hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,438838 (regressionFit = 157,438835, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,443824 (regressionFit = 157,443821, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 257,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446276 (regressionFit = 157,446273, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446276 (regressionFit = 157,446273, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,438838 (regressionFit = 157,438835, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,444129 (regressionFit = 157,444126, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 589,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,443349 (regressionFit = 157,443346, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 36,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446276 (regressionFit = 157,446273, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,446276 (regressionFit = 157,446273, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 182,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,448031 (regressionFit = 157,448029, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,425957 (regressionFit = 157,425954, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,438838 (regressionFit = 157,438835, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 112,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,448032 (regressionFit = 157,448029, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,448031 (regressionFit = 157,448028, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 244,0/1.585,0 pos, 0,0/0,0 neg]
%     Score = -157,448032 (regressionFit = 157,448029, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 529,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06485044768582994 to score=0.0025 #egs=43.0
Comparing variance: 0.10028364789589493 to score=0.0025 #egs=1542.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.542,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,100284)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,100284) into position #1 in the search queue (new size=2).

% Time for loop #3: 451 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 43,0/1.585,0 pos, 0,0/0,0 neg]
% This clause covers 43 positive examples, of which 43 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 238 501 807 1075 1161 1247 1367 1417 1514

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.542,0/1.542,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -154,625900 (regressionFit = 154,625898, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -154,625900): hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,632086 (regressionFit = 154,632085, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 486,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625901 (regressionFit = 154,625898, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625901 (regressionFit = 154,625898, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625902 (regressionFit = 154,625898, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625901 (regressionFit = 154,625898, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625902 (regressionFit = 154,625898, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625902 (regressionFit = 154,625898, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625902 (regressionFit = 154,625898, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%     Score = -154,625902 (regressionFit = 154,625898, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,100.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10705807151464851 to score=0.0025 #egs=546.0
Comparing variance: 0.09655842507052466 to score=0.0025 #egs=996.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 546,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,107058)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,107058) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 996,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,096558)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,096558) into position #2 in the search queue (new size=3).

% Time for loop #4: 287 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 546,0/1.542,0 pos, 0,0/0,0 neg]
% This clause covers 546 positive examples, of which 546 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]'
%     Score = -154,625900 (regressionFit = 154,625898, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 13 14 75 99 166 178 243 244 267 315
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452717 (regressionFit = 58,452715, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,452717): hasCat(A, _) :- link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451653 (regressionFit = 58,451650, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,451653): hasCat(A, _) :- link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451654 (regressionFit = 58,451650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451654 (regressionFit = 58,451650, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451654 (regressionFit = 58,451650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453292 (regressionFit = 58,453289, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453710 (regressionFit = 58,453707, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 14,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,443602 (regressionFit = 58,443599, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,443602): hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453292 (regressionFit = 58,453289, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453292 (regressionFit = 58,453289, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451654 (regressionFit = 58,451650, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453292 (regressionFit = 58,453289, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 64,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,453710 (regressionFit = 58,453707, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 14,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,452718 (regressionFit = 58,452715, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 167,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,451654 (regressionFit = 58,451650, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 69,0/546,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%     Score = -58,443706 (regressionFit = 58,443703, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 214,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13202523908719832 to score=0.0025 #egs=57.0
Comparing variance: 0.10412711797385854 to score=0.0025 #egs=489.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 489,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,104127)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 546,0/546,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,104127) into position #1 in the search queue (new size=3).

% Time for loop #5: 248 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 57,0/546,0 pos, 0,0/0,0 neg]
% This clause covers 57 positive examples, of which 57 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 546,0/489,0 pos, 0,0/0,0 neg]'
%     Score = -154,625900 (regressionFit = 154,625898, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 0 79 135 162 197 230 309 378 462
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%     Score = -50,909631 (regressionFit = 50,909628, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,909631): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,104.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]
Comparing variance: 0.11301127484530182 to score=0.0025 #egs=176.0
Comparing variance: 0.09910429282376765 to score=0.0025 #egs=313.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 313,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,099104)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 489,0/489,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,099104) into position #1 in the search queue (new size=3).

% Time for loop #6: 175 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 176,0/489,0 pos, 0,0/0,0 neg]
% This clause covers 176 positive examples, of which 176 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 489,0/313,0 pos, 0,0/0,0 neg]'
%     Score = -154,625900 (regressionFit = 154,625898, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 10 20 78 165 193 197 277 282 295
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968450 (regressionFit = 30,968448, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -30,968450): hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968451 (regressionFit = 30,968448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968451 (regressionFit = 30,968448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968451 (regressionFit = 30,968448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968451 (regressionFit = 30,968448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -30,968451 (regressionFit = 30,968448, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 313,0/313,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 313,0/313,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 116 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 35,0/313,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 36 76 104 107 335 355 440 442 508 561

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 996,0/996,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -96,150963 (regressionFit = 96,150962, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -96,150963): hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150964 (regressionFit = 96,150962, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150965 (regressionFit = 96,150962, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%     Score = -96,150965 (regressionFit = 96,150962, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,097.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10734379078355759 to score=0.0025 #egs=417.0
Comparing variance: 0.08875406051169106 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 417,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,107344)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,107344) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into position #2 in the search queue (new size=3).

% Time for loop #8: 118 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 417,0/996,0 pos, 0,0/0,0 neg]
% This clause covers 417 positive examples, of which 417 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon33309, A))
Created a leaf under (hasCat(A, B) :- link(Anon33309, A))
Created a leaf under (hasCat(A, B) :- link(Anon30125, A), link(Anon30679, Anon30125))

%%%%%  WILL-Produced Tree #9 @ 19:17:37 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(C, A), link(C, D), link(D, A) )
%   then return 0.10111814706689512;  // std dev = 3,551, 108,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=93 */
%   else if ( link(E, A), link(F, E) )
%   | then return 0.1251932010890381;  // std dev = 0,273, 170,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=156 */
%   | else if ( link(A, G), link(H, G), link(H, A) )
%   | | then return 0.13509787659097955;  // std dev = 1,670, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( link(A, I) )
%   | | | then if ( link(I, J), link(J, K) )
%   | | | | then return 0.09521835384948436;  // std dev = 2,743, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   | | | | else if ( link(L, I), link(M, L) )
%   | | | | | then return 0.10371893636744628;  // std dev = 4,460, 176,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=153 */
%   | | | | | else if ( link(I, N) )
%   | | | | | | then return 0.14846586736095452;  // std dev = 1,373, 35,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | | | | else return 0.1078840140129473;  // std dev = 5,393, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | else if ( link(P, A) )
%   | | | | then return 0.10808748217582666;  // std dev = 0,328, 417,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=366 */
%   | | | | else return 0.11744569747779497;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.10111814706689512) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #1.

hasCat(A, B, 0.1251932010890381) :- 
     link(C, A), 
     link(D, C), 
     !. // Clause #2.

hasCat(A, B, 0.13509787659097955) :- 
     link(A, C), 
     link(D, C), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.09521835384948436) :- 
     link(A, C), 
     link(C, D), 
     link(D, E), 
     !. // Clause #4.

hasCat(A, B, 0.10371893636744628) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.14846586736095452) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #6.

hasCat(A, B, 0.1078840140129473) :- 
     link(A, C), 
     !. // Clause #7.

hasCat(A, B, 0.10808748217582666) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.11744569747779497) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.10111814706689512) :-  /* #neg=15 #pos=93 */ 
   link(uniqueVar80, a),
   link(uniqueVar80, uniqueVar81),
   link(uniqueVar81, a),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.1251932010890381) :-  /* #neg=14 #pos=156 */ 
   link(uniqueVar82, a),
   link(underscore, uniqueVar82),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.13509787659097955) :-  /* #neg=3 #pos=40 */ 
   link(a, uniqueVar83),
   link(uniqueVar84, uniqueVar83),
   link(uniqueVar84, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.09521835384948436) :-  /* #neg=9 #pos=48 */ 
   link(a, uniqueVar85),
   link(uniqueVar85, uniqueVar86),
   link(uniqueVar86, underscore),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.10371893636744628) :-  /* #neg=23 #pos=153 */ 
   link(a, uniqueVar87),
   link(uniqueVar88, uniqueVar87),
   link(underscore, uniqueVar88),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.14846586736095452) :-  /* #neg=2 #pos=33 */ 
   link(a, uniqueVar89),
   link(uniqueVar89, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.1078840140129473) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.10808748217582666) :-  /* #neg=51 #pos=366 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.11744569747779497) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(uniqueVar80, uniqueVar81)
%   link(uniqueVar84, a)
%   link(uniqueVar81, a)
%   link(uniqueVar84, uniqueVar83)
%   link(underscore, uniqueVar82)
%   link(uniqueVar89, underscore)
%   link(a, uniqueVar85)
%   link(a, uniqueVar83)
%   link(a, underscore)
%   link(a, uniqueVar89)
%   link(uniqueVar88, uniqueVar87)
%   link(uniqueVar82, a)
%   link(uniqueVar80, a)
%   link(uniqueVar86, underscore)
%   link(underscore, a)
%   link(uniqueVar85, uniqueVar86)
%   link(a, uniqueVar87)
%   link(underscore, uniqueVar88)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Time taken to learn 9 trees is 26,360 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09655842507052466
Set score:0.0025
% Kept 1.656 of the 1.656 positive examples.
% Kept 207 of the 207 negative examples.
% Dataset size: 1.863
Computing probabilities
prob time:543 milliseconds
No hidden examples for : hasCat
Time to build dataset: 554 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09808330337345594
Set score:0.0025

% Have these 10 positive seeds: 49 441 475 599 1007 1008 1032 1246 1339 1449

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.863,0/1.863,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -182,729195 (regressionFit = 182,729194, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,729195): hasCat(A, _) :- link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729192 (regressionFit = 182,729191, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,729192): hasCat(A, _) :- link(_, A).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729193 (regressionFit = 182,729191, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726305 (regressionFit = 182,726303, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,726305): hasCat(A, _) :- link(B, A), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729194 (regressionFit = 182,729191, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728842 (regressionFit = 182,728839, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 462,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,726306 (regressionFit = 182,726303, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 278,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729194 (regressionFit = 182,729191, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 807,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729196 (regressionFit = 182,729194, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728034 (regressionFit = 182,728032, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729196 (regressionFit = 182,729194, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,722056 (regressionFit = 182,722053, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,722056): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,664900 (regressionFit = 182,664897, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,664900): hasCat(A, _) :- link(A, B), link(B, C), link(C, B).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,723005 (regressionFit = 182,723002, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(C, _).  [covers 93,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,722056 (regressionFit = 182,722053, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,664900 (regressionFit = 182,664897, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -182,664900): hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728433 (regressionFit = 182,728430, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 345,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,722056 (regressionFit = 182,722053, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,722056 (regressionFit = 182,722053, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 88,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,728035 (regressionFit = 182,728032, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 225,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]
%     Score = -182,729197 (regressionFit = 182,729194, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 677,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
Comparing variance: 0.044312136773524975 to score=0.0025 #egs=39.0
Comparing variance: 0.09919776532793913 to score=0.0025 #egs=1824.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.824,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,099198)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,099198) into the LAST position (#1) in the search queue.

% Time for loop #1: 698 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(B, C).  [covers 39,0/1.863,0 pos, 0,0/0,0 neg]
% This clause covers 39 positive examples, of which 39 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 47 94 198 488 674 721 860 952 1385 1538

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.824,0/1.824,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -180,934282 (regressionFit = 180,934281, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -180,934282): hasCat(A, _) :- link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934894 (regressionFit = 180,934893, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934283 (regressionFit = 180,934281, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,915418 (regressionFit = 180,915416, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -180,915418): hasCat(A, _) :- link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928470 (regressionFit = 180,928468, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934283 (regressionFit = 180,934281, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,915419 (regressionFit = 180,915416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,936713 (regressionFit = 180,936710, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(_, B).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,915419 (regressionFit = 180,915416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,933954 (regressionFit = 180,933951, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 306,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,915419 (regressionFit = 180,915416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,915419 (regressionFit = 180,915416, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 186,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934284 (regressionFit = 180,934281, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 638,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934895 (regressionFit = 180,934893, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934895 (regressionFit = 180,934893, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935231 (regressionFit = 180,935229, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,908272 (regressionFit = 180,908269, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -180,908272): hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934352 (regressionFit = 180,934349, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 437,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,928471 (regressionFit = 180,928468, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 175,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,908272 (regressionFit = 180,908269, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(B, C).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,908272 (regressionFit = 180,908269, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, A), link(C, B).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,934896 (regressionFit = 180,934893, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 782,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,936713 (regressionFit = 180,936710, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(A, _).  [covers 63,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,908272 (regressionFit = 180,908269, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]
%     Score = -180,935232 (regressionFit = 180,935229, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 253,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,099.
% Will extend: hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
Comparing variance: 0.12691914648525818 to score=0.0025 #egs=99.0
Comparing variance: 0.09759030365571154 to score=0.0025 #egs=1725.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.725,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,097590)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,097590) into the LAST position (#1) in the search queue.

% Time for loop #2: 789 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      hasCat(A, _) :- link(B, A), link(B, C), link(C, A).  [covers 99,0/1.824,0 pos, 0,0/0,0 neg]
% This clause covers 99 positive examples, of which 99 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 95 128 192 230 325 373 494 587 898 951

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.725,0/1.725,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.725,0/1.725,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -168,333791 (regressionFit = 168,333790, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,333791): hasCat(A, _) :- link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343259 (regressionFit = 168,343258, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333792 (regressionFit = 168,333790, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340224 (regressionFit = 168,340222, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333792 (regressionFit = 168,333790, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333641 (regressionFit = 168,333638, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -168,333641): hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,334305 (regressionFit = 168,334302, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 283,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333793 (regressionFit = 168,333790, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 615,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333641 (regressionFit = 168,333638, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, A), link(C, B).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343260 (regressionFit = 168,343258, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343260 (regressionFit = 168,343258, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337297 (regressionFit = 168,337295, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(B, _).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(C, B), link(C, _).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, A).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, B), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,333641 (regressionFit = 168,333638, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(A, C).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(A, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,342616 (regressionFit = 168,342613, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(C, _).  [covers 338,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,340225 (regressionFit = 168,340222, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(A, _).  [covers 152,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,343261 (regressionFit = 168,343258, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 683,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]
%     Score = -168,337298 (regressionFit = 168,337295, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(_, B).  [covers 154,0/1.725,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,098.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06989546038651046 to score=0.0025 #egs=65.0
Comparing variance: 0.09866893568227633 to score=0.0025 #egs=1660.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.660,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,098669)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,098669) into the LAST position (#1) in the search queue.

% Time for loop #3: 585 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(C, A).  [covers 65,0/1.725,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 96 114 1059 1180

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.660,0/1.660,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.660,0/1.660,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -163,774027 (regressionFit = 163,774026, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -163,774027): hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,774028 (regressionFit = 163,774026, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,774029 (regressionFit = 163,774026, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%     Score = -163,774029 (regressionFit = 163,774026, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10638723272945869 to score=0.0025 #egs=550.0
Comparing variance: 0.094829772700007 to score=0.0025 #egs=1110.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 550,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106387)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106387) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.110,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,094830)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,094830) into the LAST position (#2) in the search queue.

% Time for loop #4: 127 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      hasCat(A, _) :- link(A, _).  [covers 550,0/1.660,0 pos, 0,0/0,0 neg]
% This clause covers 550 positive examples, of which 550 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]'
%     Score = -163,774027 (regressionFit = 163,774026, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 34 40 44 96 127 314 348 494 499
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507435 (regressionFit = 58,507433, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,507435): hasCat(A, _) :- link(A, B), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511724 (regressionFit = 58,511722, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,501337 (regressionFit = 58,501334, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,501337): hasCat(A, _) :- link(A, B), link(B, C), link(A, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511876 (regressionFit = 58,511873, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, A).  [covers 27,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511725 (regressionFit = 58,511722, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(_, A), link(A, _).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511876 (regressionFit = 58,511873, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(B, _).  [covers 27,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511725 (regressionFit = 58,511722, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(B, A), link(B, _).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511725 (regressionFit = 58,511722, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, A), link(_, B).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,501337 (regressionFit = 58,501334, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -58,501337): hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,501337 (regressionFit = 58,501334, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, C), link(C, B).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511725 (regressionFit = 58,511722, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(_, A).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,501337 (regressionFit = 58,501334, penalties=2.9400000000000002E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(A, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,507436 (regressionFit = 58,507433, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 159,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,511725 (regressionFit = 58,511722, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, A).  [covers 87,0/550,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%     Score = -58,502798 (regressionFit = 58,502795, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 218,0/550,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,106.
% Will extend: hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1323237989876438 to score=0.0025 #egs=57.0
Comparing variance: 0.10336486212872456 to score=0.0025 #egs=493.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 493,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,103365)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 550,0/550,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,103365) into position #1 in the search queue (new size=2).

% Time for loop #5: 244 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(A, C), link(B, C).  [covers 57,0/550,0 pos, 0,0/0,0 neg]
% This clause covers 57 positive examples, of which 57 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 550,0/493,0 pos, 0,0/0,0 neg]'
%     Score = -163,774027 (regressionFit = 163,774026, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 158 256 337 341 375 404 423 431 486
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,958479 (regressionFit = 50,958477, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,958479): hasCat(A, _) :- link(A, B), link(B, _).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,958480 (regressionFit = 50,958477, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,958480 (regressionFit = 50,958477, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,958480 (regressionFit = 50,958477, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,958480 (regressionFit = 50,958477, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 102,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%     Score = -50,955124 (regressionFit = 50,955121, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,955124): hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,103.
% Will extend: hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10816315517004794 to score=0.0025 #egs=161.0
Comparing variance: 0.10102666463066735 to score=0.0025 #egs=332.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 332,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,101027)
%         ILP node to extend: hasCat(A, _) :- link(A, _).  [covers 493,0/493,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,101027) into position #1 in the search queue (new size=2).

% Time for loop #6: 187 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(C, B), link(_, C).  [covers 161,0/493,0 pos, 0,0/0,0 neg]
% This clause covers 161 positive examples, of which 161 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'hasCat(A, _) :- link(A, _).  [covers 493,0/332,0 pos, 0,0/0,0 neg]'
%     Score = -163,774027 (regressionFit = 163,774026, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 12 44 57 94 142 194 218 219 236 278
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526330 (regressionFit = 33,526328, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,526330): hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(A, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, _), link(_, B).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(B, C), link(_, C).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, _), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(A, _), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, _), link(A, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(A, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -33,526331 (regressionFit = 33,526328, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(A, B), link(C, B), link(C, _).  [covers 332,0/332,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(A, B), link(_, B), link(_, B).  [covers 332,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,101.
% Will extend: hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 100 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      hasCat(A, _) :- link(A, B), link(B, _).  [covers 54,0/332,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 54 70 88 108 127 203 229 253 389 429

***** Warning: TODO: Should handle this case by altering the target in the 'must be constant' arguments.  Or maybe an '@' type was meant? *****


% target           = hasCat(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]
% Most-general root: hasCat(_, _).  [covers 1.110,0/1.110,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -105,252973 (regressionFit = 105,252971, penalties=1.23E-6) for clause:  hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -105,252973): hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252973 (regressionFit = 105,252971, penalties=2.1400000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=2.24E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, _), link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=3.0500000000000004E-6) for clause:  hasCat(A, _) :- link(B, A), link(B, C), link(_, C).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(B, A), link(_, A), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252974 (regressionFit = 105,252971, penalties=3.1500000000000003E-6) for clause:  hasCat(A, _) :- link(_, A), link(B, A), link(B, _).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%     Score = -105,252975 (regressionFit = 105,252971, penalties=3.2500000000000006E-6) for clause:  hasCat(A, _) :- link(_, A), link(_, A), link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% The best node found: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,095.
% Will extend: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1014394921088998 to score=0.0025 #egs=531.0
Comparing variance: 0.08875406051169109 to score=0.0025 #egs=579.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 531,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,101439)
%         ILP node to extend: hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,101439) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 579,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,088754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0,088754) into the LAST position (#2) in the search queue.

% Time for loop #8: 218 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      hasCat(A, _) :- link(_, A).  [covers 531,0/1.110,0 pos, 0,0/0,0 neg]
% This clause covers 531 positive examples, of which 531 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (hasCat(A, B) :- link(Anon37633, A))
Created a leaf under (hasCat(A, B) :- link(Anon37633, A))

%%%%%  WILL-Produced Tree #10 @ 19:17:40 10/21/22.  %%%%%


% FOR hasCat(A, B):
%   if ( link(A, C), link(D, C), link(C, D) )
%   then return 0.13398804625380817;  // std dev = 1,315, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   else if ( link(E, A), link(E, F), link(F, A) )
%   | then return 0.07646585079901087;  // std dev = 3,545, 99,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=84 */
%   | else if ( link(A, G), link(H, G), link(H, A) )
%   | | then return 0.10584286309034255;  // std dev = 2,131, 65,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | | else if ( link(A, I) )
%   | | | then if ( link(A, J), link(I, J) )
%   | | | | then return 0.07543300738327821;  // std dev = 2,746, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   | | | | else if ( link(K, I), link(L, K) )
%   | | | | | then return 0.08656576497046618;  // std dev = 4,173, 161,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=141 */
%   | | | | | else if ( link(I, M) )
%   | | | | | | then return 0.10745949737362868;  // std dev = 2,108, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | | | | else return 0.08953669982560897;  // std dev = 5,393, 278,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=245 */
%   | | | else if ( link(N, A) )
%   | | | | then return 0.09282770919404934;  // std dev = 0,318, 531,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=470 */
%   | | | | else return 0.0982275696548698;  // std dev = 0,298, 579,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=522 */


% Clauses:

hasCat(A, B, 0.13398804625380817) :- 
     link(A, C), 
     link(D, C), 
     link(C, D), 
     !. // Clause #1.

hasCat(A, B, 0.07646585079901087) :- 
     link(C, A), 
     link(C, D), 
     link(D, A), 
     !. // Clause #2.

hasCat(A, B, 0.10584286309034255) :- 
     link(A, C), 
     link(D, C), 
     link(D, A), 
     !. // Clause #3.

hasCat(A, B, 0.07543300738327821) :- 
     link(A, C), 
     link(A, D), 
     link(C, D), 
     !. // Clause #4.

hasCat(A, B, 0.08656576497046618) :- 
     link(A, C), 
     link(D, C), 
     link(E, D), 
     !. // Clause #5.

hasCat(A, B, 0.10745949737362868) :- 
     link(A, C), 
     link(C, D), 
     !. // Clause #6.

hasCat(A, B, 0.08953669982560897) :- 
     link(A, C), 
     !. // Clause #7.

hasCat(A, B, 0.09282770919404934) :- 
     link(C, A), 
     !. // Clause #8.

hasCat(A, B, 0.0982275696548698) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_hasCat(a, underscore, 0.13398804625380817) :-  /* #neg=2 #pos=37 */ 
   link(a, uniqueVar90),
   link(uniqueVar91, uniqueVar90),
   link(uniqueVar90, uniqueVar91),
   !. // Flattened version of clause #1.

flattened_hasCat(a, underscore, 0.07646585079901087) :-  /* #neg=15 #pos=84 */ 
   link(uniqueVar92, a),
   link(uniqueVar92, uniqueVar93),
   link(uniqueVar93, a),
   !. // Flattened version of clause #2.

flattened_hasCat(a, underscore, 0.10584286309034255) :-  /* #neg=5 #pos=60 */ 
   link(a, uniqueVar94),
   link(uniqueVar95, uniqueVar94),
   link(uniqueVar95, a),
   !. // Flattened version of clause #3.

flattened_hasCat(a, underscore, 0.07543300738327821) :-  /* #neg=9 #pos=48 */ 
   link(a, uniqueVar96),
   link(a, uniqueVar97),
   link(uniqueVar96, uniqueVar97),
   !. // Flattened version of clause #4.

flattened_hasCat(a, underscore, 0.08656576497046618) :-  /* #neg=20 #pos=141 */ 
   link(a, uniqueVar98),
   link(uniqueVar99, uniqueVar98),
   link(underscore, uniqueVar99),
   !. // Flattened version of clause #5.

flattened_hasCat(a, underscore, 0.10745949737362868) :-  /* #neg=5 #pos=49 */ 
   link(a, uniqueVar100),
   link(uniqueVar100, underscore),
   !. // Flattened version of clause #6.

flattened_hasCat(a, underscore, 0.08953669982560897) :-  /* #neg=33 #pos=245 */ 
   link(a, underscore),
   !. // Flattened version of clause #7.

flattened_hasCat(a, underscore, 0.09282770919404934) :-  /* #neg=61 #pos=470 */ 
   link(underscore, a),
   !. // Flattened version of clause #8.

flattened_hasCat(underscore, underscore, 0.0982275696548698) :-  /* #neg=57 #pos=522 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   link(underscore, uniqueVar99)
%   link(a, uniqueVar98)
%   link(uniqueVar99, uniqueVar98)
%   link(uniqueVar92, a)
%   link(a, uniqueVar94)
%   link(a, uniqueVar96)
%   link(uniqueVar91, uniqueVar90)
%   link(a, underscore)
%   link(a, uniqueVar100)
%   link(uniqueVar96, uniqueVar97)
%   link(uniqueVar93, a)
%   link(uniqueVar100, underscore)
%   link(uniqueVar90, uniqueVar91)
%   link(uniqueVar92, uniqueVar93)
%   link(underscore, a)
%   link(a, uniqueVar97)
%   link(uniqueVar95, uniqueVar94)
%   link(a, uniqueVar90)
%   link(uniqueVar95, a)

% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model.ckpt
% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for hasCat.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
hasCat(A, B, Total) :- // A general accessor. 
   hasCat(A, B, 1000000, Total), !.
hasCat(A, B, Total) :- waitHere("This should not fail", hasCat(A, B, Total)).

hasCat(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_hasCat_tree1(A, B, TreesToUse, Total1),
   getScore_hasCat_tree2(A, B, TreesToUse, Total2),
   getScore_hasCat_tree3(A, B, TreesToUse, Total3),
   getScore_hasCat_tree4(A, B, TreesToUse, Total4),
   getScore_hasCat_tree5(A, B, TreesToUse, Total5),
   getScore_hasCat_tree6(A, B, TreesToUse, Total6),
   getScore_hasCat_tree7(A, B, TreesToUse, Total7),
   getScore_hasCat_tree8(A, B, TreesToUse, Total8),
   getScore_hasCat_tree9(A, B, TreesToUse, Total9),
   getScore_hasCat_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
hasCat(A, B, TreesToUse, Total) :- waitHere("This should not fail", hasCat(A, B, TreesToUse, Total)).

getScore_hasCat_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_hasCat_tree1(A, B, TreesToUse, Total1) :- hasCat_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_hasCat_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_hasCat_tree2(A, B, TreesToUse, Total2) :- hasCat_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_hasCat_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_hasCat_tree3(A, B, TreesToUse, Total3) :- hasCat_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_hasCat_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_hasCat_tree4(A, B, TreesToUse, Total4) :- hasCat_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_hasCat_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_hasCat_tree5(A, B, TreesToUse, Total5) :- hasCat_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_hasCat_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_hasCat_tree6(A, B, TreesToUse, Total6) :- hasCat_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_hasCat_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_hasCat_tree7(A, B, TreesToUse, Total7) :- hasCat_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_hasCat_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_hasCat_tree8(A, B, TreesToUse, Total8) :- hasCat_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_hasCat_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_hasCat_tree9(A, B, TreesToUse, Total9) :- hasCat_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_hasCat_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_hasCat_tree10(A, B, TreesToUse, Total10) :- hasCat_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(hasCat, 163, [
   link(uniqueVar16, a),
   link(uniqueVar57, a),
   link(uniqueVar84, uniqueVar83),
   link(underscore, uniqueVar8),
   link(a, uniqueVar100),
   link(uniqueVar24, underscore),
   link(uniqueVar79, underscore),
   link(a, uniqueVar2),
   link(uniqueVar72, a),
   link(underscore, uniqueVar49),
   link(uniqueVar60, underscore),
   link(uniqueVar78, uniqueVar79),
   link(uniqueVar92, uniqueVar93),
   link(uniqueVar59, underscore),
   link(a, uniqueVar60),
   link(uniqueVar26, underscore),
   link(uniqueVar8, uniqueVar7),
   link(a, uniqueVar87),
   link(underscore, uniqueVar30),
   link(uniqueVar16, uniqueVar17),
   link(uniqueVar42, underscore),
   link(uniqueVar53, a),
   link(uniqueVar66, a),
   link(a, uniqueVar98),
   link(uniqueVar99, uniqueVar98),
   link(uniqueVar92, a),
   link(a, uniqueVar63),
   link(uniqueVar69, a),
   link(uniqueVar88, uniqueVar87),
   link(uniqueVar49, uniqueVar48),
   link(uniqueVar72, uniqueVar71),
   link(uniqueVar82, a),
   link(uniqueVar30, uniqueVar29),
   link(uniqueVar14, a),
   link(a, uniqueVar45),
   link(uniqueVar70, underscore),
   link(uniqueVar90, uniqueVar91),
   link(uniqueVar4, uniqueVar5),
   link(a, uniqueVar11),
   link(a, uniqueVar41),
   link(uniqueVar95, uniqueVar94),
   link(uniqueVar84, a),
   link(uniqueVar40, uniqueVar39),
   link(uniqueVar31, uniqueVar32),
   link(underscore, uniqueVar12),
   link(uniqueVar57, uniqueVar58),
   link(uniqueVar12, uniqueVar11),
   link(uniqueVar19, a),
   link(a, uniqueVar71),
   link(underscore, uniqueVar10),
   link(uniqueVar61, uniqueVar62),
   link(uniqueVar93, a),
   link(a, uniqueVar6),
   link(uniqueVar54, a),
   link(uniqueVar14, uniqueVar13),
   link(uniqueVar50, a),
   link(underscore, uniqueVar74),
   link(uniqueVar3, underscore),
   link(uniqueVar56, uniqueVar55),
   link(underscore, uniqueVar35),
   link(uniqueVar50, uniqueVar51),
   link(uniqueVar6, underscore),
   link(a, uniqueVar65),
   link(a, uniqueVar85),
   link(uniqueVar34, uniqueVar33),
   link(underscore, uniqueVar68),
   link(uniqueVar96, uniqueVar97),
   link(underscore, uniqueVar67),
   link(uniqueVar67, uniqueVar66),
   link(uniqueVar80, a),
   link(a, uniqueVar4),
   link(uniqueVar45, underscore),
   link(uniqueVar64, underscore),
   link(uniqueVar27, a),
   link(a, uniqueVar90),
   link(a, uniqueVar1),
   link(underscore, uniqueVar15),
   link(uniqueVar37, uniqueVar38),
   link(uniqueVar89, underscore),
   link(a, uniqueVar37),
   link(underscore, uniqueVar21),
   link(a, underscore),
   link(a, uniqueVar31),
   link(uniqueVar43, uniqueVar44),
   link(a, uniqueVar22),
   link(a, uniqueVar73),
   link(a, uniqueVar18),
   link(uniqueVar68, a),
   link(uniqueVar25, uniqueVar26),
   link(uniqueVar9, a),
   link(uniqueVar28, a),
   link(underscore, a),
   link(uniqueVar28, uniqueVar27),
   link(uniqueVar74, uniqueVar73),
   link(a, uniqueVar43),
   link(a, uniqueVar61),
   link(a, uniqueVar62),
   link(underscore, uniqueVar88),
   link(uniqueVar1, underscore),
   link(a, uniqueVar94),
   link(a, uniqueVar51),
   link(a, uniqueVar96),
   link(uniqueVar53, uniqueVar52),
   link(uniqueVar91, uniqueVar90),
   link(underscore, uniqueVar54),
   link(uniqueVar23, uniqueVar22),
   link(a, uniqueVar36),
   link(underscore, uniqueVar77),
   link(uniqueVar2, uniqueVar3),
   link(uniqueVar19, uniqueVar20),
   link(uniqueVar77, a),
   link(uniqueVar35, a),
   link(uniqueVar80, uniqueVar81),
   link(uniqueVar18, underscore),
   link(uniqueVar21, a),
   link(a, uniqueVar89),
   link(uniqueVar17, underscore),
   link(uniqueVar38, uniqueVar37),
   link(a, uniqueVar59),
   link(uniqueVar25, a),
   link(uniqueVar100, underscore),
   link(a, uniqueVar24),
   link(uniqueVar39, a),
   link(uniqueVar58, underscore),
   link(uniqueVar60, a),
   link(a, uniqueVar48),
   link(underscore, uniqueVar23),
   link(uniqueVar52, a),
   link(uniqueVar36, underscore),
   link(uniqueVar86, underscore),
   link(uniqueVar65, underscore),
   link(uniqueVar20, uniqueVar19),
   link(uniqueVar13, a),
   link(uniqueVar40, a),
   link(a, uniqueVar44),
   link(uniqueVar46, uniqueVar47),
   link(uniqueVar95, a),
   link(underscore, uniqueVar99),
   link(uniqueVar41, uniqueVar42),
   link(uniqueVar33, a),
   link(uniqueVar81, a),
   link(uniqueVar46, a),
   link(underscore, uniqueVar82),
   link(a, uniqueVar29),
   link(a, uniqueVar55),
   link(uniqueVar69, uniqueVar70),
   link(uniqueVar15, a),
   link(uniqueVar7, a),
   link(uniqueVar47, underscore),
   link(a, uniqueVar83),
   link(underscore, uniqueVar76),
   link(a, uniqueVar5),
   link(uniqueVar76, uniqueVar75),
   link(uniqueVar78, a),
   link(underscore, uniqueVar56),
   link(underscore, uniqueVar9),
   link(uniqueVar63, uniqueVar64),
   link(uniqueVar10, a),
   link(uniqueVar32, underscore),
   link(a, uniqueVar97),
   link(uniqueVar85, uniqueVar86),
   link(underscore, uniqueVar34),
   link(uniqueVar75, a)]).
% Time taken to learn model for 'hasCat': 29,924 seconds.
% Saving model in: SRLBoost/data/citeseer/train/models/bRDNs/hasCat.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 30,911 seconds.
