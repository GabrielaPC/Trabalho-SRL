
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=0: args[N]=SRLBoost/data/trust/train/train_pos.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=1: args[N]=SRLBoost/data/trust/train/train_neg.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=2: args[N]=SRLBoost/data/trust/train/train_bk.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=3: args[N]=SRLBoost/data/trust/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 13.619 facts.
% Have read 1.931 examples from 'SRLBoost/data/trust/train' [SRLBoost/data/trust/train/train*].
% Have read 77 examples from 'SRLBoost/data/trust/train' [SRLBoost/data/trust/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 trusts(A, B)
%  targetPred:                trusts/2
%  targetArgTypes:            signature = [const, const], types = [+person, +person]
%  targets:                   [trusts(A, B)]
%  targetPredicates:          [trusts/2]
%  targetArgSpecs:            [[A[+person], B[+person]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% No mode match to 'prior(0, 9.19062832800852E14)' in [signature = [const], types = [+person]]
% Time to collect constants: 331 milliseconds

% Read 1.931 pos examples and 77 neg examples.
% Time to init learnOneClause: 345 milliseconds
% Old dirnull
Setting model dir

% Have 1.931 'raw' positive examples and kept 1.931.
% Have 77 'raw' negative examples and kept 77.

% processing backup's for trusts
%  POS EX = 1.931
%  NEG EX = 77

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
SRLBoost/data/trust/train/models/
% Learning 10 trees in this iteration for trusts

% Learn model for: trusts
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077538453
Set score:0.0025
% Dataset size: 2.008
Computing probabilities
prob time:15 milliseconds
No hidden examples for : trusts
Time to build dataset: 27 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077537332
Set score:0.0025

% Have these 10 positive seeds: 108 125 195 256 317 351 464 495 500 655

% LearnOneClause Parameters:
%   Targets (1):
%    trusts(+person, +person)
%  Modes (3):
%    knows(+person, -person),
%    knows(-person, +person),
%    prior(+person)

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for knows/2 with 7.577 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for knows/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for knows/2.

% Skipping over this 'waitHere': There is no fact nor clause nor built-in predicate matching: 'prior/1'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: prior/1.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398329 (regressionFit = 73,398328, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,398329): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033215 (regressionFit = 74,033214, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892843 (regressionFit = 73,892842, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,707333 (regressionFit = 73,707331, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,871478 (regressionFit = 73,871476, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047227 (regressionFit = 74,047225, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,020462 (regressionFit = 74,020460, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,247726): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,031883 (regressionFit = 74,031881, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,035502 (regressionFit = 74,035500, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06807163681799892 to score=0.0025 #egs=490.0
Comparing variance: 0.026279724552636413 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,068072)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,068072) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026280)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026280) into the LAST position (#2) in the search queue.

% Time for loop #1: 10,221 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 14 29 89 198 279 327 366 391 394 466
%     Score = -33,353626 (regressionFit = 33,353623, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,353626): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,796973 (regressionFit = 32,796970, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,796973): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,318697 (regressionFit = 33,318694, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,321455 (regressionFit = 33,321452, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,214697 (regressionFit = 33,214694, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,347751 (regressionFit = 33,347748, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,353908 (regressionFit = 33,353905, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024375000000006076 to score=0.0025 #egs=160.0
Comparing variance: 0.08756657483930584 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087567)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087567) into position #1 in the search queue (new size=2).

% Time for loop #2: 1,033 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 6 136 174 240 256 290 291 314 322
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894019 (regressionFit = 28,894016, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,894019): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,800357 (regressionFit = 28,800354, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,800357): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,876019 (regressionFit = 28,876016, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894636 (regressionFit = 28,894633, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894657 (regressionFit = 28,894654, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,088.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09157505193906215 to score=0.0025 #egs=304.0
Comparing variance: 0.03698224852071082 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036982)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036982) into position #1 in the search queue (new size=2).

% Time for loop #3: 465 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 2 3 6 9 10 11 14 17 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,950003 (regressionFit = 0,950000, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,950003): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: -1.4802973661668753E-16 to score=0.0025 #egs=6.0
Comparing variance: 0.047499999999999785 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 66 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 2 3 5 7 10 12 14 18 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -73,2477):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon19, A))

% Have these 10 positive seeds: 130 250 414 500 624 869 953 959 1018 1020

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600256 (regressionFit = 39,600255, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,600256): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818384 (regressionFit = 39,818383, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828196 (regressionFit = 39,828195, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892297 (regressionFit = 39,892295, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,781731 (regressionFit = 39,781729, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,823372 (regressionFit = 39,823370, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,817533 (regressionFit = 39,817531, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,864744 (regressionFit = 39,864742, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,886757 (regressionFit = 39,886755, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221082482 to score=0.0025 #egs=424.0
Comparing variance: 0.034378143705590496 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,034378)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,034378) into position #1 in the search queue (new size=2).

% Time for loop #6: 3,265 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 114 215 226 240 244 257 289 312 328 430

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581829 (regressionFit = 37,581827, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,581829): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435114 (regressionFit = 37,435113, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,435114): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,411430): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605058 (regressionFit = 37,605056, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,558780 (regressionFit = 37,558778, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,591537 (regressionFit = 37,591534, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,600932 (regressionFit = 37,600930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,599450 (regressionFit = 37,599448, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04130221003055439 to score=0.0025 #egs=834.0
Comparing variance: 0.011405325443791324 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,041302)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,041302) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011405) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,750 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 117 153 249 308 399 588 614 636 724 817
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,431477 (regressionFit = 34,431474, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,431477): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,440650 (regressionFit = 34,440647, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,443775 (regressionFit = 34,443772, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,439499 (regressionFit = 34,439496, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,400752 (regressionFit = 34,400749, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,400752): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,430996 (regressionFit = 34,430993, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,109502 (regressionFit = 34,109499, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,109502): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,436293 (regressionFit = 34,436290, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,364478 (regressionFit = 34,364475, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,438557 (regressionFit = 34,438554, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05676649305556237 to score=0.0025 #egs=480.0
Comparing variance: 0.019382999776567947 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019383)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019383) into position #1 in the search queue (new size=3).

% Time for loop #8: 890 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 55 80 86 94 138 142 170 172 195 305
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,857267 (regressionFit = 6,857264, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,857267): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,838986 (regressionFit = 6,838983, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,838986): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,845915 (regressionFit = 6,845912, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 36,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,819856 (regressionFit = 6,819853, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,819856): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,767371 (regressionFit = 6,767368, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,767371): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,823744 (regressionFit = 6,823741, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858384 (regressionFit = 6,858382, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858762 (regressionFit = 6,858759, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858454 (regressionFit = 6,858452, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,860003 (regressionFit = 6,860000, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 374 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon2557, A), knows(Anon2629, Anon2557))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #1 @ 20:38:59 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.8331489350995097;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.7561752508889822;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.7977322684328414;  // std dev = 5,220, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.8449910403626665;  // std dev = 1,987, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.7981489350995122;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.8466104735610475;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.8331489350995097) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.7561752508889822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.8581489350995123) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.8081489350995122) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.7977322684328414) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.8449910403626665) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.7981489350995122) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8466104735610475) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.8331489350995097) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7561752508889822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar2),
   knows(uniqueVar2, uniqueVar2),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.8581489350995123) :-  /* #pos=6 */ 
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar4),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.7977322684328414) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar5, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar6, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.8449910403626665) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar7, a),
   knows(underscore, uniqueVar7),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7981489350995122) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar8, a),
   knows(underscore, uniqueVar8),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8466104735610475) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar3)
%   knows(uniqueVar3, a)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar6, a)
%   knows(uniqueVar1, uniqueVar1)
%   knows(a, uniqueVar1)
%   knows(a, uniqueVar4)
%   knows(uniqueVar6, uniqueVar5)
%   knows(underscore, uniqueVar8)
%   knows(uniqueVar5, a)
%   knows(b, a)
%   knows(underscore, uniqueVar7)
%   knows(uniqueVar7, a)
%   knows(uniqueVar2, uniqueVar2)
%   knows(uniqueVar4, uniqueVar4)
%   knows(a, uniqueVar2)
%   knows(b, underscore)
%   knows(uniqueVar8, a)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 1 trees is 18,380 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01938299977656799
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:504 milliseconds
No hidden examples for : trusts
Time to build dataset: 521 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03645328821973537
Set score:0.0025

% Have these 10 positive seeds: 181 219 557 607 655 1095 1142 1264 1523 1797

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780650 (regressionFit = 72,780649, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,780650): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190686 (regressionFit = 73,190685, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098273 (regressionFit = 73,098272, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,934135 (regressionFit = 72,934133, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,083089 (regressionFit = 73,083087, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,197226 (regressionFit = 73,197224, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180663 (regressionFit = 73,180661, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,682084): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180320 (regressionFit = 73,180318, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,198205 (regressionFit = 73,198203, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,189432 (regressionFit = 73,189430, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06759051175403913 to score=0.0025 #egs=490.0
Comparing variance: 0.0260624053267357 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,067591)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,067591) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026062)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026062) into the LAST position (#2) in the search queue.

% Time for loop #1: 4,532 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 31 79 91 104 140 195 298 313 372 436
%     Score = -33,118551 (regressionFit = 33,118548, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,118551): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,758692 (regressionFit = 32,758689, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,758692): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,118866 (regressionFit = 33,118863, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,097581 (regressionFit = 33,097578, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,005786 (regressionFit = 33,005783, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,112595 (regressionFit = 33,112592, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,119129 (regressionFit = 33,119126, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999968 to score=0.0025 #egs=160.0
Comparing variance: 0.0874505739497112 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087451)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087451) into position #1 in the search queue (new size=2).

% Time for loop #2: 452 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 18 34 84 107 116 122 138 165 187
%     Score = -28,827988 (regressionFit = 28,827985, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,827988): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,839018 (regressionFit = 28,839015, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,796211 (regressionFit = 28,796208, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,796211): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,839119 (regressionFit = 28,839116, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,855903 (regressionFit = 28,855900, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,856032 (regressionFit = 28,856029, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,087.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09157505193904986 to score=0.0025 #egs=304.0
Comparing variance: 0.036822769656512926 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036823)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036823) into position #1 in the search queue (new size=2).

% Time for loop #3: 321 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 4 8 9 13 19 22 24 25
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,950003 (regressionFit = 0,950000, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,950003): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 7.401486830834377E-17 to score=0.0025 #egs=6.0
Comparing variance: 0.04750000000000041 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 50 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 0 1 10 12 15 16 17 18 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -72,6821):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon4291, A))

% Have these 10 positive seeds: 10 320 354 398 547 565 566 613 652 681

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,375242): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518845 (regressionFit = 39,518844, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522232 (regressionFit = 39,522231, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,354884): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561608 (regressionFit = 39,561606, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,488796 (regressionFit = 39,488794, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,504818 (regressionFit = 39,504816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,514477 (regressionFit = 39,514475, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,534467 (regressionFit = 39,534465, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559999 (regressionFit = 39,559997, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,558124 (regressionFit = 39,558122, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019871340251457092 to score=0.0025 #egs=1222.0
Comparing variance: 0.05091927147765011 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019871)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019871) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,050919)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,050919) into position #1 in the search queue (new size=2).

% Time for loop #6: 1,994 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 7 40 63 135 141 150 162 165 178 193

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057704 (regressionFit = 15,057703, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,057704): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030703 (regressionFit = 15,030702, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,030703): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,000738): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071990 (regressionFit = 15,071988, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,015800 (regressionFit = 15,015798, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,069562 (regressionFit = 15,069560, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,065656 (regressionFit = 15,065654, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071990 (regressionFit = 15,071988, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,053386 (regressionFit = 15,053384, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,051.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0659212063368675 to score=0.0025 #egs=126.0
Comparing variance: 0.0393803764123301 to score=0.0025 #egs=170.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 126,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,065921)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,065921) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,039380)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,039380) into position #2 in the search queue (new size=3).

% Time for loop #7: 148 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 126 positive examples, of which 126 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]'
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 18 55 70 91 110 116
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,286156 (regressionFit = 8,286153, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,286156): trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,277281 (regressionFit = 8,277278, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,277281): trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,305644 (regressionFit = 8,305641, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, B).  [covers 26,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,130356 (regressionFit = 8,130353, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,130356): trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,173367 (regressionFit = 8,173364, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,288215 (regressionFit = 8,288212, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(_, C).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(_, C).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,066.
% Will extend: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10525153248940874 to score=0.0025 #egs=50.0
Comparing variance: 0.037733896120992996 to score=0.0025 #egs=76.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 76,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,037734)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,037734) into position #2 in the search queue (new size=3).

% Time for loop #8: 43 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
% This clause covers 50 positive examples, of which 50 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 6 16 43 49 50 51 52 56 80 86

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,658453): trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682449 (regressionFit = 6,682448, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,664853 (regressionFit = 6,664851, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,694207 (regressionFit = 6,694205, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,693710 (regressionFit = 6,693708, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,680084 (regressionFit = 6,680082, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 120,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658453 (regressionFit = 6,658451, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,694207 (regressionFit = 6,694205, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,692259 (regressionFit = 6,692257, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 30,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,676698 (regressionFit = 6,676695, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 156,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,692259 (regressionFit = 6,692257, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 30,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,658454 (regressionFit = 6,658451, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,693710 (regressionFit = 6,693708, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,162499 (regressionFit = 6,162497, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,162499): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,682450 (regressionFit = 6,682448, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,684762 (regressionFit = 6,684760, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 162,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,039.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
Comparing variance: 0.22332181843132126 to score=0.0025 #egs=6.0
Comparing variance: 0.029405889315173486 to score=0.0025 #egs=164.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 164,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,029406)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,029406) into position #2 in the search queue (new size=3).

% Time for loop #9: 80 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 6,0/170,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon6857, Anon6927))
Created a leaf under (trusts(A, B) :- knows(Anon7885, B), knows(Anon7885, Anon7885))
Created a leaf under (trusts(A, B) :- knows(B, Anon5939), knows(Anon5939, B))

%%%%%  WILL-Produced Tree #2 @ 20:39:07 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.6994914035015026;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.637613635329692;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.7036147903757071;  // std dev = 0,141, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(B, G) )
%   | | then if ( knows(F, G) )
%   | | | then return 0.6100029593359543;  // std dev = 2,294, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | | else return 0.6863343487994458;  // std dev = 0,194, 76,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | else if ( knows(H, B), knows(H, H) )
%   | | | then return 0.3949349146884212;  // std dev = 1,158, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.698150120082;  // std dev = 0,171, 164,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=159 */


% Clauses:

trusts(A, B, 0.6994914035015026) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.637613635329692) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.7194734122109544) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.6794533872440252) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.7036147903757071) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.6100029593359543) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #6.

trusts(A, B, 0.6863343487994458) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.3949349146884212) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.698150120082) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.6994914035015026) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.637613635329692) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.7194734122109544) :-  /* #pos=6 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar11, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.6794533872440252) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar12),
   knows(uniqueVar12, uniqueVar12),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7036147903757071) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.6100029593359543) :-  /* #neg=6 #pos=44 */ 
   knows(uniqueVar14, a),
   knows(b, uniqueVar15),
   knows(uniqueVar14, uniqueVar15),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.6863343487994458) :-  /* #neg=3 #pos=73 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.3949349146884212) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar16, a),
   knows(uniqueVar16, uniqueVar16),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.698150120082) :-  /* #neg=5 #pos=159 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar13)
%   knows(uniqueVar11, a)
%   knows(uniqueVar16, a)
%   knows(uniqueVar9, uniqueVar9)
%   knows(a, uniqueVar12)
%   knows(b, uniqueVar15)
%   knows(a, uniqueVar10)
%   knows(uniqueVar13, a)
%   knows(uniqueVar10, uniqueVar10)
%   knows(uniqueVar11, uniqueVar11)
%   knows(uniqueVar14, uniqueVar15)
%   knows(a, uniqueVar9)
%   knows(b, a)
%   knows(uniqueVar12, uniqueVar12)
%   knows(underscore, a)
%   knows(a, uniqueVar11)
%   knows(b, underscore)
%   knows(uniqueVar14, a)
%   knows(uniqueVar16, uniqueVar16)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 2 trees is 26,586 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03938037641233039
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:268 milliseconds
No hidden examples for : trusts
Time to build dataset: 278 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03597287843028468
Set score:0.0025

% Have these 10 positive seeds: 18 125 164 268 317 1040 1279 1470 1522 1523

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,970424): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,205585 (regressionFit = 72,205583, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228633 (regressionFit = 72,228631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,200731 (regressionFit = 72,200729, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,219791 (regressionFit = 72,219789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,056829 (regressionFit = 72,056827, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,152994 (regressionFit = 72,152991, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,157891 (regressionFit = 72,157889, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228633 (regressionFit = 72,228631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,094399 (regressionFit = 72,094397, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,230932 (regressionFit = 72,230930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,220212 (regressionFit = 72,220210, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,200731 (regressionFit = 72,200729, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970424 (regressionFit = 71,970423, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,157891 (regressionFit = 72,157889, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228531 (regressionFit = 72,228529, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,205585 (regressionFit = 72,205583, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,224038 (regressionFit = 72,224036, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,981520 (regressionFit = 71,981518, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,222398 (regressionFit = 72,222396, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164576 (regressionFit = 72,164573, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,224038 (regressionFit = 72,224036, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,970425 (regressionFit = 71,970423, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,094399 (regressionFit = 72,094397, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,228532 (regressionFit = 72,228529, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,219791 (regressionFit = 72,219789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,230274 (regressionFit = 72,230272, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,164575 (regressionFit = 72,164573, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,226539 (regressionFit = 72,226537, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.01012714589415195 to score=0.0025 #egs=584.0
Comparing variance: 0.04638775937673792 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010127)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010127) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046388)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,046388) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,631 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 378 401 476 596 787 845 985 1003 1153 1194

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055289 (regressionFit = 66,055288, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,055289): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895323 (regressionFit = 65,895322, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,895323): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922132 (regressionFit = 65,922130, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,036697 (regressionFit = 66,036695, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922176 (regressionFit = 65,922174, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055362 (regressionFit = 66,055360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,609190): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,873149 (regressionFit = 65,873147, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,046712 (regressionFit = 66,046711, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,036697 (regressionFit = 66,036695, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,003686 (regressionFit = 66,003684, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,053904 (regressionFit = 66,053902, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056012 (regressionFit = 66,056010, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922176 (regressionFit = 65,922174, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,046712 (regressionFit = 66,046711, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,922132 (regressionFit = 65,922130, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056050 (regressionFit = 66,056048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,774923 (regressionFit = 65,774921, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,050063 (regressionFit = 66,050061, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,056050 (regressionFit = 66,056048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,003686 (regressionFit = 66,003684, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055290 (regressionFit = 66,055288, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,055362 (regressionFit = 66,055360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,042354 (regressionFit = 66,042352, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,895324 (regressionFit = 65,895322, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,045241 (regressionFit = 66,045239, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1052181585294915 to score=0.0025 #egs=140.0
Comparing variance: 0.039625113826422115 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,105218)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,105218) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039625)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039625) into position #2 in the search queue (new size=3).

% Time for loop #2: 1,332 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 14 26 37 45 48 54 71 72 103
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,382803 (regressionFit = 14,382800, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,382803): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,409079 (regressionFit = 14,409076, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,662289 (regressionFit = 14,662287, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 16,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,730251 (regressionFit = 14,730248, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,428479 (regressionFit = 14,428476, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,105.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07598860049822885 to score=0.0025 #egs=84.0
Comparing variance: 0.1428528094736959 to score=0.0025 #egs=56.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 56,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,142853)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,142853) into position #1 in the search queue (new size=3).

% Time for loop #3: 100 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 84 positive examples, of which 84 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/56,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 4 12 15 16 26 36
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,783052 (regressionFit = 7,783049, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,783052): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,989201 (regressionFit = 7,989198, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,785740 (regressionFit = 7,785737, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,143.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
Comparing variance: 1.5098404829923714E-4 to score=0.0025 #egs=6.0
Comparing variance: 0.1556428628027023 to score=0.0025 #egs=50.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 50,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,155643)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,155643) into position #1 in the search queue (new size=3).

% Time for loop #4: 82 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/50,0 pos, 0,0/0,0 neg]'
%     Score = -65,609190 (regressionFit = 65,609188, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 0 2 3 6 11 12 23 44
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -7,778747 (regressionFit = 7,778744, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,778747): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,156.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 91 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
% This clause covers 46 positive examples, of which 46 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 73 98 148 191 366 534 561 689 718 809

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878591 (regressionFit = 50,878590, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,878591): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788128 (regressionFit = 50,788127, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,788128): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,832847 (regressionFit = 50,832845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,864781 (regressionFit = 50,864779, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,807833 (regressionFit = 50,807831, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,857689 (regressionFit = 50,857687, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,773187): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,853994 (regressionFit = 50,853993, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,864781 (regressionFit = 50,864779, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,791459 (regressionFit = 50,791457, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,862669 (regressionFit = 50,862666, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,875617 (regressionFit = 50,875614, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,807833 (regressionFit = 50,807831, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,853994 (regressionFit = 50,853993, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,832847 (regressionFit = 50,832845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,876962 (regressionFit = 50,876960, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,816635 (regressionFit = 50,816633, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,868607 (regressionFit = 50,868605, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,876962 (regressionFit = 50,876960, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,791459 (regressionFit = 50,791457, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,878592 (regressionFit = 50,878590, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,857689 (regressionFit = 50,857687, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,810733 (regressionFit = 50,810731, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,788129 (regressionFit = 50,788127, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,870908 (regressionFit = 50,870906, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04645171688865064 to score=0.0025 #egs=1012.0
Comparing variance: 0.013838410803272553 to score=0.0025 #egs=272.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.012,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,046452)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,046452) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 272,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,013838)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,013838) into position #2 in the search queue (new size=3).

% Time for loop #6: 2,494 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 1012 positive examples, of which 1012 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]'
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 78 178 252 313 319 487 503 537 559 655
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,008629 (regressionFit = 47,008625, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,008629): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,002084 (regressionFit = 47,002081, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,002084): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,972676 (regressionFit = 46,972673, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,972676): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,007788 (regressionFit = 47,007785, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 446,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,005429 (regressionFit = 47,005426, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 876,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,944460 (regressionFit = 46,944458, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,944460): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,988817 (regressionFit = 46,988814, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 1.002,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,638875 (regressionFit = 46,638872, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,638875): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,993422 (regressionFit = 46,993419, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 914,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,933945 (regressionFit = 46,933942, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 400,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,004288 (regressionFit = 47,004285, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 1.008,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06482596519640038 to score=0.0025 #egs=598.0
Comparing variance: 0.019016775459190362 to score=0.0025 #egs=414.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 414,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019017)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019017) into position #1 in the search queue (new size=3).

% Time for loop #7: 1,912 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% This clause covers 598 positive examples, of which 598 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/414,0 pos, 0,0/0,0 neg]'
%     Score = -50,773187 (regressionFit = 50,773185, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 2 14 63 116 148 197 337 374
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,871334 (regressionFit = 7,871331, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,871334): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,830801 (regressionFit = 7,830798, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,830801): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,819442 (regressionFit = 7,819439, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,819442): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,868047 (regressionFit = 7,868044, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 404,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,871408 (regressionFit = 7,871406, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 326,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,862879 (regressionFit = 7,862876, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 88,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,872388 (regressionFit = 7,872385, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 410,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 395 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% This clause covers 358 positive examples, of which 358 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon10973, A), knows(Anon11045, Anon10973))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #3 @ 20:39:18 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.5518120675111413;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.5136447952892345;  // std dev = 2,526, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(B, C) )
%   | | | then return 0.5914904133699108;  // std dev = 0,030, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.39279451691264183;  // std dev = 2,663, 46,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=37 */
%   | | | | else return 0.3624012703236694;  // std dev = 0,828, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.5118429639836428;  // std dev = 6,226, 598,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=556 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.5552433936131714;  // std dev = 2,231, 358,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=353 */
%   | | | | else return 0.5220030724815337;  // std dev = 1,685, 56,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.5499378936412762;  // std dev = 0,118, 272,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=268 */


% Clauses:

trusts(A, B, 0.5518120675111413) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.5136447952892345) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, 0.5914904133699108) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #3.

trusts(A, B, 0.39279451691264183) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.3624012703236694) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.5118429639836428) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.5552433936131714) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.5220030724815337) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.5499378936412762) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5518120675111413) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.5136447952892345) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar17, a),
   knows(uniqueVar17, uniqueVar17),
   knows(a, uniqueVar17),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.5914904133699108) :-  /* #pos=6 */ 
   knows(uniqueVar18, a),
   knows(uniqueVar18, uniqueVar18),
   knows(b, uniqueVar18),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.39279451691264183) :-  /* #neg=9 #pos=37 */ 
   knows(uniqueVar19, a),
   knows(uniqueVar19, uniqueVar19),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.3624012703236694) :-  /* #neg=1 #pos=3 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar20, uniqueVar20),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5118429639836428) :-  /* #neg=42 #pos=556 */ 
   knows(uniqueVar21, a),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar22, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.5552433936131714) :-  /* #neg=5 #pos=353 */ 
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar23),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.5220030724815337) :-  /* #neg=3 #pos=53 */ 
   knows(uniqueVar24, a),
   knows(underscore, uniqueVar24),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5499378936412762) :-  /* #neg=4 #pos=268 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar24, a)
%   knows(uniqueVar18, a)
%   knows(uniqueVar17, uniqueVar17)
%   knows(underscore, uniqueVar24)
%   knows(a, uniqueVar17)
%   knows(uniqueVar22, a)
%   knows(uniqueVar18, uniqueVar18)
%   knows(uniqueVar20, uniqueVar20)
%   knows(uniqueVar21, a)
%   knows(uniqueVar23, a)
%   knows(uniqueVar19, a)
%   knows(uniqueVar22, uniqueVar21)
%   knows(uniqueVar20, a)
%   knows(underscore, uniqueVar23)
%   knows(b, a)
%   knows(uniqueVar19, uniqueVar19)
%   knows(uniqueVar17, a)
%   knows(b, uniqueVar18)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 3 trees is 36,949 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.019016775459190338
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:370 milliseconds
No hidden examples for : trusts
Time to build dataset: 377 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035570337511796724
Set score:0.0025

% Have these 10 positive seeds: 53 368 636 686 805 1121 1423 1434 1578 1851

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278537 (regressionFit = 71,278536, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,278537): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425039 (regressionFit = 71,425038, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387878 (regressionFit = 71,387877, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,417408 (regressionFit = 71,417406, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,420067 (regressionFit = 71,420065, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,397238 (regressionFit = 71,397236, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,398607 (regressionFit = 71,398605, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,332265 (regressionFit = 71,332263, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,380170 (regressionFit = 71,380168, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,346734 (regressionFit = 71,346732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,420067 (regressionFit = 71,420065, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,331013 (regressionFit = 71,331011, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,421568 (regressionFit = 71,421565, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,397238 (regressionFit = 71,397236, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,346734 (regressionFit = 71,346732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,417408 (regressionFit = 71,417406, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,408377 (regressionFit = 71,408375, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,222917 (regressionFit = 71,222915, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,222917): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,412981 (regressionFit = 71,412979, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,408377 (regressionFit = 71,408375, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,278538 (regressionFit = 71,278536, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,331013 (regressionFit = 71,331011, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,425040 (regressionFit = 71,425038, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,398607 (regressionFit = 71,398605, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,421465 (regressionFit = 71,421463, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387879 (regressionFit = 71,387877, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,420039 (regressionFit = 71,420037, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06619366084028544 to score=0.0025 #egs=490.0
Comparing variance: 0.02555205606127439 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,066194)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,066194) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025552)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025552) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,150 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -71,222917 (regressionFit = 71,222915, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 70 73 142 157 161 215 252 272 277 330
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,333859 (regressionFit = 32,333856, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,333859): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,433997 (regressionFit = 32,433994, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,404382 (regressionFit = 32,404379, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,417508 (regressionFit = 32,417505, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,362723 (regressionFit = 32,362720, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,434790 (regressionFit = 32,434787, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437500000000037 to score=0.0025 #egs=160.0
Comparing variance: 0.08616320134972714 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,086163)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,086163) into position #1 in the search queue (new size=2).

% Time for loop #2: 461 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -71,222917 (regressionFit = 71,222915, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 4 15 45 142 166 244 280 319
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,408581 (regressionFit = 28,408578, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,408581): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,398960 (regressionFit = 28,398957, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,398960): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,415269 (regressionFit = 28,415266, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,433240 (regressionFit = 28,433237, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09025540484784889 to score=0.0025 #egs=304.0
Comparing variance: 0.03697362680807123 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036974)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036974) into position #1 in the search queue (new size=2).

% Time for loop #3: 310 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -71,222917 (regressionFit = 71,222915, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 2 3 6 10 12 13 18 22 23
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,958564 (regressionFit = 0,958561, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,958564): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: -3.700743415417188E-17 to score=0.0025 #egs=6.0
Comparing variance: 0.04792804664024417 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047928)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047928) into position #1 in the search queue (new size=2).

% Time for loop #4: 50 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -71,222917 (regressionFit = 71,222915, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 2 4 5 7 9 10 14 16 17
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -71,2229):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon12695, A))

% Have these 10 positive seeds: 20 221 255 259 285 321 466 580 891 1204

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709325 (regressionFit = 38,709324, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,709325): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773288 (regressionFit = 38,773287, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709326 (regressionFit = 38,709324, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,774995 (regressionFit = 38,774993, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,756487 (regressionFit = 38,756485, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,784680 (regressionFit = 38,784678, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,710457 (regressionFit = 38,710455, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,786191 (regressionFit = 38,786189, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,769084 (regressionFit = 38,769082, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,756222 (regressionFit = 38,756220, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777113 (regressionFit = 38,777110, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,756487 (regressionFit = 38,756485, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717981 (regressionFit = 38,717979, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,781917 (regressionFit = 38,781915, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,759305 (regressionFit = 38,759303, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,784680 (regressionFit = 38,784678, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777113 (regressionFit = 38,777110, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709326 (regressionFit = 38,709324, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,756222 (regressionFit = 38,756220, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777112 (regressionFit = 38,777110, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,774995 (regressionFit = 38,774993, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787522 (regressionFit = 38,787520, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,770524 (regressionFit = 38,770522, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787522 (regressionFit = 38,787520, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709327 (regressionFit = 38,709324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717981 (regressionFit = 38,717979, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,777113 (regressionFit = 38,777110, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,710457 (regressionFit = 38,710455, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,786095 (regressionFit = 38,786093, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,773289 (regressionFit = 38,773287, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,784888 (regressionFit = 38,784886, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221071723 to score=0.0025 #egs=424.0
Comparing variance: 0.033563764568674805 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033564)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033564) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,706 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 135 163 201 378 778 825 860

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716366 (regressionFit = 36,716365, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,716366): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676298 (regressionFit = 36,676297, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,676298): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,718700 (regressionFit = 36,718698, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,718226 (regressionFit = 36,718224, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,690761 (regressionFit = 36,690759, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,667565 (regressionFit = 36,667562, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,667565): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716914 (regressionFit = 36,716912, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,718226 (regressionFit = 36,718224, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,683518 (regressionFit = 36,683516, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,701196 (regressionFit = 36,701194, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,705836 (regressionFit = 36,705834, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,690761 (regressionFit = 36,690759, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716914 (regressionFit = 36,716912, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,718700 (regressionFit = 36,718698, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,705387 (regressionFit = 36,705385, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,683518 (regressionFit = 36,683516, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716367 (regressionFit = 36,716365, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,716303 (regressionFit = 36,716301, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,676299 (regressionFit = 36,676297, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,714031 (regressionFit = 36,714029, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04057351254602948 to score=0.0025 #egs=834.0
Comparing variance: 0.01088174215509356 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040574)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040574) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,010882)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,010882) into position #2 in the search queue (new size=3).

% Time for loop #7: 826 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,667565 (regressionFit = 36,667562, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 77 124 131 161 309 465 609 760 813
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,779298 (regressionFit = 33,779295, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,779298): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,821593 (regressionFit = 33,821590, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,832569 (regressionFit = 33,832566, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,827466 (regressionFit = 33,827463, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,837999 (regressionFit = 33,837996, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,761454 (regressionFit = 33,761451, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,761454): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,830518 (regressionFit = 33,830515, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,776495 (regressionFit = 33,776492, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,838282 (regressionFit = 33,838280, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,819873 (regressionFit = 33,819870, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,835635 (regressionFit = 33,835632, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.031112203521525692 to score=0.0025 #egs=300.0
Comparing variance: 0.04574492430686562 to score=0.0025 #egs=534.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 534,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,045745)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,045745) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,323 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 300 positive examples, of which 300 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/534,0 pos, 0,0/0,0 neg]'
%     Score = -36,667565 (regressionFit = 36,667562, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 52 55 82 97 122 127 145 163 216
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,418449 (regressionFit = 24,418446, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 412,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,418449): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 412,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,409505 (regressionFit = 24,409502, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 302,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,409505): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 302,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,410633 (regressionFit = 24,410630, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 28,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,391411 (regressionFit = 24,391408, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 156,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,391411): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 156,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,426164 (regressionFit = 24,426161, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 440,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,418078 (regressionFit = 24,418075, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 528,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,337010 (regressionFit = 24,337007, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -24,337010): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,425817 (regressionFit = 24,425814, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 454,0/534,0 pos, 0,0/0,0 neg]
%     Score = -24,426529 (regressionFit = 24,426526, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 166,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 534,0/534,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 532,0/534,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 841 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 256,0/534,0 pos, 0,0/0,0 neg]
% This clause covers 256 positive examples, of which 256 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon15191, A), knows(Anon15263, Anon15191))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #4 @ 20:39:28 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.4043625490831312;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.37073389739412854;  // std dev = 5,238, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.4276936779200579;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.40326905418887193;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.4186763332294553;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(E, B) )
%   | | | then return 0.411616502394239;  // std dev = 3,055, 300,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=290 */
%   | | | else if ( knows(F, A) )
%   | | | | then return 0.37802604243273297;  // std dev = 4,191, 256,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=237 */
%   | | | | else return 0.40412538513823615;  // std dev = 2,603, 278,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=271 */
%   | | else return 0.4148802457451366;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.4043625490831312) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.37073389739412854) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.4276936779200579) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.40326905418887193) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.4186763332294553) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.411616502394239) :- 
     knows(C, A), 
     knows(D, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.37802604243273297) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.40412538513823615) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.4148802457451366) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.4043625490831312) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar25),
   knows(uniqueVar25, uniqueVar25),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.37073389739412854) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar26),
   knows(uniqueVar26, uniqueVar26),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.4276936779200579) :-  /* #pos=6 */ 
   knows(a, uniqueVar27),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar27, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.40326905418887193) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar28),
   knows(uniqueVar28, uniqueVar28),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.4186763332294553) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.411616502394239) :-  /* #neg=10 #pos=290 */ 
   knows(uniqueVar29, a),
   knows(underscore, uniqueVar29),
   knows(uniqueVar29, b),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.37802604243273297) :-  /* #neg=19 #pos=237 */ 
   knows(uniqueVar30, a),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar31, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.40412538513823615) :-  /* #neg=7 #pos=271 */ 
   knows(uniqueVar32, a),
   knows(underscore, uniqueVar32),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.4148802457451366) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar27, a)
%   knows(a, uniqueVar28)
%   knows(uniqueVar25, uniqueVar25)
%   knows(a, uniqueVar25)
%   knows(uniqueVar26, uniqueVar26)
%   knows(uniqueVar31, a)
%   knows(a, uniqueVar27)
%   knows(uniqueVar28, uniqueVar28)
%   knows(uniqueVar32, a)
%   knows(uniqueVar27, uniqueVar27)
%   knows(underscore, uniqueVar29)
%   knows(uniqueVar29, a)
%   knows(b, a)
%   knows(uniqueVar30, a)
%   knows(uniqueVar31, uniqueVar30)
%   knows(underscore, uniqueVar32)
%   knows(a, uniqueVar26)
%   knows(uniqueVar29, b)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 4 trees is 47,068 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04574492430686561
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035496224845940574
Set score:0.0025

% Have these 10 positive seeds: 81 393 694 717 984 1189 1322 1350 1361 1618

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167685 (regressionFit = 71,167684, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,167685): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269802 (regressionFit = 71,269801, penalties=1.12E-6) for clause:  trusts(_, A) :- knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249383 (regressionFit = 71,249382, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249384 (regressionFit = 71,249382, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,271140 (regressionFit = 71,271138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249385 (regressionFit = 71,249382, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,273537 (regressionFit = 71,273535, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,256093 (regressionFit = 71,256091, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,258979 (regressionFit = 71,258977, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249384 (regressionFit = 71,249382, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249385 (regressionFit = 71,249382, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249384 (regressionFit = 71,249382, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,243232 (regressionFit = 71,243230, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, B), knows(A, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(A, _).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(_, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,196619 (regressionFit = 71,196617, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276036 (regressionFit = 71,276033, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,273537 (regressionFit = 71,273535, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,186925 (regressionFit = 71,186923, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,273259 (regressionFit = 71,273257, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,272168 (regressionFit = 71,272166, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,256093 (regressionFit = 71,256091, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276036 (regressionFit = 71,276033, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249384 (regressionFit = 71,249382, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, B).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,196619 (regressionFit = 71,196617, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276035 (regressionFit = 71,276033, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,271140 (regressionFit = 71,271138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,260749 (regressionFit = 71,260747, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,132588 (regressionFit = 71,132586, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,132588): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,262645 (regressionFit = 71,262642, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249385 (regressionFit = 71,249382, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,260749 (regressionFit = 71,260747, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,167686 (regressionFit = 71,167684, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,269803 (regressionFit = 71,269801, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, A).  [covers 56,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,186925 (regressionFit = 71,186923, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,276036 (regressionFit = 71,276033, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,258979 (regressionFit = 71,258977, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,271037 (regressionFit = 71,271035, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,249384 (regressionFit = 71,249382, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,272033 (regressionFit = 71,272031, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.066150743711715 to score=0.0025 #egs=490.0
Comparing variance: 0.02550640428230796 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,066151)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,066151) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025506)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025506) into the LAST position (#2) in the search queue.

% Time for loop #1: 2,687 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -71,132588 (regressionFit = 71,132586, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 48 85 281 400 429 480
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,337943 (regressionFit = 32,337940, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,337943): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,383243 (regressionFit = 32,383240, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,402924 (regressionFit = 32,402921, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,407345 (regressionFit = 32,407342, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,413863 (regressionFit = 32,413860, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437499999999926 to score=0.0025 #egs=160.0
Comparing variance: 0.08617557550902699 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,086176)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,086176) into position #1 in the search queue (new size=2).

% Time for loop #2: 410 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -71,132588 (regressionFit = 71,132586, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 15 31 34 65 119 155 157 168 183
%     Score = -28,410076 (regressionFit = 28,410073, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,410076): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,410988 (regressionFit = 28,410985, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,414805 (regressionFit = 28,414802, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,419865 (regressionFit = 28,419862, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,432941 (regressionFit = 28,432938, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,437133 (regressionFit = 28,437130, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05208879585988694 to score=0.0025 #egs=18.0
Comparing variance: 0.08805280206876756 to score=0.0025 #egs=312.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 312,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,088053)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,088053) into position #1 in the search queue (new size=2).

% Time for loop #3: 309 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 18 positive examples, of which 18 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/312,0 pos, 0,0/0,0 neg]'
%     Score = -71,132588 (regressionFit = 71,132586, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 312,0/312,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 25 40 48 76 101 133 145 148 177 219
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 312,0/312,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 312,0/312,0 pos, 0,0/0,0 neg]
%     Score = -27,437556 (regressionFit = 27,437553, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,437556): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]
%     Score = -27,449872 (regressionFit = 27,449869, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 288,0/312,0 pos, 0,0/0,0 neg]
%     Score = -27,467262 (regressionFit = 27,467259, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 66,0/312,0 pos, 0,0/0,0 neg]
%     Score = -27,472469 (regressionFit = 27,472466, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 58,0/312,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 312,0/312,0 pos, 0,0/0,0 neg]
%     Score = -27,471161 (regressionFit = 27,471158, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 300,0/312,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 312,0/312,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 312,0/312,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,088.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07419493815429762 to score=0.0025 #egs=72.0
Comparing variance: 0.0920646553768018 to score=0.0025 #egs=240.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 240,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,092065)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 312,0/312,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,092065) into position #1 in the search queue (new size=2).

% Time for loop #4: 326 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/312,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 312,0/240,0 pos, 0,0/0,0 neg]'
%     Score = -71,132588 (regressionFit = 71,132586, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 240,0/240,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 26 42 86 122 164 181 191 192 195 214
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 240,0/240,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 240,0/240,0 pos, 0,0/0,0 neg]
%     Score = -22,062327 (regressionFit = 22,062324, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,062327): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]
%     Score = -22,079703 (regressionFit = 22,079700, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 56,0/240,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 240,0/240,0 pos, 0,0/0,0 neg]
%     Score = -22,067674 (regressionFit = 22,067671, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 234,0/240,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 240,0/240,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 240,0/240,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,092.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 250 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 216,0/240,0 pos, 0,0/0,0 neg]
% This clause covers 216 positive examples, of which 216 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 65 150 397 573 648 739 791 911

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661132 (regressionFit = 38,661131, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,661132): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709950 (regressionFit = 38,709949, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708258 (regressionFit = 38,708256, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,704227 (regressionFit = 38,704225, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,696657 (regressionFit = 38,696655, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,716128 (regressionFit = 38,716125, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,666624 (regressionFit = 38,666622, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,704842 (regressionFit = 38,704839, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,693394 (regressionFit = 38,693392, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,696657 (regressionFit = 38,696655, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,657402 (regressionFit = 38,657400, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,657402): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,711594 (regressionFit = 38,711592, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,693671 (regressionFit = 38,693669, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,716128 (regressionFit = 38,716125, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,693394 (regressionFit = 38,693392, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,704227 (regressionFit = 38,704225, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,718711 (regressionFit = 38,718709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,700341 (regressionFit = 38,700339, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,718711 (regressionFit = 38,718709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,661133 (regressionFit = 38,661131, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,657402 (regressionFit = 38,657400, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,657402): trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,709951 (regressionFit = 38,709949, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,666624 (regressionFit = 38,666622, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,717402 (regressionFit = 38,717400, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,708259 (regressionFit = 38,708256, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,715951 (regressionFit = 38,715949, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019672286346420962 to score=0.0025 #egs=1222.0
Comparing variance: 0.049384682011962874 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019672)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019672) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,049385)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,049385) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,814 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 52 76 148 190 241 267 281

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609421 (regressionFit = 14,609420, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,609421): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607320 (regressionFit = 14,607319, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,607320): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,617837 (regressionFit = 14,617835, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,586096 (regressionFit = 14,586094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,586096): trusts(A, B) :- knows(C, A), knows(B, C).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582101 (regressionFit = 14,582099, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,582101): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,616115 (regressionFit = 14,616113, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,579367 (regressionFit = 14,579365, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,579367): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,601479 (regressionFit = 14,601477, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582050 (regressionFit = 14,582048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,586096 (regressionFit = 14,586094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 6,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,617699 (regressionFit = 14,617697, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582101 (regressionFit = 14,582099, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,582050 (regressionFit = 14,582048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,617837 (regressionFit = 14,617835, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614049 (regressionFit = 14,614047, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609989 (regressionFit = 14,609987, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,614049 (regressionFit = 14,614047, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609422 (regressionFit = 14,609420, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,616115 (regressionFit = 14,616113, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,526131 (regressionFit = 14,526129, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,526131): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,607321 (regressionFit = 14,607319, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,609719 (regressionFit = 14,609717, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,049.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1517026482204727 to score=0.0025 #egs=10.0
Comparing variance: 0.04548637348298272 to score=0.0025 #egs=286.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 10,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,151703)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,151703) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 286,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,045486)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,045486) into position #2 in the search queue (new size=3).

% Time for loop #7: 389 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]'
%     Score = -14,526131 (regressionFit = 14,526129, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(A, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(A, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,341908 (regressionFit = 1,341905, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,341908): trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(C, A).  [covers 2,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(B, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(_, A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(_, A).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(_, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,152.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
Comparing variance: 0.00104067318717882 to score=0.0025 #egs=4.0
Comparing variance: 0.22295710780411512 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6,0 < 2.1 * minPosCov = 6,3

% Time for loop #8: 19 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon19561, B), knows(Anon19561, Anon19561))
Created a leaf under (trusts(A, B) :- knows(Anon18651, B), knows(B, Anon18651))

%%%%%  WILL-Produced Tree #5 @ 20:39:36 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.3092967441930752;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(A, A) )
%   | | then return 0.3210112447516258;  // std dev = 0,968, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( knows(B, C) )
%   | | | then return 0.2998607443022426;  // std dev = 2,311, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.27083038746484484;  // std dev = 4,594, 216,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=192 */
%   | | | | else return 0.31003130339100177;  // std dev = 0,979, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else if ( knows(E, B), knows(B, E) )
%   | then return 0.3142531100558733;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, B), knows(F, F) )
%   | | then if ( knows(B, G) )
%   | | | then return 0.36613813656310207;  // std dev = 0,065, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09601382672955427;  // std dev = 1,157, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.30150283936764555;  // std dev = 0,213, 286,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=272 */


% Clauses:

trusts(A, B, 0.3092967441930752) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.3210112447516258) :- 
     knows(A, C), 
     knows(C, C), 
     knows(A, A), 
     !. // Clause #2.

trusts(A, B, 0.2998607443022426) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #3.

trusts(A, B, 0.27083038746484484) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.31003130339100177) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.3142531100558733) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #6.

trusts(A, B, 0.36613813656310207) :- 
     knows(C, B), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #7.

trusts(A, B, 0.09601382672955427) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #8.

trusts(A, B, 0.30150283936764555) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.3092967441930752) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.3210112447516258) :-  /* #neg=1 #pos=17 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(a, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.2998607443022426) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar35),
   knows(uniqueVar35, uniqueVar35),
   knows(b, uniqueVar35),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.27083038746484484) :-  /* #neg=24 #pos=192 */ 
   knows(a, uniqueVar36),
   knows(uniqueVar36, uniqueVar36),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.31003130339100177) :-  /* #neg=1 #pos=23 */ 
   knows(a, uniqueVar37),
   knows(uniqueVar37, uniqueVar37),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.3142531100558733) :-  /* #neg=25 #pos=1.197 */ 
   knows(uniqueVar38, a),
   knows(a, uniqueVar38),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.36613813656310207) :-  /* #pos=4 */ 
   knows(uniqueVar39, a),
   knows(uniqueVar39, uniqueVar39),
   knows(a, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.09601382672955427) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar40, a),
   knows(uniqueVar40, uniqueVar40),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.30150283936764555) :-  /* #neg=14 #pos=272 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar35, uniqueVar35)
%   knows(uniqueVar37, uniqueVar37)
%   knows(a, uniqueVar38)
%   knows(a, uniqueVar33)
%   knows(a, uniqueVar34)
%   knows(a, uniqueVar35)
%   knows(a, a)
%   knows(uniqueVar38, a)
%   knows(uniqueVar36, uniqueVar36)
%   knows(uniqueVar39, uniqueVar39)
%   knows(uniqueVar40, a)
%   knows(a, underscore)
%   knows(b, a)
%   knows(a, uniqueVar36)
%   knows(uniqueVar39, a)
%   knows(a, uniqueVar37)
%   knows(uniqueVar33, uniqueVar33)
%   knows(b, uniqueVar35)
%   knows(uniqueVar34, uniqueVar34)
%   knows(b, underscore)
%   knows(uniqueVar40, uniqueVar40)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 5 trees is 55,555 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1517026482204727
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03545357425735327
Set score:0.0025

% Have these 10 positive seeds: 1 264 302 872 972 1196 1362 1399 1435 1533

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074596 (regressionFit = 71,074595, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,074596): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190778 (regressionFit = 71,190777, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158598 (regressionFit = 71,158597, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,183514 (regressionFit = 71,183512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,188073 (regressionFit = 71,188071, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,164644 (regressionFit = 71,164642, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,175265 (regressionFit = 71,175263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,151691 (regressionFit = 71,151689, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,115096 (regressionFit = 71,115094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,188073 (regressionFit = 71,188071, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,113048 (regressionFit = 71,113046, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,188673 (regressionFit = 71,188671, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,188842 (regressionFit = 71,188840, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,164644 (regressionFit = 71,164642, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,115096 (regressionFit = 71,115094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,183514 (regressionFit = 71,183512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,176468 (regressionFit = 71,176467, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,182755 (regressionFit = 71,182753, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,176468 (regressionFit = 71,176467, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,074597 (regressionFit = 71,074595, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,113048 (regressionFit = 71,113046, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,190779 (regressionFit = 71,190777, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,175265 (regressionFit = 71,175263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,185405 (regressionFit = 71,185403, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,158599 (regressionFit = 71,158597, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,185439 (regressionFit = 71,185437, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010114166162898225 to score=0.0025 #egs=584.0
Comparing variance: 0.04576399037428284 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010114)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010114) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045764)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045764) into position #1 in the search queue (new size=2).

% Time for loop #1: 2,645 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 35 170 313 323 358 538 738 756 905 922

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163262 (regressionFit = 65,163260, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,163262): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094190 (regressionFit = 65,094189, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,094190): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,121387 (regressionFit = 65,121385, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,085630 (regressionFit = 65,085628, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,085630): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,161446 (regressionFit = 65,161444, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,937669 (regressionFit = 64,937667, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,937669): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,081662 (regressionFit = 65,081660, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163262 (regressionFit = 65,163260, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,145111 (regressionFit = 65,145109, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,133819 (regressionFit = 65,133817, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,165739 (regressionFit = 65,165737, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,167300 (regressionFit = 65,167298, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,085630 (regressionFit = 65,085628, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163262 (regressionFit = 65,163260, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,145111 (regressionFit = 65,145109, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,121387 (regressionFit = 65,121385, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,164309 (regressionFit = 65,164307, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,039675 (regressionFit = 65,039673, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,162828 (regressionFit = 65,162826, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,164309 (regressionFit = 65,164307, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,133819 (regressionFit = 65,133817, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,163263 (regressionFit = 65,163260, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,161446 (regressionFit = 65,161444, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,152029 (regressionFit = 65,152027, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,094191 (regressionFit = 65,094189, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,160364 (regressionFit = 65,160362, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10290633344473132 to score=0.0025 #egs=140.0
Comparing variance: 0.03935419003925531 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,102906)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,102906) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039354)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039354) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,794 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -64,937669 (regressionFit = 64,937667, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 10 13 18 20 30 34 46 58 74 87
%     Score = -14,351908 (regressionFit = 14,351905, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,351908): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,176634 (regressionFit = 14,176631, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,176634): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,405710 (regressionFit = 14,405707, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,201138 (regressionFit = 14,201135, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,103.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07585428134667423 to score=0.0025 #egs=84.0
Comparing variance: 0.13937270141541153 to score=0.0025 #egs=56.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 56,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,139373)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,139373) into position #1 in the search queue (new size=3).

% Time for loop #3: 207 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 84 positive examples, of which 84 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/56,0 pos, 0,0/0,0 neg]'
%     Score = -64,937669 (regressionFit = 64,937667, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 6 10 25 28 29 44 46 47 48
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,644914 (regressionFit = 7,644911, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,644914): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,670647 (regressionFit = 7,670644, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,802861 (regressionFit = 7,802858, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
%     Score = -7,663996 (regressionFit = 7,663993, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,139.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
Comparing variance: 0.21304268966500348 to score=0.0025 #egs=6.0
Comparing variance: 0.1273330908410162 to score=0.0025 #egs=50.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 50,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,127333)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,127333) into position #1 in the search queue (new size=3).

% Time for loop #4: 89 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/56,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 56,0/50,0 pos, 0,0/0,0 neg]'
%     Score = -64,937669 (regressionFit = 64,937667, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 5 15 19 20 23 26 28 37 41
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -6,359654 (regressionFit = 6,359652, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,359654): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,127.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 80 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
% This clause covers 46 positive examples, of which 46 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 191 304 387 444 631 685 724 733 952 1221

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,529374): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491010 (regressionFit = 50,491009, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,491010): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,520075 (regressionFit = 50,520073, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,485926 (regressionFit = 50,485923, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,485926): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,505601 (regressionFit = 50,505599, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,482577 (regressionFit = 50,482575, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,482577): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,493102 (regressionFit = 50,493100, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529375 (regressionFit = 50,529372, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,470311 (regressionFit = 50,470309, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,470311): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,518143 (regressionFit = 50,518141, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,530685 (regressionFit = 50,530682, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,485926 (regressionFit = 50,485923, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529375 (regressionFit = 50,529372, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,493102 (regressionFit = 50,493100, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529374 (regressionFit = 50,529372, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,520075 (regressionFit = 50,520073, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,530613 (regressionFit = 50,530611, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,523174 (regressionFit = 50,523172, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,530613 (regressionFit = 50,530611, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,470311 (regressionFit = 50,470309, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,470311): trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,529375 (regressionFit = 50,529372, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,505601 (regressionFit = 50,505599, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,469266 (regressionFit = 50,469264, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,469266): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491011 (regressionFit = 50,491009, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,525148 (regressionFit = 50,525145, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,039.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.028458694545836678 to score=0.0025 #egs=268.0
Comparing variance: 0.04216765140300512 to score=0.0025 #egs=1016.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 268,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,028459)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,028459) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.016,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,042168)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,042168) into position #1 in the search queue (new size=3).

% Time for loop #6: 1,679 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 268 positive examples, of which 268 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 0 93 110 176 214 355 732 748

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827641 (regressionFit = 42,827640, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,827641): trusts(_, A) :- knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725093 (regressionFit = 42,725092, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,725093): trusts(A, _) :- knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,814826 (regressionFit = 42,814824, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 672,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,835841 (regressionFit = 42,835839, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 132,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,727640 (regressionFit = 42,727638, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 692,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,840742 (regressionFit = 42,840740, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 270,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,709344 (regressionFit = 42,709342, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -42,709344): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,829440 (regressionFit = 42,829438, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 326,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,835841 (regressionFit = 42,835839, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 132,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,814306 (regressionFit = 42,814304, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 690,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,767235 (regressionFit = 42,767233, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 98,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,836955 (regressionFit = 42,836952, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 850,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,727640 (regressionFit = 42,727638, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 692,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,829440 (regressionFit = 42,829438, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 326,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,814826 (regressionFit = 42,814824, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 672,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827208 (regressionFit = 42,827206, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 346,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,825657 (regressionFit = 42,825655, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.004,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827208 (regressionFit = 42,827206, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 346,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,814306 (regressionFit = 42,814304, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 690,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,827642 (regressionFit = 42,827640, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 860,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,840742 (regressionFit = 42,840740, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 270,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,725094 (regressionFit = 42,725092, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 828,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.016,0/1.016,0 pos, 0,0/0,0 neg]
%     Score = -42,835073 (regressionFit = 42,835071, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.008,0/1.016,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,042.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05123596752178757 to score=0.0025 #egs=814.0
Comparing variance: 0.0049666534092275075 to score=0.0025 #egs=202.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 814,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,051236)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,051236) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 202,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,004967)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,004967) into the LAST position (#4) in the search queue.

% Time for loop #7: 897 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/1.016,0 pos, 0,0/0,0 neg]
% This clause covers 814 positive examples, of which 814 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]'
%     Score = -42,709344 (regressionFit = 42,709342, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 69 108 303 335 347 384 466 808
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,691033 (regressionFit = 41,691030, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 672,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,691033): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 672,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,697179 (regressionFit = 41,697176, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 566,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,682469 (regressionFit = 41,682466, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 132,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,682469): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 132,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,678612 (regressionFit = 41,678610, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 332,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,678612): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 332,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,686077 (regressionFit = 41,686074, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 680,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,683008 (regressionFit = 41,683005, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 268,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,696615 (regressionFit = 41,696612, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 808,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,476133 (regressionFit = 41,476130, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -41,476133): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,694759 (regressionFit = 41,694756, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 726,0/814,0 pos, 0,0/0,0 neg]
%     Score = -41,633001 (regressionFit = 41,632998, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 308,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 814,0/814,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 812,0/814,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,051.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 1,478 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 496,0/814,0 pos, 0,0/0,0 neg]
% This clause covers 496 positive examples, of which 496 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon22909, B), knows(Anon22909, Anon22909))
Created a leaf under (trusts(A, B) :- knows(B, A))
Created a leaf under (trusts(A, B) :- knows(Anon23701, A), knows(Anon23773, Anon23701))

%%%%%  WILL-Produced Tree #6 @ 20:39:48 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.2528620139473843;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(A, C) )
%   | | then return 0.23071620615610638;  // std dev = 2,524, 84,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.006350087912386337;  // std dev = 1,131, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( knows(B, D) )
%   | | | | then return 0.16993825305415694;  // std dev = 2,390, 46,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=39 */
%   | | | | else return 0.12631488841440536;  // std dev = 0,804, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( knows(E, B), knows(E, E) )
%   | | then return 0.25378879007686156;  // std dev = 0,169, 268,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=260 */
%   | | else if ( knows(F, A), knows(G, F) )
%   | | | then if ( knows(G, A) )
%   | | | | then return 0.21759969005703103;  // std dev = 5,886, 496,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=458 */
%   | | | | else return 0.2520483122308113;  // std dev = 2,613, 318,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=311 */
%   | | | else return 0.2597238406698664;  // std dev = 0,070, 202,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=201 */


% Clauses:

trusts(A, B, 0.2528620139473843) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.23071620615610638) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #2.

trusts(A, B, -0.006350087912386337) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.16993825305415694) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #4.

trusts(A, B, 0.12631488841440536) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.25378879007686156) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.21759969005703103) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.2520483122308113) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.2597238406698664) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.2528620139473843) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, underscore, 0.23071620615610638) :-  /* #neg=7 #pos=77 */ 
   knows(uniqueVar41, a),
   knows(uniqueVar41, uniqueVar41),
   knows(a, uniqueVar41),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.006350087912386337) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar42, a),
   knows(uniqueVar42, uniqueVar42),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.16993825305415694) :-  /* #neg=7 #pos=39 */ 
   knows(uniqueVar43, a),
   knows(uniqueVar43, uniqueVar43),
   knows(b, underscore),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.12631488841440536) :-  /* #neg=1 #pos=3 */ 
   knows(uniqueVar44, a),
   knows(uniqueVar44, uniqueVar44),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.25378879007686156) :-  /* #neg=8 #pos=260 */ 
   knows(uniqueVar45, a),
   knows(uniqueVar45, uniqueVar45),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.21759969005703103) :-  /* #neg=38 #pos=458 */ 
   knows(uniqueVar46, a),
   knows(uniqueVar47, uniqueVar46),
   knows(uniqueVar47, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.2520483122308113) :-  /* #neg=7 #pos=311 */ 
   knows(uniqueVar48, a),
   knows(underscore, uniqueVar48),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2597238406698664) :-  /* #neg=1 #pos=201 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar43, a)
%   knows(uniqueVar47, a)
%   knows(a, uniqueVar41)
%   knows(uniqueVar42, uniqueVar42)
%   knows(uniqueVar41, uniqueVar41)
%   knows(uniqueVar42, a)
%   knows(uniqueVar48, a)
%   knows(underscore, uniqueVar48)
%   knows(uniqueVar44, a)
%   knows(uniqueVar43, uniqueVar43)
%   knows(uniqueVar47, uniqueVar46)
%   knows(b, a)
%   knows(uniqueVar45, uniqueVar45)
%   knows(uniqueVar46, a)
%   knows(b, b)
%   knows(uniqueVar45, a)
%   knows(uniqueVar44, uniqueVar44)
%   knows(uniqueVar41, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 6 trees is 1 minutes and 7,106 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.05123596752178756
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03532668405126806
Set score:0.0025

% Have these 7 positive seeds: 121 183 500 686 824 1181 1654

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -70,925980 (regressionFit = 70,925979, penalties=1.12E-6) for clause:  trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,925980): trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828250 (regressionFit = 70,828249, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,828250): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935947 (regressionFit = 70,935946, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913756 (regressionFit = 70,913755, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,933304 (regressionFit = 70,933302, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,931054 (regressionFit = 70,931052, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,915308 (regressionFit = 70,915306, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914762 (regressionFit = 70,914760, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873949 (regressionFit = 70,873947, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,908312 (regressionFit = 70,908310, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(A, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(A, _).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,923326 (regressionFit = 70,923324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, _).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(_, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(_, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,923326 (regressionFit = 70,923324, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, A).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,860038 (regressionFit = 70,860037, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,931054 (regressionFit = 70,931052, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,861487 (regressionFit = 70,861485, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,934533 (regressionFit = 70,934531, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,934450 (regressionFit = 70,934448, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,915308 (regressionFit = 70,915306, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,860038 (regressionFit = 70,860037, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,933304 (regressionFit = 70,933302, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,920448 (regressionFit = 70,920446, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,791494 (regressionFit = 70,791492, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,791494): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925897 (regressionFit = 70,925895, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,925981 (regressionFit = 70,925979, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,920448 (regressionFit = 70,920446, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,828251 (regressionFit = 70,828249, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,861487 (regressionFit = 70,861485, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935948 (regressionFit = 70,935946, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914762 (regressionFit = 70,914760, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,933720 (regressionFit = 70,933718, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,913757 (regressionFit = 70,913755, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,931465 (regressionFit = 70,931463, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06565181439616143 to score=0.0025 #egs=490.0
Comparing variance: 0.025442755841576622 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065652)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065652) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025443)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025443) into the LAST position (#2) in the search queue.

% Time for loop #1: 2,634 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,791494 (regressionFit = 70,791492, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 25 63 87 96 110 118 187 193 282 448
%     Score = -32,169066 (regressionFit = 32,169063, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,169066): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,100232 (regressionFit = 32,100229, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,100232): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,145096 (regressionFit = 32,145093, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,156769 (regressionFit = 32,156766, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,110878 (regressionFit = 32,110875, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,166198 (regressionFit = 32,166196, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,169027 (regressionFit = 32,169024, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024375000000000126 to score=0.0025 #egs=160.0
Comparing variance: 0.08545523912457488 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085455)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085455) into position #1 in the search queue (new size=2).

% Time for loop #2: 191 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,791494 (regressionFit = 70,791492, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 26 41 49 76 140 142 172 207 221 277
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,180256 (regressionFit = 28,180253, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,180256): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,175313 (regressionFit = 28,175310, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,175313): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,186329 (regressionFit = 28,186326, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,200133 (regressionFit = 28,200130, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,085.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08951767953055612 to score=0.0025 #egs=304.0
Comparing variance: 0.036997524614562724 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036998)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036998) into position #1 in the search queue (new size=2).

% Time for loop #3: 136 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,791494 (regressionFit = 70,791492, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 2 6 7 8 12 21 23 24
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,959273 (regressionFit = 0,959270, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,959273): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 7.893136381442734E-7 to score=0.0025 #egs=6.0
Comparing variance: 0.047963285076200006 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047963)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047963) into position #1 in the search queue (new size=2).

% Time for loop #4: 20 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -70,791494 (regressionFit = 70,791492, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 6 7 8 9 10
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -70,7915):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon25033, A))

% Have these 10 positive seeds: 68 141 345 472 551 665 711 737 826 948

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561731 (regressionFit = 38,561730, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,561731): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617336 (regressionFit = 38,617335, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613975 (regressionFit = 38,613974, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,602819 (regressionFit = 38,602817, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,598328 (regressionFit = 38,598326, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619267 (regressionFit = 38,619265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562948 (regressionFit = 38,562946, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,611064 (regressionFit = 38,611062, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,597488 (regressionFit = 38,597486, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,598328 (regressionFit = 38,598326, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,570390 (regressionFit = 38,570388, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613466 (regressionFit = 38,613464, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,604218 (regressionFit = 38,604216, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619267 (regressionFit = 38,619265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,597488 (regressionFit = 38,597486, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,602819 (regressionFit = 38,602817, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,622096 (regressionFit = 38,622094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,608024 (regressionFit = 38,608022, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,622096 (regressionFit = 38,622094, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561732 (regressionFit = 38,561730, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,570390 (regressionFit = 38,570388, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,617337 (regressionFit = 38,617335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562948 (regressionFit = 38,562946, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,621451 (regressionFit = 38,621449, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,613976 (regressionFit = 38,613974, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,619233 (regressionFit = 38,619231, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221075862 to score=0.0025 #egs=424.0
Comparing variance: 0.03342885175939591 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033429)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033429) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,496 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 34 121 213 232 409 433 677 746 865 959

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570767 (regressionFit = 36,570766, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,570767): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544372 (regressionFit = 36,544370, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,544372): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544372 (regressionFit = 36,544370, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,568775 (regressionFit = 36,568773, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,571106 (regressionFit = 36,571104, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,548852 (regressionFit = 36,548850, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,542750 (regressionFit = 36,542748, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,542750): trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570396 (regressionFit = 36,570394, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 32,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,538019 (regressionFit = 36,538017, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,538019): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,571106 (regressionFit = 36,571104, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,545626 (regressionFit = 36,545624, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,548898 (regressionFit = 36,548896, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,564015 (regressionFit = 36,564013, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,548852 (regressionFit = 36,548850, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544372 (regressionFit = 36,544370, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,568775 (regressionFit = 36,568773, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,561976 (regressionFit = 36,561974, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,560331 (regressionFit = 36,560328, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,561976 (regressionFit = 36,561974, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,545626 (regressionFit = 36,545624, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570768 (regressionFit = 36,570766, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,542750 (regressionFit = 36,542748, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,570480 (regressionFit = 36,570478, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,544373 (regressionFit = 36,544370, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,566967 (regressionFit = 36,566965, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,033.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04046790092397227 to score=0.0025 #egs=834.0
Comparing variance: 0.01072226046644246 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040468)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040468) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,010722)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,010722) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,797 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,538019 (regressionFit = 36,538017, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 20 29 102 262 346 494 661
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,684439 (regressionFit = 33,684436, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,684439): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,728792 (regressionFit = 33,728789, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,747746 (regressionFit = 33,747743, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,742873 (regressionFit = 33,742871, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,748696 (regressionFit = 33,748693, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,700246 (regressionFit = 33,700243, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,750130 (regressionFit = 33,750127, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,743333 (regressionFit = 33,743330, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,704704 (regressionFit = 33,704701, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,750211 (regressionFit = 33,750208, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,733602 (regressionFit = 33,733599, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,747816 (regressionFit = 33,747813, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03864493590721207 to score=0.0025 #egs=680.0
Comparing variance: 0.04809012735788082 to score=0.0025 #egs=154.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 154,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,048090)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,048090) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,557 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 680 positive examples, of which 680 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/154,0 pos, 0,0/0,0 neg]'
%     Score = -36,538019 (regressionFit = 36,538017, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 154,0/154,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 14 44 54 60 67 69 73 100 106
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,281530 (regressionFit = 7,281527, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 38,0/154,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,281530): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 38,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,399506 (regressionFit = 7,399503, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 128,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,399558 (regressionFit = 7,399555, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 32,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,386530 (regressionFit = 7,386528, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 146,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,097317 (regressionFit = 7,097314, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,097317): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,334080 (regressionFit = 7,334077, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 64,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,389965 (regressionFit = 7,389962, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 24,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 154,0/154,0 pos, 0,0/0,0 neg]
%     Score = -7,398225 (regressionFit = 7,398222, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 150,0/154,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,048.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 244 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 32,0/154,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon27675, A), knows(Anon27747, Anon27675))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #7 @ 20:39:59 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.19753162989823886;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.1696560256848118;  // std dev = 5,217, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.22039588848602246;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19636547947076466;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.2103497634951518;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(A, E) )
%   | | | then return 0.19744702497117603;  // std dev = 5,126, 680,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=652 */
%   | | | else if ( knows(F, A) )
%   | | | | then return 0.08715498681431083;  // std dev = 2,052, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   | | | | else return 0.19748125922373633;  // std dev = 1,698, 122,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=119 */
%   | | else return 0.2061520143844708;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.19753162989823886) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1696560256848118) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.22039588848602246) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.19636547947076466) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.2103497634951518) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.19744702497117603) :- 
     knows(C, A), 
     knows(D, C), 
     knows(A, C), 
     !. // Clause #6.

trusts(A, B, 0.08715498681431083) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.19748125922373633) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.2061520143844708) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.19753162989823886) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar49),
   knows(uniqueVar49, uniqueVar49),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.1696560256848118) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar50),
   knows(uniqueVar50, uniqueVar50),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.22039588848602246) :-  /* #pos=6 */ 
   knows(a, uniqueVar51),
   knows(uniqueVar51, uniqueVar51),
   knows(uniqueVar51, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.19636547947076466) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar52),
   knows(uniqueVar52, uniqueVar52),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.2103497634951518) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.19744702497117603) :-  /* #neg=28 #pos=652 */ 
   knows(uniqueVar53, a),
   knows(underscore, uniqueVar53),
   knows(a, uniqueVar53),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.08715498681431083) :-  /* #neg=5 #pos=27 */ 
   knows(uniqueVar54, a),
   knows(uniqueVar55, uniqueVar54),
   knows(uniqueVar55, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.19748125922373633) :-  /* #neg=3 #pos=119 */ 
   knows(uniqueVar56, a),
   knows(underscore, uniqueVar56),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2061520143844708) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar55, a)
%   knows(uniqueVar54, a)
%   knows(uniqueVar52, uniqueVar52)
%   knows(uniqueVar56, a)
%   knows(a, uniqueVar50)
%   knows(uniqueVar51, uniqueVar51)
%   knows(uniqueVar55, uniqueVar54)
%   knows(uniqueVar51, a)
%   knows(uniqueVar53, a)
%   knows(b, a)
%   knows(a, uniqueVar52)
%   knows(a, uniqueVar49)
%   knows(underscore, uniqueVar53)
%   knows(a, uniqueVar53)
%   knows(underscore, uniqueVar56)
%   knows(a, uniqueVar51)
%   knows(uniqueVar50, uniqueVar50)
%   knows(uniqueVar49, uniqueVar49)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 7 trees is 1 minutes and 18,255 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04809012735788081
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035308229736769114
Set score:0.0025

% Have these 9 positive seeds: 137 594 931 1526 1781 1908 1916 1959 1996

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794073 (regressionFit = 70,794072, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,794073): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898804 (regressionFit = 70,898803, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876840 (regressionFit = 70,876838, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876840 (regressionFit = 70,876838, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,891329 (regressionFit = 70,891327, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,894338 (regressionFit = 70,894336, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881232 (regressionFit = 70,881230, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,878029 (regressionFit = 70,878027, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,832433 (regressionFit = 70,832431, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,871456 (regressionFit = 70,871454, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,820917 (regressionFit = 70,820915, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,894338 (regressionFit = 70,894336, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,813195 (regressionFit = 70,813193, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,896824 (regressionFit = 70,896822, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,895778 (regressionFit = 70,895776, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881232 (regressionFit = 70,881230, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876840 (regressionFit = 70,876838, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,820917 (regressionFit = 70,820915, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,891329 (regressionFit = 70,891327, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,884333 (regressionFit = 70,884331, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,765011 (regressionFit = 70,765009, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,765011): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,889362 (regressionFit = 70,889360, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,884333 (regressionFit = 70,884331, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,794074 (regressionFit = 70,794072, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,813195 (regressionFit = 70,813193, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898805 (regressionFit = 70,898803, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,878029 (regressionFit = 70,878027, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,895602 (regressionFit = 70,895600, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,876841 (regressionFit = 70,876838, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,894521 (regressionFit = 70,894519, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06572919021093207 to score=0.0025 #egs=490.0
Comparing variance: 0.025400333184862046 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065729)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065729) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025400)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025400) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,881 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,765011 (regressionFit = 70,765009, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 65 186 263 278 315 366 451 457 469
%     Score = -32,207034 (regressionFit = 32,207031, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,207034): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,137513 (regressionFit = 32,137510, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,137513): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,206186 (regressionFit = 32,206183, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,182115 (regressionFit = 32,182112, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,197378 (regressionFit = 32,197375, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,148464 (regressionFit = 32,148461, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,203828 (regressionFit = 32,203825, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,207087 (regressionFit = 32,207084, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024374999999999935 to score=0.0025 #egs=160.0
Comparing variance: 0.08556821316939177 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085568)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085568) into position #1 in the search queue (new size=2).

% Time for loop #2: 461 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,765011 (regressionFit = 70,765009, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 3 45 82 100 116 134 299
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,236239 (regressionFit = 28,236236, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,236239): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,216438 (regressionFit = 28,216435, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,216438): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,235551 (regressionFit = 28,235548, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,237306 (regressionFit = 28,237303, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08965770618767217 to score=0.0025 #egs=304.0
Comparing variance: 0.03694202645691974 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036942)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036942) into position #1 in the search queue (new size=2).

% Time for loop #3: 310 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,765011 (regressionFit = 70,765009, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 7 10 11 16 17 18 20 21 23
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,958037 (regressionFit = 0,958034, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,958037): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 6.069239612271904E-7 to score=0.0025 #egs=6.0
Comparing variance: 0.04790153652644134 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047902)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047902) into position #1 in the search queue (new size=2).

% Time for loop #4: 43 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -70,765011 (regressionFit = 70,765009, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 1 5 9 15 16 18 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -70,7650):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon29355, A))

% Have these 10 positive seeds: 17 20 72 135 170 185 294 724 823 899

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500528 (regressionFit = 38,500527, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,500528): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551116 (regressionFit = 38,551115, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549378 (regressionFit = 38,549377, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547784 (regressionFit = 38,547782, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,535352 (regressionFit = 38,535351, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,555474 (regressionFit = 38,555472, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500549 (regressionFit = 38,500547, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,556395 (regressionFit = 38,556393, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,546435 (regressionFit = 38,546433, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,533735 (regressionFit = 38,533733, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,535352 (regressionFit = 38,535351, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,497718 (regressionFit = 38,497716, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,497718): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549740 (regressionFit = 38,549738, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,536428 (regressionFit = 38,536426, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,555474 (regressionFit = 38,555472, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,533735 (regressionFit = 38,533733, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547784 (regressionFit = 38,547782, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,557661 (regressionFit = 38,557659, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,544401 (regressionFit = 38,544399, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,557661 (regressionFit = 38,557659, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500529 (regressionFit = 38,500527, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,497718 (regressionFit = 38,497716, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,497718): trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,551117 (regressionFit = 38,551115, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,500549 (regressionFit = 38,500547, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,556689 (regressionFit = 38,556687, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,549379 (regressionFit = 38,549377, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,554871 (regressionFit = 38,554869, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019596909267228596 to score=0.0025 #egs=1222.0
Comparing variance: 0.049156395080399914 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019597)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019597) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,049156)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,049156) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,796 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 5 positive seeds: 23 29 190 228 290

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539035 (regressionFit = 14,539034, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,539035): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538260 (regressionFit = 14,538259, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,538260): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,549908 (regressionFit = 14,549906, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,508800 (regressionFit = 14,508798, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,508800): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,547139 (regressionFit = 14,547137, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,532265 (regressionFit = 14,532263, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,513155 (regressionFit = 14,513153, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,549546 (regressionFit = 14,549543, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,508800 (regressionFit = 14,508798, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,508800): trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,513155 (regressionFit = 14,513153, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,549908 (regressionFit = 14,549906, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,545373 (regressionFit = 14,545371, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,545579 (regressionFit = 14,545577, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,545373 (regressionFit = 14,545371, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,539036 (regressionFit = 14,539034, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,547139 (regressionFit = 14,547137, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,538261 (regressionFit = 14,538259, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,542108 (regressionFit = 14,542106, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,049.
% Will extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06470036549700203 to score=0.0025 #egs=126.0
Comparing variance: 0.037391479653627095 to score=0.0025 #egs=170.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 126,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,064700)
%         ILP node to extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,064700) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,037391)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,037391) into position #2 in the search queue (new size=3).

% Time for loop #7: 352 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 126 positive examples, of which 126 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]'
%     Score = -14,508800 (regressionFit = 14,508798, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 4 11 12 26 41 53 66 67 78 105
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,132014 (regressionFit = 8,132011, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,132014): trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 30,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,144762 (regressionFit = 8,144759, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 102,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(B, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,152248 (regressionFit = 8,152245, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 24,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,007706 (regressionFit = 8,007703, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,007706): trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,152233 (regressionFit = 8,152230, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, B).  [covers 26,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,059622 (regressionFit = 8,059619, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 50,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,150865 (regressionFit = 8,150862, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, C).  [covers 10,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, _).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, A).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, B).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(_, C).  [covers 126,0/126,0 pos, 0,0/0,0 neg]
%     Score = -8,143084 (regressionFit = 8,143081, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(_, C).  [covers 122,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,065.
% Will extend: trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05928373486309009 to score=0.0025 #egs=122.0
Comparing variance: 0.19377172792874348 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4,0 < 2.1 * minPosCov = 6,3

% Time for loop #8: 101 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 122,0/126,0 pos, 0,0/0,0 neg]
% This clause covers 122 positive examples, of which 122 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 5 positive seeds: 34 39 117 138 165

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342546 (regressionFit = 6,342545, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,342546): trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355316 (regressionFit = 6,355315, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 2,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,345022 (regressionFit = 6,345020, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,346002 (regressionFit = 6,346000, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,347686 (regressionFit = 6,347684, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,354795 (regressionFit = 6,354793, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 120,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 2,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,346002 (regressionFit = 6,346000, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 94,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,344500 (regressionFit = 6,344498, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 156,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,342547 (regressionFit = 6,342545, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,347686 (regressionFit = 6,347684, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,355317 (regressionFit = 6,355315, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 122,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -6,352723 (regressionFit = 6,352721, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 162,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
Comparing variance: 5.124106267500723E-17 to score=0.0025 #egs=26.0
Comparing variance: 0.04404545277365482 to score=0.0025 #egs=144.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 144,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,044045)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,044045) into position #1 in the search queue (new size=2).

% Time for loop #9: 184 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(_, A) :- knows(A, _).  [covers 26,0/170,0 pos, 0,0/0,0 neg]
% This clause covers 26 positive examples, of which 26 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon33023))
Created a leaf under (trusts(A, B) :- knows(Anon31017, B), knows(B, Anon31017))

%%%%%  WILL-Produced Tree #8 @ 20:40:10 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.16523170173133436;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.13744467757570367;  // std dev = 5,221, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.18486080437876143;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16178191593963195;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(B, E) )
%   | then return 0.17019951526128427;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(B, F), knows(G, A) )
%   | | then if ( knows(F, H) )
%   | | | then return 0.1467126028814781;  // std dev = 2,689, 122,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=114 */
%   | | | else return -0.04647294157747606;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( knows(B, I) )
%   | | | then return 0.1858874218174088;  // std dev = 3,65e-08, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.16066894223846215;  // std dev = 0,210, 144,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=137 */


% Clauses:

trusts(A, B, 0.16523170173133436) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.13744467757570367) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.18486080437876143) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.16178191593963195) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.17019951526128427) :- 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #5.

trusts(A, B, 0.1467126028814781) :- 
     knows(B, C), 
     knows(D, A), 
     knows(C, E), 
     !. // Clause #6.

trusts(A, B, -0.04647294157747606) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.1858874218174088) :- 
     knows(B, C), 
     !. // Clause #8.

trusts(A, B, 0.16066894223846215) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.16523170173133436) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar57),
   knows(uniqueVar57, uniqueVar57),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.13744467757570367) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar58),
   knows(uniqueVar58, uniqueVar58),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.18486080437876143) :-  /* #pos=6 */ 
   knows(a, uniqueVar59),
   knows(uniqueVar59, uniqueVar59),
   knows(uniqueVar59, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.16178191593963195) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar60),
   knows(uniqueVar60, uniqueVar60),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.17019951526128427) :-  /* #neg=25 #pos=1.197 */ 
   knows(uniqueVar61, a),
   knows(a, uniqueVar61),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.1467126028814781) :-  /* #neg=8 #pos=114 */ 
   knows(b, uniqueVar62),
   knows(underscore, a),
   knows(uniqueVar62, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, -0.04647294157747606) :-  /* #neg=1 #pos=3 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #7.

flattened_trusts(underscore, a, 0.1858874218174088) :-  /* #pos=26 */ 
   knows(a, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.16066894223846215) :-  /* #neg=7 #pos=137 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar59)
%   knows(a, uniqueVar60)
%   knows(uniqueVar59, uniqueVar59)
%   knows(uniqueVar62, underscore)
%   knows(b, uniqueVar62)
%   knows(a, uniqueVar58)
%   knows(uniqueVar60, uniqueVar60)
%   knows(uniqueVar58, uniqueVar58)
%   knows(a, underscore)
%   knows(uniqueVar59, a)
%   knows(b, a)
%   knows(underscore, a)
%   knows(uniqueVar57, uniqueVar57)
%   knows(a, uniqueVar61)
%   knows(a, uniqueVar57)
%   knows(uniqueVar61, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 8 trees is 1 minutes and 28,738 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03739147965362706
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:3 seconds
No hidden examples for : trusts
Time to build dataset: 3 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035327782426017126
Set score:0.0025

% Have these 10 positive seeds: 186 273 302 488 506 714 771 893 978 1225

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821866 (regressionFit = 70,821865, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,821866): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937739 (regressionFit = 70,937738, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914508 (regressionFit = 70,914507, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,929828 (regressionFit = 70,929826, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,933718 (regressionFit = 70,933716, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,921441 (regressionFit = 70,921438, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,918707 (regressionFit = 70,918705, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,908535 (regressionFit = 70,908533, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,859832 (regressionFit = 70,859831, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,933718 (regressionFit = 70,933716, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,856313 (regressionFit = 70,856310, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,935807 (regressionFit = 70,935805, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,934999 (regressionFit = 70,934997, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,921441 (regressionFit = 70,921438, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,859832 (regressionFit = 70,859831, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,929828 (regressionFit = 70,929826, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,924458 (regressionFit = 70,924456, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,811469 (regressionFit = 70,811467, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,811469): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,928281 (regressionFit = 70,928279, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,924458 (regressionFit = 70,924456, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,821867 (regressionFit = 70,821865, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,856313 (regressionFit = 70,856310, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,937740 (regressionFit = 70,937738, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,918707 (regressionFit = 70,918705, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,934659 (regressionFit = 70,934657, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914509 (regressionFit = 70,914507, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,934168 (regressionFit = 70,934166, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0657977375479218 to score=0.0025 #egs=490.0
Comparing variance: 0.0254088111058273 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065798)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065798) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025409)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025409) into the LAST position (#2) in the search queue.

% Time for loop #1: 4,040 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,811469 (regressionFit = 70,811467, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 24 79 105 124 139 147 170 222 230 289
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,170650 (regressionFit = 32,170647, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,170650): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,215053 (regressionFit = 32,215050, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,232593 (regressionFit = 32,232590, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,181731 (regressionFit = 32,181729, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,237194 (regressionFit = 32,237191, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,240766 (regressionFit = 32,240763, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.02437500000000025 to score=0.0025 #egs=160.0
Comparing variance: 0.0856686286339345 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085669)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085669) into position #1 in the search queue (new size=2).

% Time for loop #2: 454 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,811469 (regressionFit = 70,811467, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 16 44 89 155 165 198 205 268
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,248955 (regressionFit = 28,248952, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,248955): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,251973 (regressionFit = 28,251970, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,256479 (regressionFit = 28,256476, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,268483 (regressionFit = 28,268480, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,270326 (regressionFit = 28,270323, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07270781112745368 to score=0.0025 #egs=72.0
Comparing variance: 0.0892015107765838 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,089202)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,089202) into position #1 in the search queue (new size=2).

% Time for loop #3: 325 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -70,811469 (regressionFit = 70,811467, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 28 121 146 192 226 254
%     Score = -22,989473 (regressionFit = 22,989470, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,989473): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,987956 (regressionFit = 22,987953, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,987956): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,982007 (regressionFit = 22,982004, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,982007): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -23,011403 (regressionFit = 23,011400, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 24,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,982369 (regressionFit = 22,982366, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07392352937521321 to score=0.0025 #egs=74.0
Comparing variance: 0.09517207904167717 to score=0.0025 #egs=184.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 184,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,095172)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,095172) into position #1 in the search queue (new size=2).

% Time for loop #4: 250 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 74 positive examples, of which 74 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/184,0 pos, 0,0/0,0 neg]'
%     Score = -70,811469 (regressionFit = 70,811467, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 33 37 40 44 68 74 76 105 108 120
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -17,488880 (regressionFit = 17,488877, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 164,0/184,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,488880): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 164,0/184,0 pos, 0,0/0,0 neg]
%     Score = -17,489220 (regressionFit = 17,489217, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 6,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -17,485712 (regressionFit = 17,485709, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,485712): trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 184,0/184,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,095.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 221 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 178,0/184,0 pos, 0,0/0,0 neg]
% This clause covers 178 positive examples, of which 178 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 98 160 253 432 482 603 734 740 868 947

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503920 (regressionFit = 38,503919, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,503920): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561017 (regressionFit = 38,561016, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561662 (regressionFit = 38,561660, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,548749 (regressionFit = 38,548747, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,568360 (regressionFit = 38,568358, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,517016 (regressionFit = 38,517014, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,567696 (regressionFit = 38,567694, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,557575 (regressionFit = 38,557573, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547734 (regressionFit = 38,547732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562860 (regressionFit = 38,562857, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,548749 (regressionFit = 38,548747, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,515683 (regressionFit = 38,515681, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,550436 (regressionFit = 38,550434, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,568360 (regressionFit = 38,568358, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562860 (regressionFit = 38,562857, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547734 (regressionFit = 38,547732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562859 (regressionFit = 38,562857, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561662 (regressionFit = 38,561660, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,570358 (regressionFit = 38,570356, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,556978 (regressionFit = 38,556976, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,570358 (regressionFit = 38,570356, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,503921 (regressionFit = 38,503919, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,515683 (regressionFit = 38,515681, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,562860 (regressionFit = 38,562857, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,517016 (regressionFit = 38,517014, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,569715 (regressionFit = 38,569713, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,561018 (regressionFit = 38,561016, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,568012 (regressionFit = 38,568010, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221075338 to score=0.0025 #egs=424.0
Comparing variance: 0.03337600858092331 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033376)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033376) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,695 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 248 400 594 701 814 968 985 1064

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512017 (regressionFit = 36,512016, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,512017): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482677 (regressionFit = 36,482676, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,482677): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513337 (regressionFit = 36,513335, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513288 (regressionFit = 36,513286, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,491611 (regressionFit = 36,491609, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,490690 (regressionFit = 36,490688, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,475301 (regressionFit = 36,475299, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,475301): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513069 (regressionFit = 36,513067, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513288 (regressionFit = 36,513286, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,486776 (regressionFit = 36,486774, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,492082 (regressionFit = 36,492080, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,505206 (regressionFit = 36,505204, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,491611 (regressionFit = 36,491609, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513069 (regressionFit = 36,513067, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,513337 (regressionFit = 36,513335, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,499145 (regressionFit = 36,499143, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,503095 (regressionFit = 36,503093, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,499145 (regressionFit = 36,499143, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,486776 (regressionFit = 36,486774, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512018 (regressionFit = 36,512016, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,490690 (regressionFit = 36,490688, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,512370 (regressionFit = 36,512368, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,482678 (regressionFit = 36,482676, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,509460 (regressionFit = 36,509458, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,033.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.040361453152491775 to score=0.0025 #egs=834.0
Comparing variance: 0.010822488328064747 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040361)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040361) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,010822)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,010822) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,887 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,475301 (regressionFit = 36,475299, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 48 50 202 237 247 269 307 312 327 367
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,623960 (regressionFit = 33,623957, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,623960): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,651066 (regressionFit = 33,651063, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,660123 (regressionFit = 33,660120, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,657688 (regressionFit = 33,657685, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,660932 (regressionFit = 33,660929, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,617242 (regressionFit = 33,617239, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,617242): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,657782 (regressionFit = 33,657779, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,653826 (regressionFit = 33,653824, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,590254 (regressionFit = 33,590251, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,590254): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,660563 (regressionFit = 33,660560, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,639484 (regressionFit = 33,639481, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,658607 (regressionFit = 33,658604, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.055898050463756184 to score=0.0025 #egs=480.0
Comparing variance: 0.01909374760640163 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019094)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019094) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,281 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon36491, A))
Created a leaf under (trusts(A, B) :- knows(Anon36419, A), knows(Anon36491, Anon36419))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #9 @ 20:40:24 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.14107042029196;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.13088699212712515;  // std dev = 2,288, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.12881258203205018;  // std dev = 2,339, 74,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=68 */
%   | | | else if ( knows(D, A) )
%   | | | | then return 0.10637437699355067;  // std dev = 4,081, 178,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=159 */
%   | | | | else return 0.03950524052476617;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( knows(B, A) )
%   | then return 0.15301519359930382;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.12701783326899266;  // std dev = 5,180, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else return 0.14571190852355836;  // std dev = 0,138, 354,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=347 */
%   | | else return 0.1488088579726721;  // std dev = 0,104, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.14107042029196) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.13088699212712515) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.12881258203205018) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.10637437699355067) :- 
     knows(A, C), 
     knows(C, C), 
     knows(D, A), 
     !. // Clause #4.

trusts(A, B, 0.03950524052476617) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.15301519359930382) :- 
     knows(B, A), 
     !. // Clause #6.

trusts(A, B, 0.12701783326899266) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.14571190852355836) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.1488088579726721) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.14107042029196) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar63),
   knows(uniqueVar63, uniqueVar63),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.13088699212712515) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar64),
   knows(uniqueVar64, uniqueVar64),
   knows(b, uniqueVar64),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.12881258203205018) :-  /* #neg=6 #pos=68 */ 
   knows(a, uniqueVar65),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar65, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.10637437699355067) :-  /* #neg=19 #pos=159 */ 
   knows(a, uniqueVar66),
   knows(uniqueVar66, uniqueVar66),
   knows(underscore, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.03950524052476617) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar67),
   knows(uniqueVar67, uniqueVar67),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.15301519359930382) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.12701783326899266) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar68, a),
   knows(uniqueVar69, uniqueVar68),
   knows(uniqueVar69, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.14571190852355836) :-  /* #neg=7 #pos=347 */ 
   knows(uniqueVar70, a),
   knows(underscore, uniqueVar70),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.1488088579726721) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar69, a)
%   knows(uniqueVar65, uniqueVar65)
%   knows(a, uniqueVar66)
%   knows(uniqueVar66, uniqueVar66)
%   knows(a, uniqueVar67)
%   knows(uniqueVar70, a)
%   knows(uniqueVar68, a)
%   knows(uniqueVar69, uniqueVar68)
%   knows(b, uniqueVar64)
%   knows(a, uniqueVar63)
%   knows(b, a)
%   knows(uniqueVar65, a)
%   knows(a, uniqueVar65)
%   knows(uniqueVar67, uniqueVar67)
%   knows(underscore, a)
%   knows(uniqueVar63, uniqueVar63)
%   knows(uniqueVar64, uniqueVar64)
%   knows(a, uniqueVar64)
%   knows(underscore, uniqueVar70)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 9 trees is 1 minutes and 42,694 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.040361453152491775
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03534863800449566
Set score:0.0025

% Have these 10 positive seeds: 147 377 435 502 745 931 1096 1419 1464 1694

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -70,971069 (regressionFit = 70,971067, penalties=1.12E-6) for clause:  trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,971069): trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867709 (regressionFit = 70,867708, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,867709): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955637 (regressionFit = 70,955635, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,943746 (regressionFit = 70,943744, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, A).  [covers 12,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971070 (regressionFit = 70,971067, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955637 (regressionFit = 70,955635, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971681 (regressionFit = 70,971679, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,975872 (regressionFit = 70,975870, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,962711 (regressionFit = 70,962708, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,960818 (regressionFit = 70,960816, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,949679 (regressionFit = 70,949677, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971069 (regressionFit = 70,971067, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(A, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971070 (regressionFit = 70,971067, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(A, _).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,943746 (regressionFit = 70,943744, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, A).  [covers 12,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,968697 (regressionFit = 70,968695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, _).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971070 (regressionFit = 70,971067, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(_, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971069 (regressionFit = 70,971067, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(_, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,968697 (regressionFit = 70,968695, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, A).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,902940 (regressionFit = 70,902938, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979558 (regressionFit = 70,979555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,975872 (regressionFit = 70,975870, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,895070 (regressionFit = 70,895068, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,978063 (regressionFit = 70,978061, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,976642 (regressionFit = 70,976640, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,962711 (regressionFit = 70,962708, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979558 (regressionFit = 70,979555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971069 (regressionFit = 70,971067, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955637 (regressionFit = 70,955635, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971070 (regressionFit = 70,971067, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,902940 (regressionFit = 70,902938, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979557 (regressionFit = 70,979555, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971681 (regressionFit = 70,971679, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,965699 (regressionFit = 70,965697, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,857829 (regressionFit = 70,857827, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,857829): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,968886 (regressionFit = 70,968883, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,971069 (regressionFit = 70,971067, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,965699 (regressionFit = 70,965697, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867710 (regressionFit = 70,867708, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,895070 (regressionFit = 70,895068, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,979558 (regressionFit = 70,979555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,960818 (regressionFit = 70,960816, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,976942 (regressionFit = 70,976940, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,955638 (regressionFit = 70,955635, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,976092 (regressionFit = 70,976090, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06582398235663212 to score=0.0025 #egs=490.0
Comparing variance: 0.025430880104296436 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065824)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065824) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025431)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025431) into the LAST position (#2) in the search queue.

% Time for loop #1: 4,049 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,857829 (regressionFit = 70,857827, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 43 85 103 136 172 278 301 354 434 481
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,183347 (regressionFit = 32,183345, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,183347): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,233640 (regressionFit = 32,233638, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,242470 (regressionFit = 32,242467, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,201908 (regressionFit = 32,201905, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,251529 (regressionFit = 32,251526, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,253701 (regressionFit = 32,253698, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024374999999999952 to score=0.0025 #egs=160.0
Comparing variance: 0.0857071048413397 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,085707)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,085707) into position #1 in the search queue (new size=2).

% Time for loop #2: 215 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,857829 (regressionFit = 70,857827, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 44 50 85 110 130 174 185 290
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,260230 (regressionFit = 28,260227, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,260230): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,273644 (regressionFit = 28,273642, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,281991 (regressionFit = 28,281988, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.08980799770731414 to score=0.0025 #egs=304.0
Comparing variance: 0.03686906852813717 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036869)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036869) into position #1 in the search queue (new size=2).

% Time for loop #3: 139 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,857829 (regressionFit = 70,857827, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 2 3 4 5 6 7 13 17 20
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -70,8578):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(B, Anon39045))

% Have these 6 positive seeds: 539 563 648 1202 1257 1494

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594961 (regressionFit = 38,594960, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,594961): trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594664 (regressionFit = 38,594663, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,594664): trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594554 (regressionFit = 38,594552, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,594554): trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,602273 (regressionFit = 38,602271, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547671 (regressionFit = 38,547669, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,547671): trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,591283 (regressionFit = 38,591281, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579945 (regressionFit = 38,579943, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,543436 (regressionFit = 38,543434, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,543436): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,581491 (regressionFit = 38,581489, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,602273 (regressionFit = 38,602271, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,579945 (regressionFit = 38,579943, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594554 (regressionFit = 38,594552, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,604003 (regressionFit = 38,604002, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,589065 (regressionFit = 38,589063, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,604003 (regressionFit = 38,604002, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,543436 (regressionFit = 38,543434, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594962 (regressionFit = 38,594960, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,547671 (regressionFit = 38,547669, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,594665 (regressionFit = 38,594663, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,601526 (regressionFit = 38,601524, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,025.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.01962498042069549 to score=0.0025 #egs=1222.0
Comparing variance: 0.049194960586941804 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019625)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019625) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,049195)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,049195) into position #1 in the search queue (new size=2).

% Time for loop #5: 1,882 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 1 3 18 28 43 49 60 65 100 136

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553914 (regressionFit = 14,553913, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,553914): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551104 (regressionFit = 14,551103, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,551104): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,561468 (regressionFit = 14,561466, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,529093 (regressionFit = 14,529091, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,529093): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559158 (regressionFit = 14,559156, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,519248 (regressionFit = 14,519246, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,519248): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,544816 (regressionFit = 14,544814, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,524650 (regressionFit = 14,524648, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,561200 (regressionFit = 14,561198, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,529093 (regressionFit = 14,529091, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,524650 (regressionFit = 14,524648, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,561468 (regressionFit = 14,561466, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,557390 (regressionFit = 14,557388, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,555977 (regressionFit = 14,555975, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,557390 (regressionFit = 14,557388, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553915 (regressionFit = 14,553913, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,559158 (regressionFit = 14,559156, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,475482 (regressionFit = 14,475480, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,475482): trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,551105 (regressionFit = 14,551103, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,553983 (regressionFit = 14,553981, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,049.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1476384791715981 to score=0.0025 #egs=10.0
Comparing variance: 0.04545138066855893 to score=0.0025 #egs=286.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 10,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,147638)
%         ILP node to extend: trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,147638) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 286,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,045451)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,045451) into position #2 in the search queue (new size=3).

% Time for loop #6: 369 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]'
%     Score = -14,475482 (regressionFit = 14,475480, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(A, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(A, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -1,328385 (regressionFit = 1,328382, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,328385): trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(C, A).  [covers 2,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(B, _).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, C), knows(_, A).  [covers 8,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(_, A).  [covers 10,0/10,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B), knows(_, B).  [covers 10,0/10,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,148.
% Will extend: trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
Comparing variance: 7.014209142227092E-4 to score=0.0025 #egs=4.0
Comparing variance: 0.22092930367784128 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6,0 < 2.1 * minPosCov = 6,3

% Time for loop #7: 19 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(_, A) :- knows(B, A), knows(B, B), knows(A, _).  [covers 4,0/10,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 43 59 76 101 103 116 121 161 220 264

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969145 (regressionFit = 12,969144, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,969145): trusts(_, A) :- knows(A, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956021 (regressionFit = 12,956020, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,956021): trusts(A, _) :- knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,994507 (regressionFit = 12,994505, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 190,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,932616 (regressionFit = 12,932614, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,932616): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,988795 (regressionFit = 12,988794, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 48,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,947552 (regressionFit = 12,947550, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 234,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,954120 (regressionFit = 12,954118, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,988457 (regressionFit = 12,988455, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 140,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,932616 (regressionFit = 12,932614, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,954120 (regressionFit = 12,954118, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,994507 (regressionFit = 12,994505, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 190,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,981013 (regressionFit = 12,981011, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 56,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,980016 (regressionFit = 12,980014, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 274,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,981013 (regressionFit = 12,981011, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 56,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,969146 (regressionFit = 12,969144, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 148,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,988795 (regressionFit = 12,988794, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 48,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,956022 (regressionFit = 12,956020, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 240,0/286,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 286,0/286,0 pos, 0,0/0,0 neg]
%     Score = -12,992889 (regressionFit = 12,992887, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 278,0/286,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,045.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06647418766071674 to score=0.0025 #egs=122.0
Comparing variance: 0.029407090759156065 to score=0.0025 #egs=164.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 122,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,066474)
%         ILP node to extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,066474) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 164,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,029407)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,029407) into position #2 in the search queue (new size=3).

% Time for loop #8: 366 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/286,0 pos, 0,0/0,0 neg]
% This clause covers 122 positive examples, of which 122 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/122,0 pos, 0,0/0,0 neg]'
%     Score = -12,932616 (regressionFit = 12,932614, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 122,0/122,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 5 7 87 105
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, B).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -8,102991 (regressionFit = 8,102988, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 100,0/122,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,102991): trusts(A, B) :- knows(C, A), knows(B, _), knows(A, C).  [covers 100,0/122,0 pos, 0,0/0,0 neg]
%     Score = -8,090967 (regressionFit = 8,090964, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/122,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,090967): trusts(A, B) :- knows(_, A), knows(B, C), knows(A, C).  [covers 30,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(A, _).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(B, _).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -7,987972 (regressionFit = 7,987970, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,987972): trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(C, _).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -8,008385 (regressionFit = 8,008382, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(C, _).  [covers 118,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, A).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _), knows(_, B).  [covers 122,0/122,0 pos, 0,0/0,0 neg]
%     Score = -8,099248 (regressionFit = 8,099245, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, _), knows(_, C).  [covers 118,0/122,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, C), knows(_, C).  [covers 122,0/122,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,066.
% Will extend: trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 91 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(B, D), knows(C, D).  [covers 48,0/122,0 pos, 0,0/0,0 neg]
% This clause covers 48 positive examples, of which 48 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon41025, A), knows(B, Anon41095))
Created a leaf under (trusts(A, B) :- knows(B, Anon39341), knows(Anon39341, B))

%%%%%  WILL-Produced Tree #10 @ 20:40:33 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.1224418615593779;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.0944325191574466;  // std dev = 5,225, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else return 0.1254998582988323;  // std dev = 0,192, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.12650324540047833;  // std dev = 0,140, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, B), knows(F, F) )
%   | | then if ( knows(B, G) )
%   | | | then return 0.16827129430293047;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0800592028777779;  // std dev = 1,151, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( knows(H, A), knows(B, I) )
%   | | | then if ( knows(H, I) )
%   | | | | then return 0.05681992289222416;  // std dev = 2,280, 48,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=42 */
%   | | | | else return 0.12152106585418578;  // std dev = 1,671, 74,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.12689180657766988;  // std dev = 0,171, 164,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=159 */


% Clauses:

trusts(A, B, 0.1224418615593779) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.0944325191574466) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.1254998582988323) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #3.

trusts(A, B, 0.12650324540047833) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #4.

trusts(A, B, 0.16827129430293047) :- 
     knows(C, B), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #5.

trusts(A, B, -0.0800592028777779) :- 
     knows(C, B), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.05681992289222416) :- 
     knows(C, A), 
     knows(B, D), 
     knows(C, D), 
     !. // Clause #7.

trusts(A, B, 0.12152106585418578) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.12689180657766988) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1224418615593779) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar71),
   knows(uniqueVar71, uniqueVar71),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.0944325191574466) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar72),
   knows(uniqueVar72, uniqueVar72),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.1254998582988323) :-  /* #neg=1 #pos=25 */ 
   knows(a, uniqueVar73),
   knows(uniqueVar73, uniqueVar73),
   !. // Flattened version of clause #3.

flattened_trusts(underscore, a, 0.12650324540047833) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar74),
   knows(uniqueVar74, a),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.16827129430293047) :-  /* #pos=4 */ 
   knows(uniqueVar75, a),
   knows(uniqueVar75, uniqueVar75),
   knows(a, underscore),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, -0.0800592028777779) :-  /* #neg=2 #pos=4 */ 
   knows(uniqueVar76, a),
   knows(uniqueVar76, uniqueVar76),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.05681992289222416) :-  /* #neg=6 #pos=42 */ 
   knows(uniqueVar77, a),
   knows(b, uniqueVar78),
   knows(uniqueVar77, uniqueVar78),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.12152106585418578) :-  /* #neg=3 #pos=71 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.12689180657766988) :-  /* #neg=5 #pos=159 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar76, a)
%   knows(uniqueVar77, uniqueVar78)
%   knows(uniqueVar76, uniqueVar76)
%   knows(uniqueVar72, uniqueVar72)
%   knows(a, uniqueVar71)
%   knows(uniqueVar77, a)
%   knows(a, uniqueVar73)
%   knows(a, uniqueVar72)
%   knows(b, uniqueVar78)
%   knows(a, underscore)
%   knows(uniqueVar71, uniqueVar71)
%   knows(b, a)
%   knows(uniqueVar73, uniqueVar73)
%   knows(a, uniqueVar74)
%   knows(uniqueVar74, a)
%   knows(underscore, a)
%   knows(uniqueVar75, a)
%   knows(uniqueVar75, uniqueVar75)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 167, [
   knows(uniqueVar27, a),
   knows(a, uniqueVar34),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar51, uniqueVar51),
   knows(uniqueVar68, a),
   knows(a, uniqueVar58),
   knows(uniqueVar44, a),
   knows(uniqueVar39, a),
   knows(uniqueVar67, uniqueVar67),
   knows(uniqueVar7, a),
   knows(underscore, a),
   knows(uniqueVar4, uniqueVar4),
   knows(underscore, uniqueVar53),
   knows(a, uniqueVar57),
   knows(underscore, uniqueVar70),
   knows(uniqueVar69, a),
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar24, a),
   knows(a, uniqueVar38),
   knows(a, uniqueVar13),
   knows(a, uniqueVar33),
   knows(uniqueVar42, uniqueVar42),
   knows(uniqueVar56, a),
   knows(uniqueVar38, a),
   knows(underscore, uniqueVar8),
   knows(a, uniqueVar12),
   knows(uniqueVar69, uniqueVar68),
   knows(underscore, uniqueVar29),
   knows(uniqueVar29, a),
   knows(uniqueVar39, uniqueVar39),
   knows(b, a),
   knows(a, uniqueVar37),
   knows(a, uniqueVar49),
   knows(uniqueVar33, uniqueVar33),
   knows(a, uniqueVar11),
   knows(uniqueVar57, uniqueVar57),
   knows(a, uniqueVar61),
   knows(uniqueVar44, uniqueVar44),
   knows(uniqueVar41, a),
   knows(a, uniqueVar59),
   knows(a, uniqueVar67),
   knows(uniqueVar54, a),
   knows(uniqueVar70, a),
   knows(uniqueVar62, underscore),
   knows(a, a),
   knows(b, uniqueVar62),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar27, uniqueVar27),
   knows(uniqueVar55, uniqueVar54),
   knows(underscore, uniqueVar48),
   knows(uniqueVar51, a),
   knows(uniqueVar20, a),
   knows(underscore, uniqueVar23),
   knows(a, underscore),
   knows(uniqueVar53, a),
   knows(uniqueVar5, a),
   knows(uniqueVar10, uniqueVar10),
   knows(a, uniqueVar63),
   knows(b, uniqueVar35),
   knows(uniqueVar29, b),
   knows(underscore, uniqueVar56),
   knows(b, uniqueVar18),
   knows(b, underscore),
   knows(uniqueVar49, uniqueVar49),
   knows(uniqueVar43, a),
   knows(uniqueVar66, uniqueVar66),
   knows(uniqueVar77, uniqueVar78),
   knows(a, uniqueVar35),
   knows(uniqueVar1, uniqueVar1),
   knows(a, uniqueVar72),
   knows(uniqueVar60, uniqueVar60),
   knows(uniqueVar13, a),
   knows(b, uniqueVar64),
   knows(uniqueVar43, uniqueVar43),
   knows(uniqueVar14, uniqueVar15),
   knows(a, uniqueVar36),
   knows(uniqueVar46, a),
   knows(uniqueVar71, uniqueVar71),
   knows(b, b),
   knows(uniqueVar45, a),
   knows(a, uniqueVar2),
   knows(a, uniqueVar51),
   knows(uniqueVar8, a),
   knows(a, uniqueVar64),
   knows(uniqueVar47, a),
   knows(a, uniqueVar50),
   knows(a, uniqueVar25),
   knows(uniqueVar26, uniqueVar26),
   knows(a, uniqueVar1),
   knows(underscore, uniqueVar24),
   knows(a, uniqueVar27),
   knows(a, uniqueVar71),
   knows(uniqueVar77, a),
   knows(uniqueVar9, uniqueVar9),
   knows(b, uniqueVar15),
   knows(uniqueVar32, a),
   knows(uniqueVar21, a),
   knows(uniqueVar36, uniqueVar36),
   knows(a, uniqueVar73),
   knows(uniqueVar22, uniqueVar21),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar30, a),
   knows(underscore, uniqueVar7),
   knows(a, uniqueVar65),
   knows(a, uniqueVar74),
   knows(uniqueVar74, a),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar14, a),
   knows(a, uniqueVar28),
   knows(uniqueVar55, a),
   knows(a, uniqueVar66),
   knows(uniqueVar18, a),
   knows(uniqueVar16, a),
   knows(uniqueVar42, a),
   knows(a, uniqueVar17),
   knows(uniqueVar28, uniqueVar28),
   knows(b, uniqueVar78),
   knows(uniqueVar19, uniqueVar19),
   knows(underscore, uniqueVar32),
   knows(uniqueVar34, uniqueVar34),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar3, a),
   knows(a, uniqueVar60),
   knows(uniqueVar25, uniqueVar25),
   knows(a, uniqueVar41),
   knows(uniqueVar52, uniqueVar52),
   knows(uniqueVar76, uniqueVar76),
   knows(uniqueVar17, uniqueVar17),
   knows(uniqueVar59, uniqueVar59),
   knows(uniqueVar72, uniqueVar72),
   knows(a, uniqueVar4),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar22, a),
   knows(uniqueVar20, uniqueVar20),
   knows(uniqueVar40, a),
   knows(a, uniqueVar10),
   knows(uniqueVar58, uniqueVar58),
   knows(a, uniqueVar9),
   knows(uniqueVar45, uniqueVar45),
   knows(uniqueVar65, a),
   knows(uniqueVar31, uniqueVar30),
   knows(uniqueVar73, uniqueVar73),
   knows(uniqueVar17, a),
   knows(a, uniqueVar52),
   knows(a, uniqueVar26),
   knows(a, uniqueVar53),
   knows(uniqueVar64, uniqueVar64),
   knows(uniqueVar16, uniqueVar16),
   knows(uniqueVar37, uniqueVar37),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar6, a),
   knows(uniqueVar76, a),
   knows(uniqueVar11, a),
   knows(uniqueVar31, a),
   knows(uniqueVar48, a),
   knows(uniqueVar23, a),
   knows(uniqueVar19, a),
   knows(uniqueVar47, uniqueVar46),
   knows(uniqueVar59, a),
   knows(uniqueVar12, uniqueVar12),
   knows(uniqueVar2, uniqueVar2),
   knows(uniqueVar75, a),
   knows(uniqueVar63, uniqueVar63),
   knows(uniqueVar61, a),
   knows(uniqueVar75, uniqueVar75),
   knows(uniqueVar40, uniqueVar40)]).
% Time taken to learn model for 'trusts': 1 minutes and 51,793 seconds.
% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 1 minutes and 53,415 seconds.
