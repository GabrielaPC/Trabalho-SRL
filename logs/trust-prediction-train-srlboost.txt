
% Starting a LEARNING run of bRDN.

% Calling SETUP.

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=0: args[N]=SRLBoost/data/trust/train/train_pos.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=1: args[N]=SRLBoost/data/trust/train/train_neg.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=2: args[N]=SRLBoost/data/trust/train/train_bk.txt

% getInputArgWithDefaultValue: args=[SRLBoost/data/trust/train/train_pos.txt, SRLBoost/data/trust/train/train_neg.txt, SRLBoost/data/trust/train/train_bk.txt, SRLBoost/data/trust/train/train_facts.txt]
%  for N=3: args[N]=SRLBoost/data/trust/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.

% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.

%  Read the facts.
%  Have read 13.619 facts.
% Have read 1.931 examples from 'SRLBoost/data/trust/train' [SRLBoost/data/trust/train/train*].
% Have read 77 examples from 'SRLBoost/data/trust/train' [SRLBoost/data/trust/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 trusts(A, B)
%  targetPred:                trusts/2
%  targetArgTypes:            signature = [const, const], types = [+person, +person]
%  targets:                   [trusts(A, B)]
%  targetPredicates:          [trusts/2]
%  targetArgSpecs:            [[A[+person], B[+person]]]
%  variablesInTargets:        [[A, B]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% No mode match to 'prior(0, 9.19062832800852E14)' in [signature = [const], types = [+person]]
% Time to collect constants: 471 milliseconds

% Read 1.931 pos examples and 77 neg examples.
% Time to init learnOneClause: 486 milliseconds
% Old dirnull
Setting model dir

% Have 1.931 'raw' positive examples and kept 1.931.
% Have 77 'raw' negative examples and kept 77.

% processing backup's for trusts
%  POS EX = 1.931
%  NEG EX = 77

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
SRLBoost/data/trust/train/models/
% Learning 10 trees in this iteration for trusts

% Learn model for: trusts
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Have prepared facts.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077538453
Set score:0.0025
% Dataset size: 2.008
Computing probabilities
prob time:14 milliseconds
No hidden examples for : trusts
Time to build dataset: 25 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03687615077537332
Set score:0.0025

% Have these 10 positive seeds: 14 463 494 529 553 659 660 667 1172 1536

% LearnOneClause Parameters:
%   Targets (1):
%    trusts(+person, +person)
%  Modes (3):
%    knows(+person, -person),
%    knows(-person, +person),
%    prior(+person)

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
% [ LazyGroundClauseIndex ]  Building full index for knows/2 with 7.577 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for knows/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for knows/2.

% Skipping over this 'waitHere': There is no fact nor clause nor built-in predicate matching: 'prior/1'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: prior/1.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398329 (regressionFit = 73,398328, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,398329): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033215 (regressionFit = 74,033214, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892843 (regressionFit = 73,892842, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,707333 (regressionFit = 73,707331, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,871478 (regressionFit = 73,871476, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,038860 (regressionFit = 74,038858, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047227 (regressionFit = 74,047225, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,020462 (regressionFit = 74,020460, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,982871 (regressionFit = 73,982869, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,000889 (regressionFit = 74,000887, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,968192 (regressionFit = 73,968190, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,247726): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,031883 (regressionFit = 74,031881, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,047308 (regressionFit = 74,047306, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,398330 (regressionFit = 73,398328, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,772983 (regressionFit = 73,772981, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,033216 (regressionFit = 74,033214, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,044984 (regressionFit = 74,044982, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,046320 (regressionFit = 74,046318, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,892844 (regressionFit = 73,892842, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -74,035502 (regressionFit = 74,035500, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06807163681799892 to score=0.0025 #egs=490.0
Comparing variance: 0.026279724552636413 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,068072)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,068072) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026280)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026280) into the LAST position (#2) in the search queue.

% Time for loop #1: 7,093 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 0 182 239 260 263 282
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,796973 (regressionFit = 32,796970, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,796973): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,318697 (regressionFit = 33,318694, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,321455 (regressionFit = 33,321452, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,214697 (regressionFit = 33,214694, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,353908 (regressionFit = 33,353905, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024375000000006076 to score=0.0025 #egs=160.0
Comparing variance: 0.08756657483930584 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,087567)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,087567) into position #1 in the search queue (new size=2).

% Time for loop #2: 480 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 8 58 131 156 161 211 212 246 312
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,879848 (regressionFit = 28,879845, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,879848): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,800357 (regressionFit = 28,800354, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,800357): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,876019 (regressionFit = 28,876016, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894636 (regressionFit = 28,894633, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,894657 (regressionFit = 28,894654, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,088.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09157505193906215 to score=0.0025 #egs=304.0
Comparing variance: 0.03698224852071082 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036982)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036982) into position #1 in the search queue (new size=2).

% Time for loop #3: 280 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 3 4 6 8 9 11 12 13 14
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,950003 (regressionFit = 0,950000, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,950003): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: -1.4802973661668753E-16 to score=0.0025 #egs=6.0
Comparing variance: 0.047499999999999785 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 54 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -73,247726 (regressionFit = 73,247724, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 5 6 9 12 14
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -73,2477):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon19, A))

% Have these 10 positive seeds: 126 356 371 516 621 820 833 884 892 998

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600256 (regressionFit = 39,600255, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,600256): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818384 (regressionFit = 39,818383, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828196 (regressionFit = 39,828195, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,781731 (regressionFit = 39,781729, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,843409 (regressionFit = 39,843407, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,889459 (regressionFit = 39,889457, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,823372 (regressionFit = 39,823370, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,817533 (regressionFit = 39,817531, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,847405 (regressionFit = 39,847403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892514 (regressionFit = 39,892512, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,864744 (regressionFit = 39,864742, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,892541 (regressionFit = 39,892539, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,600257 (regressionFit = 39,600255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,623681 (regressionFit = 39,623679, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,818385 (regressionFit = 39,818383, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,842361 (regressionFit = 39,842360, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,888245 (regressionFit = 39,888243, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,828197 (regressionFit = 39,828195, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,886757 (regressionFit = 39,886755, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221082482 to score=0.0025 #egs=424.0
Comparing variance: 0.034378143705590496 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,034378)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,034378) into position #1 in the search queue (new size=2).

% Time for loop #6: 3,004 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 6 57 98 121 190 227 320 600 761 768

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581829 (regressionFit = 37,581827, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,581829): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435114 (regressionFit = 37,435113, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,435114): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -37,411430): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,607109 (regressionFit = 37,607107, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605058 (regressionFit = 37,605056, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,558780 (regressionFit = 37,558778, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,540224 (regressionFit = 37,540222, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,609654 (regressionFit = 37,609652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,554790 (regressionFit = 37,554788, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,591537 (regressionFit = 37,591534, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,585421 (regressionFit = 37,585419, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,472230 (regressionFit = 37,472228, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,581830 (regressionFit = 37,581827, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,605352 (regressionFit = 37,605350, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,600932 (regressionFit = 37,600930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,435115 (regressionFit = 37,435113, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -37,599450 (regressionFit = 37,599448, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04130221003055439 to score=0.0025 #egs=834.0
Comparing variance: 0.011405325443791324 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,041302)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,041302) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011405) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,788 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 109 144 184 281 359 601 627 641 715 728
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,431477 (regressionFit = 34,431474, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,431477): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,440650 (regressionFit = 34,440647, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,443513 (regressionFit = 34,443510, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,443775 (regressionFit = 34,443772, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,439499 (regressionFit = 34,439496, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,400752 (regressionFit = 34,400749, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,400752): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,430996 (regressionFit = 34,430993, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,109502 (regressionFit = 34,109499, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -34,109502): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,436293 (regressionFit = 34,436290, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,364478 (regressionFit = 34,364475, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -34,438557 (regressionFit = 34,438554, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05676649305556237 to score=0.0025 #egs=480.0
Comparing variance: 0.019382999776567947 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019383)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019383) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,155 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -37,411430 (regressionFit = 37,411428, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 13 22 84 96 153 214 224 234 324
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,857267 (regressionFit = 6,857264, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,857267): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,838986 (regressionFit = 6,838983, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,838986): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,819856 (regressionFit = 6,819853, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,819856): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,767371 (regressionFit = 6,767368, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,767371): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,823744 (regressionFit = 6,823741, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858384 (regressionFit = 6,858382, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858762 (regressionFit = 6,858759, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,858454 (regressionFit = 6,858452, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,860003 (regressionFit = 6,860000, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 306 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon2539, A), knows(Anon2611, Anon2539))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #1 @ 19:15:32 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.8331489350995097;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.7561752508889822;  // std dev = 5,276, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.8534319539674327;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.7977322684328414;  // std dev = 5,220, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.8449910403626665;  // std dev = 1,987, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.7981489350995122;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.8466104735610475;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.8331489350995097) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.7561752508889822) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.8581489350995123) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.8081489350995122) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.8534319539674327) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.7977322684328414) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.8449910403626665) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.7981489350995122) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.8466104735610475) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.8331489350995097) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar1),
   knows(uniqueVar1, uniqueVar1),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.7561752508889822) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar2),
   knows(uniqueVar2, uniqueVar2),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.8581489350995123) :-  /* #pos=6 */ 
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar3, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.8081489350995122) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar4),
   knows(uniqueVar4, uniqueVar4),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.8534319539674327) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.7977322684328414) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar5, a),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar6, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.8449910403626665) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar7, a),
   knows(underscore, uniqueVar7),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.7981489350995122) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar8, a),
   knows(underscore, uniqueVar8),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.8466104735610475) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar3)
%   knows(uniqueVar3, a)
%   knows(uniqueVar3, uniqueVar3)
%   knows(uniqueVar6, a)
%   knows(uniqueVar1, uniqueVar1)
%   knows(a, uniqueVar1)
%   knows(a, uniqueVar4)
%   knows(uniqueVar6, uniqueVar5)
%   knows(underscore, uniqueVar8)
%   knows(uniqueVar5, a)
%   knows(b, a)
%   knows(underscore, uniqueVar7)
%   knows(uniqueVar7, a)
%   knows(uniqueVar2, uniqueVar2)
%   knows(uniqueVar4, uniqueVar4)
%   knows(a, uniqueVar2)
%   knows(b, underscore)
%   knows(uniqueVar8, a)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 1 trees is 14,430 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01938299977656799
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:371 milliseconds
No hidden examples for : trusts
Time to build dataset: 388 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03645328821973537
Set score:0.0025

% Have these 8 positive seeds: 216 704 1303 1354 1371 1708 1799 1874

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780650 (regressionFit = 72,780649, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,780650): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190686 (regressionFit = 73,190685, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098273 (regressionFit = 73,098272, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,083089 (regressionFit = 73,083087, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,191009 (regressionFit = 73,191007, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,197226 (regressionFit = 73,197224, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180663 (regressionFit = 73,180661, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150485 (regressionFit = 73,150483, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,137265 (regressionFit = 73,137263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,150818 (regressionFit = 73,150816, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,682084): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,180320 (regressionFit = 73,180318, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,195311 (regressionFit = 73,195309, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,780651 (regressionFit = 72,780649, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,972162 (regressionFit = 72,972160, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190687 (regressionFit = 73,190685, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,190290 (regressionFit = 73,190288, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,198205 (regressionFit = 73,198203, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,098274 (regressionFit = 73,098272, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -73,189432 (regressionFit = 73,189430, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06759051175403913 to score=0.0025 #egs=490.0
Comparing variance: 0.0260624053267357 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,067591)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,067591) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,026062)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,026062) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,413 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 11 31 33 55 133 216 260 280 284 298
%     Score = -33,118551 (regressionFit = 33,118548, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,118551): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,097581 (regressionFit = 33,097578, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,097581): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,005786 (regressionFit = 33,005783, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,005786): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,112595 (regressionFit = 33,112592, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -33,119129 (regressionFit = 33,119126, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,068.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04639948269365249 to score=0.0025 #egs=162.0
Comparing variance: 0.07771056974237645 to score=0.0025 #egs=328.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 328,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,077711)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,077711) into position #1 in the search queue (new size=2).

% Time for loop #2: 385 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 162 positive examples, of which 162 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/328,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 328,0/328,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 60 78 150 184 244
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -25,330556 (regressionFit = 25,330553, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -25,330556): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]
%     Score = -25,470379 (regressionFit = 25,470376, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 308,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -25,488556 (regressionFit = 25,488553, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 316,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 328,0/328,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,078.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03524687685901189 to score=0.0025 #egs=82.0
Comparing variance: 0.09122077055575022 to score=0.0025 #egs=246.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 246,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,091221)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 328,0/328,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,091221) into position #1 in the search queue (new size=2).

% Time for loop #3: 309 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 82,0/328,0 pos, 0,0/0,0 neg]
% This clause covers 82 positive examples, of which 82 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 328,0/246,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 246,0/246,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 16 22 38 40 64 67 76 98 118 119
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 246,0/246,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 246,0/246,0 pos, 0,0/0,0 neg]
%     Score = -22,401330 (regressionFit = 22,401327, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,401330): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 246,0/246,0 pos, 0,0/0,0 neg]
%     Score = -22,435702 (regressionFit = 22,435699, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 234,0/246,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 246,0/246,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 246,0/246,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,091.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09491737802489615 to score=0.0025 #egs=226.0
Comparing variance: 0.04750000000000041 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047500)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 246,0/246,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047500) into position #1 in the search queue (new size=2).

% Time for loop #4: 213 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 226,0/246,0 pos, 0,0/0,0 neg]
% This clause covers 226 positive examples, of which 226 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 246,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -72,682084 (regressionFit = 72,682082, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 0 7 10 12 14 16 18 19
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -72,6821):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(B, Anon5571))

% Have these 10 positive seeds: 96 212 328 363 430 454 869 1217 1339 1431

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,375242): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518845 (regressionFit = 39,518844, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522232 (regressionFit = 39,522231, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -39,354884): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561608 (regressionFit = 39,561606, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,488796 (regressionFit = 39,488794, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,519830 (regressionFit = 39,519828, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559352 (regressionFit = 39,559350, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,514477 (regressionFit = 39,514475, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375242 (regressionFit = 39,375241, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,521218 (regressionFit = 39,521216, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,561787 (regressionFit = 39,561785, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,534467 (regressionFit = 39,534465, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,562711 (regressionFit = 39,562709, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,375243 (regressionFit = 39,375241, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,354884 (regressionFit = 39,354882, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,518846 (regressionFit = 39,518844, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,503072 (regressionFit = 39,503070, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,559999 (regressionFit = 39,559997, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,522233 (regressionFit = 39,522231, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -39,558124 (regressionFit = 39,558122, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.019871340251457092 to score=0.0025 #egs=1222.0
Comparing variance: 0.05091927147765011 to score=0.0025 #egs=296.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.222,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,019871)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,019871) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 296,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,050919)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,050919) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,440 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 1222 positive examples, of which 1222 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 13 71 72 78 91 96 109 122 190 194

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057704 (regressionFit = 15,057703, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,057704): trusts(_, A) :- knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030703 (regressionFit = 15,030702, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,030703): trusts(A, _) :- knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -15,000738): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071990 (regressionFit = 15,071988, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -14,922847 (regressionFit = 14,922845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,922847): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,015800 (regressionFit = 15,015798, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 242,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,016752 (regressionFit = 15,016750, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,069562 (regressionFit = 15,069560, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 144,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,000738 (regressionFit = 15,000736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 126,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,016752 (regressionFit = 15,016750, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 32,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,054938 (regressionFit = 15,054936, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 196,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,065656 (regressionFit = 15,065654, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 282,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071429 (regressionFit = 15,071427, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 58,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,057705 (regressionFit = 15,057703, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 152,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,071990 (regressionFit = 15,071988, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 52,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,030704 (regressionFit = 15,030702, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 248,0/296,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 296,0/296,0 pos, 0,0/0,0 neg]
%     Score = -15,053386 (regressionFit = 15,053384, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 288,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,051.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13888888888888892 to score=0.0025 #egs=12.0
Comparing variance: 0.0466766856358331 to score=0.0025 #egs=284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,138889)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,138889) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 284,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,046677)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,046677) into position #2 in the search queue (new size=3).

% Time for loop #7: 362 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/296,0 pos, 0,0/0,0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]'
%     Score = -14,922847 (regressionFit = 14,922845, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 2 3 5 6 7 8 9 10
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 10,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -14,9228):
%  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon6761, A), knows(Anon6761, Anon6761))

% Have these 10 positive seeds: 18 71 72 82 95 104 134 137 147 158

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233761 (regressionFit = 13,233760, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,233761): trusts(_, A) :- knows(A, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227541 (regressionFit = 13,227540, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,227541): trusts(A, _) :- knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,250538 (regressionFit = 13,250536, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 184,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,173477 (regressionFit = 13,173475, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 116,0/284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,173477): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 116,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,252580 (regressionFit = 13,252578, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 46,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,215890 (regressionFit = 13,215888, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 230,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,167748 (regressionFit = 13,167746, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,167748): trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,250635 (regressionFit = 13,250633, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 134,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,173477 (regressionFit = 13,173475, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 116,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,250538 (regressionFit = 13,250536, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 184,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,245016 (regressionFit = 13,245015, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 54,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,246555 (regressionFit = 13,246553, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 270,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,245016 (regressionFit = 13,245015, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 54,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,233762 (regressionFit = 13,233760, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 142,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,252580 (regressionFit = 13,252578, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 46,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,227542 (regressionFit = 13,227540, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 236,0/284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 284,0/284,0 pos, 0,0/0,0 neg]
%     Score = -13,240889 (regressionFit = 13,240887, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 276,0/284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,047.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.13682338504512334 to score=0.0025 #egs=6.0
Comparing variance: 0.044412971217660364 to score=0.0025 #egs=278.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 278,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,044413)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,044413) into position #1 in the search queue (new size=2).

% Time for loop #9: 338 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, B).  [covers 6,0/284,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 6 15 29 37 81 90 93 107 123 142

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335314 (regressionFit = 12,335313, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,335314): trusts(_, A) :- knows(A, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324350 (regressionFit = 12,324349, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,324350): trusts(A, _) :- knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,345712 (regressionFit = 12,345710, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 180,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,289798 (regressionFit = 12,289796, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,289798): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,345137 (regressionFit = 12,345135, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 46,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,314403 (regressionFit = 12,314401, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 224,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,345990 (regressionFit = 12,345988, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 128,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,289798 (regressionFit = 12,289796, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 110,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,345712 (regressionFit = 12,345710, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 180,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,339633 (regressionFit = 12,339631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 54,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335119 (regressionFit = 12,335116, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 264,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,339633 (regressionFit = 12,339631, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 54,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,335315 (regressionFit = 12,335313, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 136,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,345137 (regressionFit = 12,345135, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 46,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,324351 (regressionFit = 12,324349, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 230,0/278,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 278,0/278,0 pos, 0,0/0,0 neg]
%     Score = -12,333292 (regressionFit = 12,333290, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 270,0/278,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,044.
% Will extend: trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #10: 321 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #10, the best clause found is:
%      trusts(A, B) :- knows(_, A), knows(B, _).  [covers 110,0/278,0 pos, 0,0/0,0 neg]
% This clause covers 110 positive examples, of which 110 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon5855), knows(Anon5855, B))

%%%%%  WILL-Produced Tree #2 @ 19:15:40 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(C, A) )
%   | then return 0.6821912399414805;  // std dev = 2,742, 162,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=154 */
%   | else if ( knows(B, A) )
%   | | then return 0.6879060376478439;  // std dev = 1,700, 82,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=79 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.633392629274731;  // std dev = 4,632, 226,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=202 */
%   | | | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, E), knows(E, B) )
%   | then return 0.7036147903757071;  // std dev = 0,141, 1.222,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1.197 */
%   | else if ( knows(F, A), knows(F, F) )
%   | | then return 0.5648375413594845;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( knows(B, G), knows(G, G) )
%   | | | then return 0.5585823384836616;  // std dev = 0,906, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else if ( knows(H, A), knows(B, I) )
%   | | | | then return 0.6635911124035647;  // std dev = 2,553, 110,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=103 */
%   | | | | else return 0.6928763140805134;  // std dev = 2,403, 168,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=162 */


% Clauses:

trusts(A, B, 0.6821912399414805) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #1.

trusts(A, B, 0.6879060376478439) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #2.

trusts(A, B, 0.633392629274731) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.6794533872440252) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.7036147903757071) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #5.

trusts(A, B, 0.5648375413594845) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #6.

trusts(A, B, 0.5585823384836616) :- 
     knows(B, C), 
     knows(C, C), 
     !. // Clause #7.

trusts(A, B, 0.6635911124035647) :- 
     knows(C, A), 
     knows(B, D), 
     !. // Clause #8.

trusts(A, B, 0.6928763140805134) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, underscore, 0.6821912399414805) :-  /* #neg=8 #pos=154 */ 
   knows(a, uniqueVar9),
   knows(uniqueVar9, uniqueVar9),
   knows(uniqueVar9, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.6879060376478439) :-  /* #neg=3 #pos=79 */ 
   knows(a, uniqueVar10),
   knows(uniqueVar10, uniqueVar10),
   knows(b, a),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.633392629274731) :-  /* #neg=24 #pos=202 */ 
   knows(a, uniqueVar11),
   knows(uniqueVar11, uniqueVar11),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.6794533872440252) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar12),
   knows(uniqueVar12, uniqueVar12),
   !. // Flattened version of clause #4.

flattened_trusts(underscore, a, 0.7036147903757071) :-  /* #neg=25 #pos=1.197 */ 
   knows(a, uniqueVar13),
   knows(uniqueVar13, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5648375413594845) :-  /* #neg=2 #pos=10 */ 
   knows(uniqueVar14, a),
   knows(uniqueVar14, uniqueVar14),
   !. // Flattened version of clause #6.

flattened_trusts(underscore, a, 0.5585823384836616) :-  /* #neg=1 #pos=5 */ 
   knows(a, uniqueVar15),
   knows(uniqueVar15, uniqueVar15),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.6635911124035647) :-  /* #neg=7 #pos=103 */ 
   knows(underscore, a),
   knows(b, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.6928763140805134) :-  /* #neg=6 #pos=162 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar10)
%   knows(uniqueVar10, uniqueVar10)
%   knows(uniqueVar13, a)
%   knows(a, uniqueVar9)
%   knows(a, uniqueVar15)
%   knows(uniqueVar15, uniqueVar15)
%   knows(a, uniqueVar11)
%   knows(uniqueVar12, uniqueVar12)
%   knows(a, uniqueVar13)
%   knows(uniqueVar14, a)
%   knows(uniqueVar9, uniqueVar9)
%   knows(b, a)
%   knows(uniqueVar11, uniqueVar11)
%   knows(underscore, a)
%   knows(uniqueVar9, a)
%   knows(a, uniqueVar12)
%   knows(b, underscore)
%   knows(uniqueVar14, uniqueVar14)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 2 trees is 22,700 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0444129712176643
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:559 milliseconds
No hidden examples for : trusts
Time to build dataset: 577 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03609709023398344
Set score:0.0025

% Have these 10 positive seeds: 154 286 444 765 891 1094 1148 1228 1267 1693

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190983 (regressionFit = 72,190982, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -72,190983): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476337 (regressionFit = 72,476335, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416551 (regressionFit = 72,416550, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,452593 (regressionFit = 72,452591, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,477986 (regressionFit = 72,477984, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,451913 (regressionFit = 72,451911, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,471759 (regressionFit = 72,471757, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,404215 (regressionFit = 72,404213, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476337 (regressionFit = 72,476335, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,406842 (regressionFit = 72,406840, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,477986 (regressionFit = 72,477984, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,344333 (regressionFit = 72,344331, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,478582 (regressionFit = 72,478580, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,467711 (regressionFit = 72,467709, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,451913 (regressionFit = 72,451911, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476337 (regressionFit = 72,476335, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,406842 (regressionFit = 72,406840, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,452593 (regressionFit = 72,452591, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,474524 (regressionFit = 72,474522, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,231177 (regressionFit = 72,231175, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,463441 (regressionFit = 72,463439, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,474524 (regressionFit = 72,474522, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,190984 (regressionFit = 72,190982, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,344333 (regressionFit = 72,344331, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,476338 (regressionFit = 72,476335, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,471759 (regressionFit = 72,471757, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,481542 (regressionFit = 72,481540, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,416552 (regressionFit = 72,416550, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -72,475333 (regressionFit = 72,475331, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010114280535953628 to score=0.0025 #egs=584.0
Comparing variance: 0.04654792266464964 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010114)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010114) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,046548)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,046548) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,246 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 124 322 348 367 518 738 847 893 1102 1185

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283651 (regressionFit = 66,283650, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,283651): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121888 (regressionFit = 66,121887, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,121888): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,137041 (regressionFit = 66,137039, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,147220 (regressionFit = 66,147218, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,284243 (regressionFit = 66,284241, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,757654 (regressionFit = 65,757652, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,757654): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,097891 (regressionFit = 66,097889, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,277314 (regressionFit = 66,277312, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,235971 (regressionFit = 66,235969, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,281019 (regressionFit = 66,281017, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,284013 (regressionFit = 66,284011, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,147220 (regressionFit = 66,147218, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,277314 (regressionFit = 66,277312, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,137041 (regressionFit = 66,137039, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,284206 (regressionFit = 66,284204, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,973725 (regressionFit = 65,973723, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,271951 (regressionFit = 66,271949, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,284206 (regressionFit = 66,284204, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,235971 (regressionFit = 66,235969, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,283652 (regressionFit = 66,283650, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,284243 (regressionFit = 66,284241, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,276666 (regressionFit = 66,276663, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,121889 (regressionFit = 66,121887, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -66,272297 (regressionFit = 66,272294, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,047.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10531457059956 to score=0.0025 #egs=140.0
Comparing variance: 0.03973022762595899 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,105315)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,105315) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039730)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039730) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,264 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -65,757654 (regressionFit = 65,757652, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 9 15 27 71 83 84 93 102 119
%     Score = -14,661731 (regressionFit = 14,661728, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,661731): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,466780 (regressionFit = 14,466777, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,466780): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,427296 (regressionFit = 14,427293, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,427296): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,679075 (regressionFit = 14,679072, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 16,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,743393 (regressionFit = 14,743390, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,452176 (regressionFit = 14,452173, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,105.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.20956293965124334 to score=0.0025 #egs=10.0
Comparing variance: 0.09485894871821608 to score=0.0025 #egs=130.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 130,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,094859)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,094859) into position #1 in the search queue (new size=3).

% Time for loop #3: 152 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/130,0 pos, 0,0/0,0 neg]'
%     Score = -65,757654 (regressionFit = 65,757652, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 130,0/130,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 43 65 71 79 97 101 104 123 124
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -12,126742 (regressionFit = 12,126739, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,126742): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -12,178434 (regressionFit = 12,178431, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 12,0/130,0 pos, 0,0/0,0 neg]
%     Score = -12,331347 (regressionFit = 12,331344, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 120,0/130,0 pos, 0,0/0,0 neg]
%     Score = -12,180940 (regressionFit = 12,180937, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 26,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 130,0/130,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,095.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06913801967384803 to score=0.0025 #egs=80.0
Comparing variance: 0.13191395231032582 to score=0.0025 #egs=50.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 50,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,131914)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 130,0/130,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,131914) into position #1 in the search queue (new size=3).

% Time for loop #4: 132 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 80,0/130,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 130,0/50,0 pos, 0,0/0,0 neg]'
%     Score = -65,757654 (regressionFit = 65,757652, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 3 4 9 13 16 18 20 21 22
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -6,488951 (regressionFit = 6,488948, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,488951): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
%     Score = -6,561723 (regressionFit = 6,561720, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 46,0/50,0 pos, 0,0/0,0 neg]
%     Score = -6,484508 (regressionFit = 6,484505, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,484508): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 50,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,132.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 57 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 4,0/50,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 182 222 265 305 358 363 381 467 505 592

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013288 (regressionFit = 51,013287, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -51,013288): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927304 (regressionFit = 50,927303, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,927304): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,965751 (regressionFit = 50,965749, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,946208 (regressionFit = 50,946206, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,993807 (regressionFit = 50,993805, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,911603 (regressionFit = 50,911601, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,911603): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,989265 (regressionFit = 50,989263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,924127 (regressionFit = 50,924125, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,993354 (regressionFit = 50,993352, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,009642 (regressionFit = 51,009640, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,946208 (regressionFit = 50,946206, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,989265 (regressionFit = 50,989263, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,965751 (regressionFit = 50,965749, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,011733 (regressionFit = 51,011732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,958042 (regressionFit = 50,958040, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,995438 (regressionFit = 50,995435, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,011733 (regressionFit = 51,011732, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,924127 (regressionFit = 50,924125, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,013289 (regressionFit = 51,013287, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,993807 (regressionFit = 50,993805, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,953674 (regressionFit = 50,953672, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,927305 (regressionFit = 50,927303, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -51,005275 (regressionFit = 51,005273, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,040.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.046459952949235335 to score=0.0025 #egs=1012.0
Comparing variance: 0.014316650211799169 to score=0.0025 #egs=272.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1.012,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,046460)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,046460) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 272,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,014317)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,014317) into position #2 in the search queue (new size=3).

% Time for loop #6: 1,967 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 1012 positive examples, of which 1012 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]'
%     Score = -50,911603 (regressionFit = 50,911601, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 83 312 357 392 471 479 576 695 946
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,017365 (regressionFit = 47,017362, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,017365): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 836,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,007722 (regressionFit = 47,007719, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,007722): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 702,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,983201 (regressionFit = 46,983198, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,983201): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 184,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,014963 (regressionFit = 47,014960, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 446,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,013970 (regressionFit = 47,013967, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 876,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,955871 (regressionFit = 46,955868, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,955871): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 370,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,996912 (regressionFit = 46,996909, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 1.002,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,625967 (regressionFit = 46,625964, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,625967): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,997815 (regressionFit = 46,997812, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 914,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -46,934860 (regressionFit = 46,934857, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 400,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%     Score = -47,012678 (regressionFit = 47,012675, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 1.008,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0648086570539656 to score=0.0025 #egs=598.0
Comparing variance: 0.019010596583774464 to score=0.0025 #egs=414.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 414,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019011)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.012,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019011) into position #1 in the search queue (new size=3).

% Time for loop #7: 1,551 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 598,0/1.012,0 pos, 0,0/0,0 neg]
% This clause covers 598 positive examples, of which 598 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/414,0 pos, 0,0/0,0 neg]'
%     Score = -50,911603 (regressionFit = 50,911601, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 12 45 48 149 159 200 221 245 250
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,869021 (regressionFit = 7,869018, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,869021): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 276,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,830203 (regressionFit = 7,830200, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,830203): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 146,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,859208 (regressionFit = 7,859205, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 102,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,818006 (regressionFit = 7,818003, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,818006): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,865661 (regressionFit = 7,865658, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 404,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,869361 (regressionFit = 7,869358, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 326,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 414,0/414,0 pos, 0,0/0,0 neg]
%     Score = -7,869908 (regressionFit = 7,869905, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 410,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 333 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 358,0/414,0 pos, 0,0/0,0 neg]
% This clause covers 358 positive examples, of which 358 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon11485, A), knows(Anon11557, Anon11485))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #3 @ 19:15:50 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.5527780448020555;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(B, B) )
%   | | then return 0.2964892143195309;  // std dev = 1,448, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( knows(A, C) )
%   | | | then return 0.5125695678042864;  // std dev = 2,352, 80,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=74 */
%   | | | else if ( knows(C, B) )
%   | | | | then return 0.5908798552822158;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.417054504199685;  // std dev = 2,546, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(D, A), knows(E, D) )
%   | | then if ( knows(E, A) )
%   | | | then return 0.5115895882405596;  // std dev = 6,225, 598,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=556 */
%   | | | else if ( knows(B, F) )
%   | | | | then return 0.5560430941607938;  // std dev = 2,231, 358,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=353 */
%   | | | | else return 0.5231530692849373;  // std dev = 1,685, 56,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.5497689141156168;  // std dev = 0,120, 272,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=268 */


% Clauses:

trusts(A, B, 0.5527780448020555) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2964892143195309) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #2.

trusts(A, B, 0.5125695678042864) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #3.

trusts(A, B, 0.5908798552822158) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #4.

trusts(A, B, 0.417054504199685) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.5115895882405596) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.5560430941607938) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.5231530692849373) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.5497689141156168) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.5527780448020555) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.2964892143195309) :-  /* #neg=3 #pos=7 */ 
   knows(uniqueVar16, a),
   knows(uniqueVar16, uniqueVar16),
   knows(b, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.5125695678042864) :-  /* #neg=6 #pos=74 */ 
   knows(uniqueVar17, a),
   knows(uniqueVar17, uniqueVar17),
   knows(a, uniqueVar17),
   !. // Flattened version of clause #3.

flattened_trusts(a, b, 0.5908798552822158) :-  /* #pos=4 */ 
   knows(uniqueVar18, a),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar18, b),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.417054504199685) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar19, a),
   knows(uniqueVar19, uniqueVar19),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.5115895882405596) :-  /* #neg=42 #pos=556 */ 
   knows(uniqueVar20, a),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar21, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.5560430941607938) :-  /* #neg=5 #pos=353 */ 
   knows(uniqueVar22, a),
   knows(underscore, uniqueVar22),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.5231530692849373) :-  /* #neg=3 #pos=53 */ 
   knows(uniqueVar23, a),
   knows(underscore, uniqueVar23),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.5497689141156168) :-  /* #neg=4 #pos=268 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar23, a)
%   knows(uniqueVar19, a)
%   knows(uniqueVar22, a)
%   knows(underscore, uniqueVar22)
%   knows(uniqueVar17, a)
%   knows(uniqueVar18, a)
%   knows(uniqueVar20, a)
%   knows(uniqueVar21, uniqueVar20)
%   knows(uniqueVar18, uniqueVar18)
%   knows(b, a)
%   knows(b, b)
%   knows(uniqueVar17, uniqueVar17)
%   knows(uniqueVar18, b)
%   knows(a, uniqueVar17)
%   knows(uniqueVar19, uniqueVar19)
%   knows(uniqueVar16, a)
%   knows(uniqueVar21, a)
%   knows(uniqueVar16, uniqueVar16)
%   knows(underscore, uniqueVar23)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 3 trees is 33,016 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01901059658377452
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:748 milliseconds
No hidden examples for : trusts
Time to build dataset: 760 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03565671575863724
Set score:0.0025

% Have these 10 positive seeds: 163 176 330 413 450 594 973 1246 1385 1507

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435326 (regressionFit = 71,435325, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,435326): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597737 (regressionFit = 71,597736, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562939 (regressionFit = 71,562938, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,588747 (regressionFit = 71,588745, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,591394 (regressionFit = 71,591392, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,573408 (regressionFit = 71,573406, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,573842 (regressionFit = 71,573840, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,497221 (regressionFit = 71,497219, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,554655 (regressionFit = 71,554653, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597738 (regressionFit = 71,597736, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,513113 (regressionFit = 71,513111, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597738 (regressionFit = 71,597736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597739 (regressionFit = 71,597736, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,591394 (regressionFit = 71,591392, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,499928 (regressionFit = 71,499926, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,591709 (regressionFit = 71,591707, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,593135 (regressionFit = 71,593133, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,573408 (regressionFit = 71,573406, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597739 (regressionFit = 71,597736, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597738 (regressionFit = 71,597736, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597738 (regressionFit = 71,597736, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,513113 (regressionFit = 71,513111, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597738 (regressionFit = 71,597736, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,588747 (regressionFit = 71,588745, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,580615 (regressionFit = 71,580613, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,415110 (regressionFit = 71,415108, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,415110): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,577309 (regressionFit = 71,577307, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,580615 (regressionFit = 71,580613, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,435327 (regressionFit = 71,435325, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,499928 (regressionFit = 71,499926, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,597739 (regressionFit = 71,597736, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,573842 (regressionFit = 71,573840, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,562940 (regressionFit = 71,562938, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,592924 (regressionFit = 71,592922, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06615567073106901 to score=0.0025 #egs=490.0
Comparing variance: 0.025690928560081934 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,066156)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,066156) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025691)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025691) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,457 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -71,415110 (regressionFit = 71,415108, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 79 118 186 199 397 464 487
%     Score = -32,416131 (regressionFit = 32,416128, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,416131): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 30,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,289732 (regressionFit = 32,289729, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,289732): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,398538 (regressionFit = 32,398535, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,363028 (regressionFit = 32,363025, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,403201 (regressionFit = 32,403198, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,416193 (regressionFit = 32,416190, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024392149773917283 to score=0.0025 #egs=160.0
Comparing variance: 0.08602116765495361 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,086021)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,086021) into position #1 in the search queue (new size=2).

% Time for loop #2: 382 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -71,415110 (regressionFit = 71,415108, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 40 140 149 160 175 181 189 212 244 319
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,349157 (regressionFit = 28,349154, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,349157): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,382387 (regressionFit = 28,382384, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,386087 (regressionFit = 28,386084, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09009647565472134 to score=0.0025 #egs=304.0
Comparing variance: 0.03691637774658936 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,036916)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,036916) into position #1 in the search queue (new size=2).

% Time for loop #3: 266 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -71,415110 (regressionFit = 71,415108, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 5 7 9 12 15 16 17 18 20
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,954094 (regressionFit = 0,954091, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,954094): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=6.0
Comparing variance: 0.04770454154036239 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,047705)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,047705) into position #1 in the search queue (new size=2).

% Time for loop #4: 41 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/20,0 pos, 0,0/0,0 neg]'
%     Score = -71,415110 (regressionFit = 71,415108, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 4 5 6 7 10 11 12 14 16
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -71,4151):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 20,0/20,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(Anon13177, A))

% Have these 10 positive seeds: 14 163 243 353 482 506 656 667 924 1032

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919551 (regressionFit = 38,919550, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,919551): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984009 (regressionFit = 38,984007, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984263 (regressionFit = 38,984262, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,967836 (regressionFit = 38,967834, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,968933 (regressionFit = 38,968931, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,924944 (regressionFit = 38,924942, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,994659 (regressionFit = 38,994657, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,965048 (regressionFit = 38,965046, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,996097 (regressionFit = 38,996095, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,988285 (regressionFit = 38,988283, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,968933 (regressionFit = 38,968931, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,996097 (regressionFit = 38,996095, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,928759 (regressionFit = 38,928757, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,979526 (regressionFit = 38,979524, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,967836 (regressionFit = 38,967834, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,988285 (regressionFit = 38,988283, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,998654 (regressionFit = 38,998652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,971009 (regressionFit = 38,971007, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,998654 (regressionFit = 38,998652, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,919552 (regressionFit = 38,919550, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,924944 (regressionFit = 38,924942, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984010 (regressionFit = 38,984007, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,928759 (regressionFit = 38,928757, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,998631 (regressionFit = 38,998629, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,984264 (regressionFit = 38,984262, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,995164 (regressionFit = 38,995162, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004694731221072795 to score=0.0025 #egs=424.0
Comparing variance: 0.03375592713612313 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004695)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004695) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033756)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033756) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,317 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 225 417 511 775 860 884 892

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924582 (regressionFit = 36,924581, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,924582): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886698 (regressionFit = 36,886697, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,886698): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,928961 (regressionFit = 36,928959, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,928736 (regressionFit = 36,928735, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,902801 (regressionFit = 36,902799, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,894492 (regressionFit = 36,894490, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,877023 (regressionFit = 36,877021, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,877023): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,927405 (regressionFit = 36,927403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,928736 (regressionFit = 36,928735, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,890990 (regressionFit = 36,890988, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,915433 (regressionFit = 36,915431, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,912571 (regressionFit = 36,912569, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,902801 (regressionFit = 36,902799, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,927405 (regressionFit = 36,927403, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,928961 (regressionFit = 36,928959, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,921074 (regressionFit = 36,921072, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,906438 (regressionFit = 36,906436, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,921074 (regressionFit = 36,921072, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,890990 (regressionFit = 36,890988, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,924583 (regressionFit = 36,924581, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,894492 (regressionFit = 36,894490, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,928739 (regressionFit = 36,928737, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,886699 (regressionFit = 36,886697, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,923600 (regressionFit = 36,923598, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.04066227250722497 to score=0.0025 #egs=834.0
Comparing variance: 0.011402636924751438 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040662)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040662) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011403)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011403) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,616 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,877023 (regressionFit = 36,877021, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 32 82 100 105 124 178 187 314 564 593
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,861116 (regressionFit = 33,861113, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,861116): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,900475 (regressionFit = 33,900472, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,907621 (regressionFit = 33,907618, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,904476 (regressionFit = 33,904473, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,912242 (regressionFit = 33,912239, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,844826 (regressionFit = 33,844823, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,844826): trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,905628 (regressionFit = 33,905624, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,904325 (regressionFit = 33,904323, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,838165 (regressionFit = 33,838162, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,838165): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,911769 (regressionFit = 33,911766, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,885654 (regressionFit = 33,885651, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,909635 (regressionFit = 33,909632, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05632522345266618 to score=0.0025 #egs=480.0
Comparing variance: 0.019214843458129245 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019215)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019215) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,188 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -36,877023 (regressionFit = 36,877021, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 29 36 76 163 164 187 227 282 293
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,799206 (regressionFit = 6,799203, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,799206): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,782900 (regressionFit = 6,782897, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,782900): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,793095 (regressionFit = 6,793092, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 36,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,776638 (regressionFit = 6,776636, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,776638): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,771771 (regressionFit = 6,771768, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,771771): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,774419 (regressionFit = 6,774416, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,798613 (regressionFit = 6,798610, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,801446 (regressionFit = 6,801443, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,798348 (regressionFit = 6,798345, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,801153 (regressionFit = 6,801150, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #9: 313 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon15673, A), knows(Anon15745, Anon15673))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #4 @ 19:16:01 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.4076501978376764;  // std dev = 1,976, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, D) )
%   | | then return 0.37024919786094046;  // std dev = 5,233, 304,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=273 */
%   | | else if ( knows(C, A) )
%   | | | then return 0.4371074422804951;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4018571756495904;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.41844052529407316;  // std dev = 0,069, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.39038627305159135;  // std dev = 5,200, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.4132177781438222;  // std dev = 1,988, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.386659170436129;  // std dev = 1,679, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.41467662780247433;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.4076501978376764) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.37024919786094046) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #2.

trusts(A, B, 0.4371074422804951) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #3.

trusts(A, B, 0.4018571756495904) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.41844052529407316) :- 
     knows(B, A), 
     !. // Clause #5.

trusts(A, B, 0.39038627305159135) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #6.

trusts(A, B, 0.4132177781438222) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #7.

trusts(A, B, 0.386659170436129) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.41467662780247433) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.4076501978376764) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar24),
   knows(uniqueVar24, uniqueVar24),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.37024919786094046) :-  /* #neg=31 #pos=273 */ 
   knows(a, uniqueVar25),
   knows(uniqueVar25, uniqueVar25),
   knows(b, underscore),
   !. // Flattened version of clause #2.

flattened_trusts(a, underscore, 0.4371074422804951) :-  /* #pos=6 */ 
   knows(a, uniqueVar26),
   knows(uniqueVar26, uniqueVar26),
   knows(uniqueVar26, a),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.4018571756495904) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar27),
   knows(uniqueVar27, uniqueVar27),
   !. // Flattened version of clause #4.

flattened_trusts(a, b, 0.41844052529407316) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, underscore, 0.39038627305159135) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar28, a),
   knows(uniqueVar29, uniqueVar28),
   knows(uniqueVar29, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.4132177781438222) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar30, a),
   knows(underscore, uniqueVar30),
   knows(b, underscore),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.386659170436129) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar31, a),
   knows(underscore, uniqueVar31),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.41467662780247433) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar27)
%   knows(underscore, uniqueVar31)
%   knows(uniqueVar29, uniqueVar28)
%   knows(uniqueVar31, a)
%   knows(uniqueVar27, uniqueVar27)
%   knows(uniqueVar30, a)
%   knows(uniqueVar26, a)
%   knows(uniqueVar26, uniqueVar26)
%   knows(a, uniqueVar24)
%   knows(uniqueVar25, uniqueVar25)
%   knows(underscore, uniqueVar30)
%   knows(b, a)
%   knows(a, uniqueVar25)
%   knows(a, uniqueVar26)
%   knows(uniqueVar24, uniqueVar24)
%   knows(uniqueVar28, a)
%   knows(uniqueVar29, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 4 trees is 43,423 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01921484345812921
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:991 milliseconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0355876786954694
Set score:0.0025

% Have these 9 positive seeds: 194 654 1097 1284 1345 1553 1844 1945 1998

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341437 (regressionFit = 71,341436, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,341437): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459557 (regressionFit = 71,459556, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434061 (regressionFit = 71,434060, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,453817 (regressionFit = 71,453815, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,453213 (regressionFit = 71,453211, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,439255 (regressionFit = 71,439252, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,430417 (regressionFit = 71,430415, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,370917 (regressionFit = 71,370914, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,427437 (regressionFit = 71,427435, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,366701 (regressionFit = 71,366699, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,453213 (regressionFit = 71,453211, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367076 (regressionFit = 71,367074, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,451536 (regressionFit = 71,451534, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,455636 (regressionFit = 71,455634, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,439255 (regressionFit = 71,439252, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,366701 (regressionFit = 71,366699, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,453817 (regressionFit = 71,453815, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,436482 (regressionFit = 71,436480, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,327351 (regressionFit = 71,327349, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,327351): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,437624 (regressionFit = 71,437622, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,436482 (regressionFit = 71,436480, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,341438 (regressionFit = 71,341436, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367076 (regressionFit = 71,367074, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,459558 (regressionFit = 71,459556, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,430417 (regressionFit = 71,430415, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,455605 (regressionFit = 71,455603, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,434062 (regressionFit = 71,434060, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,455187 (regressionFit = 71,455185, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06608575115302226 to score=0.0025 #egs=490.0
Comparing variance: 0.025655685950902767 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,066086)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,066086) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025656)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025656) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,275 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -71,327351 (regressionFit = 71,327349, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 18 67 88 107 241 273 342 354 374 376
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,291179 (regressionFit = 32,291176, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,291179): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,372314 (regressionFit = 32,372311, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,370942 (regressionFit = 32,370939, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,334487 (regressionFit = 32,334484, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -32,382021 (regressionFit = 32,382018, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,066.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024390559998108054 to score=0.0025 #egs=160.0
Comparing variance: 0.08602632148707708 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,086026)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,086026) into position #1 in the search queue (new size=2).

% Time for loop #2: 369 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -71,327351 (regressionFit = 71,327349, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 23 27 45 98 103 124 138 162 179 227
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,341937 (regressionFit = 28,341934, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -28,341937): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,364013 (regressionFit = 28,364011, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,384023 (regressionFit = 28,384020, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -28,387579 (regressionFit = 28,387576, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,086.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07282967362298655 to score=0.0025 #egs=72.0
Comparing variance: 0.08952789674554001 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,089528)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,089528) into position #1 in the search queue (new size=2).

% Time for loop #3: 226 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -71,327351 (regressionFit = 71,327349, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 35 41 49 103 104 119 124 153 173 181
%     Score = -23,072411 (regressionFit = 23,072408, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -23,072411): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -23,061027 (regressionFit = 23,061024, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -23,061027): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -23,082910 (regressionFit = 23,082907, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -23,094404 (regressionFit = 23,094401, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 24,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -23,070124 (regressionFit = 23,070121, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,090.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09527374209162996 to score=0.0025 #egs=232.0
Comparing variance: 0.03682753106561411 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036828)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,036828) into position #1 in the search queue (new size=2).

% Time for loop #4: 83 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 232 positive examples, of which 232 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -71,327351 (regressionFit = 71,327349, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 2 8 11 13 15 17 18 21 23
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,953763 (regressionFit = 0,953760, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,953763): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 2,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 16 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 208 222 421 669 839 850 935 986 1039 1138

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887289 (regressionFit = 38,887288, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,887289): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936130 (regressionFit = 38,936129, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935079 (regressionFit = 38,935078, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,931878 (regressionFit = 38,931876, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,917277 (regressionFit = 38,917275, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,942309 (regressionFit = 38,942307, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,871539 (regressionFit = 38,871537, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,871539): trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,931265 (regressionFit = 38,931262, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,915494 (regressionFit = 38,915493, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,917277 (regressionFit = 38,917275, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,880701 (regressionFit = 38,880699, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,940452 (regressionFit = 38,940450, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,920046 (regressionFit = 38,920044, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,942309 (regressionFit = 38,942307, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,915494 (regressionFit = 38,915493, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,931878 (regressionFit = 38,931876, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,945003 (regressionFit = 38,945001, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,917337 (regressionFit = 38,917335, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,945003 (regressionFit = 38,945001, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,887290 (regressionFit = 38,887288, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,880701 (regressionFit = 38,880699, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,936131 (regressionFit = 38,936129, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,871539 (regressionFit = 38,871537, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,871539): trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,945222 (regressionFit = 38,945220, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,935080 (regressionFit = 38,935078, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,942112 (regressionFit = 38,942109, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.018079596648526874 to score=0.0025 #egs=524.0
Comparing variance: 0.029575280415112707 to score=0.0025 #egs=994.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 524,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,018080)
%         ILP node to extend: trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,018080) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 994,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,029575)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,029575) into position #1 in the search queue (new size=2).

% Time for loop #6: 1,214 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 524 positive examples, of which 524 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 53 209 265 336 385 411 465 565 753 857

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371015 (regressionFit = 29,371014, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,371015): trusts(A, B) :- knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392154 (regressionFit = 29,392153, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,358476): trusts(A, _) :- knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,393408 (regressionFit = 29,393406, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 614,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358477 (regressionFit = 29,358474, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,395253 (regressionFit = 29,395251, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 56,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,372599 (regressionFit = 29,372597, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 652,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358477 (regressionFit = 29,358474, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,350345 (regressionFit = 29,350343, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 736,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,350345): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 736,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,389808 (regressionFit = 29,389806, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 240,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,395253 (regressionFit = 29,395251, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 56,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,370278 (regressionFit = 29,370276, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 750,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,384117 (regressionFit = 29,384115, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 166,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,377589 (regressionFit = 29,377586, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 868,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,372599 (regressionFit = 29,372597, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 652,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,389808 (regressionFit = 29,389806, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 240,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,393408 (regressionFit = 29,393406, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 614,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,347017 (regressionFit = 29,347015, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -29,347017): trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,375732 (regressionFit = 29,375730, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 980,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358477 (regressionFit = 29,358474, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,347017 (regressionFit = 29,347015, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,371016 (regressionFit = 29,371014, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 208,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,370278 (regressionFit = 29,370276, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 750,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392155 (regressionFit = 29,392153, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 876,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,397323 (regressionFit = 29,397321, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 144,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,358476 (regressionFit = 29,358474, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 748,0/994,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 994,0/994,0 pos, 0,0/0,0 neg]
%     Score = -29,392759 (regressionFit = 29,392757, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 986,0/994,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,030.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
Comparing variance: 0.044367953698272 to score=0.0025 #egs=170.0
Comparing variance: 0.026461726878074146 to score=0.0025 #egs=824.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 170,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,044368)
%         ILP node to extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,044368) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 824,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,026462)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,026462) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,325 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/994,0 pos, 0,0/0,0 neg]
% This clause covers 170 positive examples, of which 170 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]'
%     Score = -29,347017 (regressionFit = 29,347015, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 29 33 43 60 98 114 120 128 132 159
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(A, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(A, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,510792 (regressionFit = 7,510789, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, A).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,510792): trusts(A, B) :- knows(A, C), knows(C, B), knows(B, A).  [covers 22,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,394405 (regressionFit = 7,394402, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,394405): trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,509826 (regressionFit = 7,509823, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(B, _).  [covers 160,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(C, _).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -7,536133 (regressionFit = 7,536130, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, A).  [covers 130,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B), knows(_, C).  [covers 170,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,044.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
Comparing variance: 0.012631224737395108 to score=0.0025 #egs=80.0
Comparing variance: 0.07093227227608913 to score=0.0025 #egs=90.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 90,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,070932)
%         ILP node to extend: trusts(A, B) :- knows(A, C), knows(C, B).  [covers 170,0/170,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,070932) into position #1 in the search queue (new size=3).

% Time for loop #8: 101 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, B), knows(B, C).  [covers 80,0/170,0 pos, 0,0/0,0 neg]
% This clause covers 80 positive examples, of which 80 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon20043))
Created a leaf under (trusts(A, B) :- knows(A, Anon20043), knows(Anon20043, B))
Created a leaf under (trusts(A, B) :- knows(Anon19135, B), knows(Anon19135, A))

%%%%%  WILL-Produced Tree #5 @ 19:16:08 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.3115524223299796;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.30504856948954134;  // std dev = 2,290, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.27221100161165473;  // std dev = 4,701, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else if ( knows(C, A) )
%   | | | | then return 0.33402925034228637;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else return 0.30550237758662563;  // std dev = 0,977, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(E, B), knows(E, A) )
%   | then return 0.320528716401572;  // std dev = 0,134, 524,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=514 */
%   | else if ( knows(A, F), knows(F, B) )
%   | | then if ( knows(B, F) )
%   | | | then return 0.3214337735307048;  // std dev = 1,005, 80,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | | else return 0.26229006950383427;  // std dev = 0,266, 90,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=83 */
%   | | else return 0.3091111058690081;  // std dev = 0,163, 824,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=801 */


% Clauses:

trusts(A, B, 0.3115524223299796) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.30504856948954134) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.27221100161165473) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.33402925034228637) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.30550237758662563) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.320528716401572) :- 
     knows(C, B), 
     knows(C, A), 
     !. // Clause #6.

trusts(A, B, 0.3214337735307048) :- 
     knows(A, C), 
     knows(C, B), 
     knows(B, C), 
     !. // Clause #7.

trusts(A, B, 0.26229006950383427) :- 
     knows(A, C), 
     knows(C, B), 
     !. // Clause #8.

trusts(A, B, 0.3091111058690081) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.3115524223299796) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar32),
   knows(uniqueVar32, uniqueVar32),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.30504856948954134) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar33),
   knows(uniqueVar33, uniqueVar33),
   knows(b, uniqueVar33),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.27221100161165473) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar34),
   knows(uniqueVar34, uniqueVar34),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.33402925034228637) :-  /* #pos=6 */ 
   knows(a, uniqueVar35),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar35, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.30550237758662563) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar36),
   knows(uniqueVar36, uniqueVar36),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.320528716401572) :-  /* #neg=10 #pos=514 */ 
   knows(uniqueVar37, b),
   knows(uniqueVar37, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.3214337735307048) :-  /* #neg=1 #pos=79 */ 
   knows(a, uniqueVar38),
   knows(uniqueVar38, b),
   knows(b, uniqueVar38),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.26229006950383427) :-  /* #neg=7 #pos=83 */ 
   knows(a, uniqueVar39),
   knows(uniqueVar39, b),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.3091111058690081) :-  /* #neg=23 #pos=801 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, uniqueVar38)
%   knows(uniqueVar32, uniqueVar32)
%   knows(a, uniqueVar33)
%   knows(uniqueVar37, a)
%   knows(uniqueVar34, uniqueVar34)
%   knows(a, uniqueVar36)
%   knows(uniqueVar39, b)
%   knows(a, uniqueVar35)
%   knows(uniqueVar37, b)
%   knows(b, uniqueVar33)
%   knows(a, uniqueVar38)
%   knows(uniqueVar35, a)
%   knows(a, uniqueVar32)
%   knows(uniqueVar38, b)
%   knows(uniqueVar36, uniqueVar36)
%   knows(a, uniqueVar39)
%   knows(b, a)
%   knows(uniqueVar33, uniqueVar33)
%   knows(a, uniqueVar34)
%   knows(uniqueVar35, uniqueVar35)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 5 trees is 51,071 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.044367953698272
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03555899670435312
Set score:0.0025

% Have these 10 positive seeds: 37 67 91 391 756 1012 1181 1412 1487 1654

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -71,395320 (regressionFit = 71,395318, penalties=1.12E-6) for clause:  trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,395320): trusts(A, _) :- knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280417 (regressionFit = 71,280416, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -71,280417): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400772 (regressionFit = 71,400770, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,392782 (regressionFit = 71,392780, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367258 (regressionFit = 71,367255, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,398392 (regressionFit = 71,398390, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,379903 (regressionFit = 71,379900, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387357 (regressionFit = 71,387355, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,309941 (regressionFit = 71,309939, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367258 (regressionFit = 71,367255, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,359817 (regressionFit = 71,359814, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395320 (regressionFit = 71,395318, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, A), knows(A, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(A, _).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,393188 (regressionFit = 71,393186, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(B, _).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, A), knows(_, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, A), knows(_, B).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,393188 (regressionFit = 71,393186, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, A).  [covers 28,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400772 (regressionFit = 71,400770, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,322596 (regressionFit = 71,322594, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,398392 (regressionFit = 71,398390, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,301353 (regressionFit = 71,301351, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,396730 (regressionFit = 71,396728, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395343 (regressionFit = 71,395340, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,379903 (regressionFit = 71,379900, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395320 (regressionFit = 71,395318, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400772 (regressionFit = 71,400770, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.1300000000000004E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,322596 (regressionFit = 71,322594, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,392782 (regressionFit = 71,392780, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,380386 (regressionFit = 71,380384, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,286180 (regressionFit = 71,286178, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,380073 (regressionFit = 71,380071, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367258 (regressionFit = 71,367255, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,395321 (regressionFit = 71,395318, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, A).  [covers 30,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,380386 (regressionFit = 71,380384, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,280418 (regressionFit = 71,280416, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,301353 (regressionFit = 71,301351, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,400773 (regressionFit = 71,400770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,387357 (regressionFit = 71,387355, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,398615 (regressionFit = 71,398613, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,367257 (regressionFit = 71,367255, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -71,397270 (regressionFit = 71,397268, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010104771480624702 to score=0.0025 #egs=584.0
Comparing variance: 0.045912380248170626 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010105)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010105) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045912)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045912) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,236 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 219 239 473 564 603 608 720 1007 1084 1120

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367941 (regressionFit = 65,367940, penalties=1.12E-6) for clause:  trusts(_, A) :- knows(A, A).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,367941): trusts(_, A) :- knows(A, A).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378480 (regressionFit = 65,378479, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299587 (regressionFit = 65,299586, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,299587): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,324998 (regressionFit = 65,324996, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,353173 (regressionFit = 65,353170, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, B).  [covers 34,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,375793 (regressionFit = 65,375791, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,302130 (regressionFit = 65,302128, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,371740 (regressionFit = 65,371738, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,110181 (regressionFit = 65,110179, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -65,110181): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,286181 (regressionFit = 65,286179, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, B), knows(A, B).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, B), knows(A, _).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(A, _).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,353173 (regressionFit = 65,353170, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, B), knows(_, A).  [covers 34,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, A), knows(_, A).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,353212 (regressionFit = 65,353210, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, A).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,375793 (regressionFit = 65,375791, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,329467 (regressionFit = 65,329465, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,372851 (regressionFit = 65,372849, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 318,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,379021 (regressionFit = 65,379019, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,302130 (regressionFit = 65,302128, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, B).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, B).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,353212 (regressionFit = 65,353210, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,324998 (regressionFit = 65,324996, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,369397 (regressionFit = 65,369395, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,250973 (regressionFit = 65,250971, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,362047 (regressionFit = 65,362045, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,369397 (regressionFit = 65,369395, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367942 (regressionFit = 65,367940, penalties=2.1300000000000004E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, A).  [covers 38,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,329467 (regressionFit = 65,329465, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,378481 (regressionFit = 65,378479, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,371740 (regressionFit = 65,371738, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,367134 (regressionFit = 65,367132, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,299588 (regressionFit = 65,299586, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -65,371781 (regressionFit = 65,371779, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.1033556559789719 to score=0.0025 #egs=140.0
Comparing variance: 0.0394395541902776 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,103356)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,103356) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039440)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039440) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,242 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -65,110181 (regressionFit = 65,110179, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 9 23 44 69 70 87 89 129
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,256875 (regressionFit = 14,256872, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,256875): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,271847 (regressionFit = 14,271844, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 10,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,469188 (regressionFit = 14,469185, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,213159 (regressionFit = 14,213156, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,213159): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,103.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.032681895338985266 to score=0.0025 #egs=30.0
Comparing variance: 0.12029726446475664 to score=0.0025 #egs=110.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,120297)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,120297) into position #1 in the search queue (new size=3).

% Time for loop #3: 135 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 30 positive examples, of which 30 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/110,0 pos, 0,0/0,0 neg]'
%     Score = -65,110181 (regressionFit = 65,110179, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 42 50 59 62 65 68 82 88 94
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,047610 (regressionFit = 13,047607, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,047610): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,613082 (regressionFit = 12,613079, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,613082): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,224513 (regressionFit = 13,224510, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 8,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,232527 (regressionFit = 13,232524, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 102,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,120.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.2500279245547406 to score=0.0025 #egs=6.0
Comparing variance: 0.10685492232390889 to score=0.0025 #egs=104.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 104,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106855)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106855) into position #1 in the search queue (new size=3).

% Time for loop #4: 133 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/104,0 pos, 0,0/0,0 neg]'
%     Score = -65,110181 (regressionFit = 65,110179, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 3 9 14 15 22 27 31 34 62
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,980787 (regressionFit = 10,980784, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,980787): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -11,108516 (regressionFit = 11,108513, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 96,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 127 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% This clause covers 58 positive examples, of which 58 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 85 89 203 209 296 297 342 569 598 988

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640317 (regressionFit = 50,640316, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,640317): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598723 (regressionFit = 50,598722, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,598723): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,628810 (regressionFit = 50,628808, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,616503 (regressionFit = 50,616501, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,597568 (regressionFit = 50,597566, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,597568): trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,609353 (regressionFit = 50,609351, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,589887 (regressionFit = 50,589885, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,589887): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,600742 (regressionFit = 50,600740, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,616503 (regressionFit = 50,616501, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,560797 (regressionFit = 50,560795, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,560797): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,624605 (regressionFit = 50,624603, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,638942 (regressionFit = 50,638940, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,597568 (regressionFit = 50,597566, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,600742 (regressionFit = 50,600740, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,628810 (regressionFit = 50,628808, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,639502 (regressionFit = 50,639500, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,618415 (regressionFit = 50,618413, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,639502 (regressionFit = 50,639500, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,560797 (regressionFit = 50,560795, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,640318 (regressionFit = 50,640316, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,609353 (regressionFit = 50,609351, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,588154 (regressionFit = 50,588152, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,598724 (regressionFit = 50,598722, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,634993 (regressionFit = 50,634991, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,039.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03378355125854743 to score=0.0025 #egs=950.0
Comparing variance: 0.0552886874465391 to score=0.0025 #egs=334.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 950,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,033784)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,033784) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 334,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,055289)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,055289) into position #1 in the search queue (new size=3).

% Time for loop #6: 811 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 950 positive examples, of which 950 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 14 16 23 27 44 59 63 93 144 176

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407037 (regressionFit = 18,407036, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,407037): trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444271 (regressionFit = 18,444270, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,459584 (regressionFit = 18,459582, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 38,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,427815 (regressionFit = 18,427812, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 164,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,335867 (regressionFit = 18,335865, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,335867): trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,457608 (regressionFit = 18,457606, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,335867 (regressionFit = 18,335865, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,423198 (regressionFit = 18,423196, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,433961 (regressionFit = 18,433959, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 280,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,459584 (regressionFit = 18,459582, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 38,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,457608 (regressionFit = 18,457606, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,408018 (regressionFit = 18,408016, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,375845 (regressionFit = 18,375843, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 50,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,456452 (regressionFit = 18,456450, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 320,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,408018 (regressionFit = 18,408016, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,407038 (regressionFit = 18,407036, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,423198 (regressionFit = 18,423196, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,429170 (regressionFit = 18,429168, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 8,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,444272 (regressionFit = 18,444270, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,453848 (regressionFit = 18,453846, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 326,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,055.
% Will extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07847025281563653 to score=0.0025 #egs=148.0
Comparing variance: 0.03614122442988609 to score=0.0025 #egs=186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 148,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,078470)
%         ILP node to extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,078470) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 186,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036141)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,036141) into position #2 in the search queue (new size=4).

% Time for loop #7: 204 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% This clause covers 148 positive examples, of which 148 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]'
%     Score = -18,335867 (regressionFit = 18,335865, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 8 13 56 58 64 73 123 126 128 144
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,611492 (regressionFit = 11,611489, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,611492): trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,586869 (regressionFit = 11,586866, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,586869): trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(B, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,582207 (regressionFit = 11,582204, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, C).  [covers 6,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,582207): trusts(A, B) :- knows(B, C), knows(_, A), knows(C, C).  [covers 6,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,577433 (regressionFit = 11,577431, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 32,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,577433): trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 32,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,577901 (regressionFit = 11,577898, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 142,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,603213 (regressionFit = 11,603210, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, B).  [covers 28,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,389647 (regressionFit = 11,389645, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,389647): trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(_, C).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,595092 (regressionFit = 11,595089, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(_, C).  [covers 144,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,078.
% Will extend: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 104 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon24611), knows(Anon24679, A))
Created a leaf under (trusts(A, B) :- knows(B, Anon23807), knows(Anon23807, B))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #6 @ 19:16:17 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.25312023036782316;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.2763102460593184;  // std dev = 0,990, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.14050258426165682;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.22173652103410885;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.14997022543865726;  // std dev = 2,537, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(B, D), knows(D, B) )
%   | | then return 0.24516065733449488;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.15519042312082676;  // std dev = 2,605, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.23539907032824625;  // std dev = 2,145, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.24485003501214636;  // std dev = 0,190, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.25312023036782316) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.2763102460593184) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.14050258426165682) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.22173652103410885) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.14997022543865726) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.24516065733449488) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.15519042312082676) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.23539907032824625) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.24485003501214636) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.25312023036782316) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.2763102460593184) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar40, a),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar40, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.14050258426165682) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar41, a),
   knows(uniqueVar41, uniqueVar41),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.22173652103410885) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar42, a),
   knows(uniqueVar42, uniqueVar42),
   knows(a, uniqueVar42),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.14997022543865726) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar43, a),
   knows(uniqueVar43, uniqueVar43),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.24516065733449488) :-  /* #neg=34 #pos=916 */ 
   knows(a, uniqueVar44),
   knows(uniqueVar44, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.15519042312082676) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar45),
   knows(uniqueVar46, a),
   knows(uniqueVar46, uniqueVar45),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.23539907032824625) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.24485003501214636) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar46, uniqueVar45)
%   knows(uniqueVar42, a)
%   knows(uniqueVar41, a)
%   knows(uniqueVar41, uniqueVar41)
%   knows(uniqueVar43, a)
%   knows(uniqueVar43, uniqueVar43)
%   knows(uniqueVar40, b)
%   knows(b, a)
%   knows(uniqueVar46, a)
%   knows(b, b)
%   knows(a, uniqueVar44)
%   knows(uniqueVar40, a)
%   knows(uniqueVar40, uniqueVar40)
%   knows(underscore, a)
%   knows(b, uniqueVar45)
%   knows(uniqueVar42, uniqueVar42)
%   knows(a, uniqueVar42)
%   knows(uniqueVar44, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 6 trees is 59,487 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07847025281563652
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:1 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035297261318026636
Set score:0.0025

% Have these 10 positive seeds: 116 156 519 598 755 807 921 1049 1096 1232

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764875 (regressionFit = 70,764874, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,764875): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873771 (regressionFit = 70,873770, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839050 (regressionFit = 70,839049, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,866424 (regressionFit = 70,866421, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,871636 (regressionFit = 70,871634, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,855789 (regressionFit = 70,855787, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,862302 (regressionFit = 70,862300, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,831020 (regressionFit = 70,831018, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,803354 (regressionFit = 70,803352, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,871636 (regressionFit = 70,871634, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,799447 (regressionFit = 70,799445, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,870826 (regressionFit = 70,870824, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,867084 (regressionFit = 70,867082, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,855789 (regressionFit = 70,855787, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,803354 (regressionFit = 70,803352, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,866424 (regressionFit = 70,866421, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,857953 (regressionFit = 70,857951, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,740825 (regressionFit = 70,740822, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,740825): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,854331 (regressionFit = 70,854328, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,857953 (regressionFit = 70,857951, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,764876 (regressionFit = 70,764874, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,799447 (regressionFit = 70,799445, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873772 (regressionFit = 70,873770, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,862302 (regressionFit = 70,862300, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,873699 (regressionFit = 70,873697, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,839051 (regressionFit = 70,839049, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,871482 (regressionFit = 70,871480, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06508984287193638 to score=0.0025 #egs=490.0
Comparing variance: 0.025590776988609724 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,065090)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,065090) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025591)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025591) into the LAST position (#2) in the search queue.

% Time for loop #1: 3,369 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,740825 (regressionFit = 70,740822, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 65 115 136 151 169 211 366 398 447
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,817214 (regressionFit = 31,817211, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,817214): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,884517 (regressionFit = 31,884514, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,844878 (regressionFit = 31,844875, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,893858 (regressionFit = 31,893855, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,065.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024387037424603096 to score=0.0025 #egs=160.0
Comparing variance: 0.08459177217064176 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,084592)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,084592) into position #1 in the search queue (new size=2).

% Time for loop #2: 381 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,740825 (regressionFit = 70,740822, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 3 34 102 145 146 164 170 197 211 225
%     Score = -27,905078 (regressionFit = 27,905075, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,905078): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,912014 (regressionFit = 27,912011, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,874212 (regressionFit = 27,874209, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,874212): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,894209 (regressionFit = 27,894206, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,908567 (regressionFit = 27,908564, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,907346 (regressionFit = 27,907343, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,914973 (regressionFit = 27,914970, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,085.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06809666625888307 to score=0.0025 #egs=72.0
Comparing variance: 0.08903584788642199 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,089036)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,089036) into position #1 in the search queue (new size=2).

% Time for loop #3: 260 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -70,740825 (regressionFit = 70,740822, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 6 10 31 57 64 66 67 85 89 136
%     Score = -22,954921 (regressionFit = 22,954918, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,954921): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,939339 (regressionFit = 22,939337, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,939339): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,954616 (regressionFit = 22,954613, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,970385 (regressionFit = 22,970382, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 24,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,941794 (regressionFit = 22,941790, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09473004319131352 to score=0.0025 #egs=232.0
Comparing variance: 0.03699871198578529 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036999)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,036999) into position #1 in the search queue (new size=2).

% Time for loop #4: 212 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 232 positive examples, of which 232 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,740825 (regressionFit = 70,740822, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 4 5 8 13 23 24
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,958581 (regressionFit = 0,958578, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,958581): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 48 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 219 402 507 697 928 939 1260 1365

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787139 (regressionFit = 38,787138, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,787139): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830026 (regressionFit = 38,830025, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827686 (regressionFit = 38,827685, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787140 (regressionFit = 38,787138, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,839072 (regressionFit = 38,839070, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827022 (regressionFit = 38,827021, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,843179 (regressionFit = 38,843176, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802626 (regressionFit = 38,802624, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,822530 (regressionFit = 38,822527, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,825982 (regressionFit = 38,825980, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827022 (regressionFit = 38,827021, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,788932 (regressionFit = 38,788930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,840673 (regressionFit = 38,840671, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,810053 (regressionFit = 38,810051, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,843179 (regressionFit = 38,843176, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787140 (regressionFit = 38,787138, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,825982 (regressionFit = 38,825980, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,839072 (regressionFit = 38,839070, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,846747 (regressionFit = 38,846746, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,818580 (regressionFit = 38,818578, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,846747 (regressionFit = 38,846746, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,787141 (regressionFit = 38,787138, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,788932 (regressionFit = 38,788930, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,830027 (regressionFit = 38,830025, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802626 (regressionFit = 38,802624, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,827687 (regressionFit = 38,827685, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,843153 (regressionFit = 38,843150, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004687877769730836 to score=0.0025 #egs=424.0
Comparing variance: 0.03363754871881765 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004688)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004688) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033638)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033638) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,279 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 17 197 261 268 511 577 618 780 872 898

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792760 (regressionFit = 36,792759, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,792760): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753993 (regressionFit = 36,753992, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,753993): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799449 (regressionFit = 36,799447, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799480 (regressionFit = 36,799478, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775076 (regressionFit = 36,775074, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,779304 (regressionFit = 36,779302, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,794330 (regressionFit = 36,794328, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 32,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,744484 (regressionFit = 36,744482, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,744484): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799050 (regressionFit = 36,799048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799480 (regressionFit = 36,799478, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,769171 (regressionFit = 36,769169, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,782609 (regressionFit = 36,782607, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,778711 (regressionFit = 36,778709, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775076 (regressionFit = 36,775074, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799050 (regressionFit = 36,799048, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,799449 (regressionFit = 36,799447, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792882 (regressionFit = 36,792881, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775888 (regressionFit = 36,775886, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792882 (regressionFit = 36,792881, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,769171 (regressionFit = 36,769169, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,792761 (regressionFit = 36,792759, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,779304 (regressionFit = 36,779302, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753994 (regressionFit = 36,753992, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,794361 (regressionFit = 36,794359, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.040512486591648265 to score=0.0025 #egs=834.0
Comparing variance: 0.011373338810033273 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040512)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040512) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011373)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011373) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,626 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,744484 (regressionFit = 36,744482, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 116 311 348 399 437 688 735 823
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,733506 (regressionFit = 33,733503, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,733506): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,778201 (regressionFit = 33,778198, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,784413 (regressionFit = 33,784410, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,780097 (regressionFit = 33,780094, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,787356 (regressionFit = 33,787353, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,741164 (regressionFit = 33,741161, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,779447 (regressionFit = 33,779444, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,703151 (regressionFit = 33,703148, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,703151): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,786848 (regressionFit = 33,786845, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,762274 (regressionFit = 33,762271, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,784753 (regressionFit = 33,784750, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.056053349348439856 to score=0.0025 #egs=480.0
Comparing variance: 0.019202090991230714 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019202)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019202) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,205 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon28493, A))
Created a leaf under (trusts(A, B) :- knows(Anon28421, A), knows(Anon28493, Anon28421))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #7 @ 19:16:28 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.1988503413758935;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.19327064913888703;  // std dev = 2,214, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.16253433014434135;  // std dev = 4,688, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else if ( knows(C, A) )
%   | | | | then return 0.22032231991822207;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else return 0.19322665909811748;  // std dev = 0,979, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.21010593998454127;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.18354190793754563;  // std dev = 5,187, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else return 0.20387890177972479;  // std dev = 0,139, 354,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=347 */
%   | | else return 0.2088315126245339;  // std dev = 0,107, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.1988503413758935) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.19327064913888703) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.16253433014434135) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.22032231991822207) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.19322665909811748) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.21010593998454127) :- 
     knows(B, A), 
     !. // Clause #6.

trusts(A, B, 0.18354190793754563) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.20387890177972479) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.2088315126245339) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.1988503413758935) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar47),
   knows(uniqueVar47, uniqueVar47),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.19327064913888703) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar48),
   knows(uniqueVar48, uniqueVar48),
   knows(b, uniqueVar48),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.16253433014434135) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar49),
   knows(uniqueVar49, uniqueVar49),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.22032231991822207) :-  /* #pos=6 */ 
   knows(a, uniqueVar50),
   knows(uniqueVar50, uniqueVar50),
   knows(uniqueVar50, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.19322665909811748) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar51),
   knows(uniqueVar51, uniqueVar51),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.21010593998454127) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.18354190793754563) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar52, a),
   knows(uniqueVar53, uniqueVar52),
   knows(uniqueVar53, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.20387890177972479) :-  /* #neg=7 #pos=347 */ 
   knows(uniqueVar54, a),
   knows(underscore, uniqueVar54),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.2088315126245339) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(b, uniqueVar48)
%   knows(underscore, uniqueVar54)
%   knows(a, uniqueVar51)
%   knows(uniqueVar53, a)
%   knows(uniqueVar52, a)
%   knows(uniqueVar50, uniqueVar50)
%   knows(a, uniqueVar48)
%   knows(uniqueVar51, uniqueVar51)
%   knows(uniqueVar54, a)
%   knows(uniqueVar47, uniqueVar47)
%   knows(uniqueVar48, uniqueVar48)
%   knows(uniqueVar49, uniqueVar49)
%   knows(a, uniqueVar50)
%   knows(b, a)
%   knows(uniqueVar53, uniqueVar52)
%   knows(a, uniqueVar47)
%   knows(uniqueVar50, a)
%   knows(a, uniqueVar49)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 7 trees is 1 minutes and 10,395 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.040512486591648265
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03531579016093893
Set score:0.0025

% Have these 3 positive seeds: 757 1788 1810

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806197 (regressionFit = 70,806196, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,806197): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909848 (regressionFit = 70,909847, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881464 (regressionFit = 70,881463, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905942 (regressionFit = 70,905940, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,908235 (regressionFit = 70,908233, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,897547 (regressionFit = 70,897545, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,896831 (regressionFit = 70,896829, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,874223 (regressionFit = 70,874221, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909849 (regressionFit = 70,909847, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,837801 (regressionFit = 70,837799, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909849 (regressionFit = 70,909847, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909850 (regressionFit = 70,909847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,908235 (regressionFit = 70,908233, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829289 (regressionFit = 70,829287, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,902385 (regressionFit = 70,902383, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,897547 (regressionFit = 70,897545, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909850 (regressionFit = 70,909847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909849 (regressionFit = 70,909847, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909849 (regressionFit = 70,909847, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,837801 (regressionFit = 70,837799, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909849 (regressionFit = 70,909847, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905942 (regressionFit = 70,905940, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,893373 (regressionFit = 70,893371, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,890530 (regressionFit = 70,890528, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,893373 (regressionFit = 70,893371, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,806198 (regressionFit = 70,806196, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829289 (regressionFit = 70,829287, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909850 (regressionFit = 70,909847, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,896831 (regressionFit = 70,896829, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,881465 (regressionFit = 70,881463, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,909088 (regressionFit = 70,909086, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.010107258905750899 to score=0.0025 #egs=584.0
Comparing variance: 0.045578340638718996 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010107)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010107) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045578)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045578) into position #1 in the search queue (new size=2).

% Time for loop #1: 2,127 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 42 176 447 547 625 799 813 897 1133 1174

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,903557): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830803 (regressionFit = 64,830802, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,830803): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856614 (regressionFit = 64,856612, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,902623 (regressionFit = 64,902621, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,842140 (regressionFit = 64,842138, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,893433 (regressionFit = 64,893431, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,817979 (regressionFit = 64,817977, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,817979): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,878008 (regressionFit = 64,878006, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903558 (regressionFit = 64,903555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,902623 (regressionFit = 64,902621, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,862908 (regressionFit = 64,862906, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,901698 (regressionFit = 64,901696, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,842140 (regressionFit = 64,842138, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903558 (regressionFit = 64,903555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,878008 (regressionFit = 64,878006, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903557 (regressionFit = 64,903555, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856614 (regressionFit = 64,856612, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,894371 (regressionFit = 64,894369, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,764944 (regressionFit = 64,764942, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,764944): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,885030 (regressionFit = 64,885028, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,894371 (regressionFit = 64,894369, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,862908 (regressionFit = 64,862906, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,903558 (regressionFit = 64,903555, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,893433 (regressionFit = 64,893431, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,830804 (regressionFit = 64,830802, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,896464 (regressionFit = 64,896462, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0847024317748306 to score=0.0025 #egs=330.0
Comparing variance: 0.033650036545876276 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,084702)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,084702) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033650)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033650) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,032 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 330 positive examples, of which 330 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -64,764944 (regressionFit = 64,764942, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 9 26 38 87 93 128 136 154 207 258
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,925890 (regressionFit = 27,925887, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,925890): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,933408 (regressionFit = 27,933405, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,951537 (regressionFit = 27,951534, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,085.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06860466354593596 to score=0.0025 #egs=72.0
Comparing variance: 0.08909438626508873 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,089094)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,089094) into position #1 in the search queue (new size=3).

% Time for loop #3: 253 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -64,764944 (regressionFit = 64,764942, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 6 92 157 166 175 256
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,959962 (regressionFit = 22,959959, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,959962): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,968574 (regressionFit = 22,968571, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,957602 (regressionFit = 22,957599, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0948252433905298 to score=0.0025 #egs=232.0
Comparing variance: 0.03694241826737478 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036942)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,036942) into position #1 in the search queue (new size=3).

% Time for loop #4: 221 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 232 positive examples, of which 232 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -64,764944 (regressionFit = 64,764942, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 0 6 14 15 17 20 24 25
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -64,7649):
%  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
Created a leaf under (trusts(A, B) :- knows(B, Anon31575))

% Have these 6 positive seeds: 491 616 671 778 857 884

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805254 (regressionFit = 36,805253, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,805254): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773560 (regressionFit = 36,773559, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,773560): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,813066 (regressionFit = 36,813064, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,813005 (regressionFit = 36,813003, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,793483 (regressionFit = 36,793481, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,788193 (regressionFit = 36,788191, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,764955 (regressionFit = 36,764953, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,764955): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,812106 (regressionFit = 36,812104, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,813005 (regressionFit = 36,813003, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,776779 (regressionFit = 36,776777, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,797041 (regressionFit = 36,797039, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 200,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,790275 (regressionFit = 36,790273, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,793483 (regressionFit = 36,793481, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,812106 (regressionFit = 36,812104, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,813066 (regressionFit = 36,813064, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,807903 (regressionFit = 36,807901, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,788577 (regressionFit = 36,788575, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,807903 (regressionFit = 36,807901, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,776779 (regressionFit = 36,776777, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,805255 (regressionFit = 36,805253, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,788193 (regressionFit = 36,788191, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,813024 (regressionFit = 36,813022, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,773561 (regressionFit = 36,773559, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,808392 (regressionFit = 36,808390, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.040536120821876305 to score=0.0025 #egs=834.0
Comparing variance: 0.011376263608842321 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040536)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040536) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011376)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011376) into position #2 in the search queue (new size=3).

% Time for loop #6: 1,572 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,764955 (regressionFit = 36,764953, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 78 215 279 316 345 406 603 696 780
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,750790 (regressionFit = 33,750787, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,750790): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,795697 (regressionFit = 33,795694, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,803215 (regressionFit = 33,803212, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,797952 (regressionFit = 33,797949, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,806879 (regressionFit = 33,806876, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,755710 (regressionFit = 33,755707, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,799491 (regressionFit = 33,799488, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,732269 (regressionFit = 33,732266, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,732269): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,806867 (regressionFit = 33,806864, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,782203 (regressionFit = 33,782201, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,804471 (regressionFit = 33,804468, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.056104640050597725 to score=0.0025 #egs=480.0
Comparing variance: 0.01921479923539094 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019215)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019215) into position #1 in the search queue (new size=3).

% Time for loop #7: 1,159 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/354,0 pos, 0,0/0,0 neg]'
%     Score = -36,764955 (regressionFit = 36,764953, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 31 43 71 80 139 163 214 219 280 283
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,798133 (regressionFit = 6,798130, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,798133): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 232,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,782729 (regressionFit = 6,782726, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,782729): trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 118,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,793508 (regressionFit = 6,793505, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 36,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,771624 (regressionFit = 6,771621, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,771624): trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 82,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,763065 (regressionFit = 6,763062, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,763065): trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,779148 (regressionFit = 6,779145, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 76,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,798860 (regressionFit = 6,798857, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 346,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,801005 (regressionFit = 6,801002, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 274,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,798078 (regressionFit = 6,798075, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 72,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 354,0/354,0 pos, 0,0/0,0 neg]
%     Score = -6,801170 (regressionFit = 6,801167, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 350,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,019.
% Will extend: trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 290 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 304,0/354,0 pos, 0,0/0,0 neg]
% This clause covers 304 positive examples, of which 304 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 28 33 41 80 83 162 217 225

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936997 (regressionFit = 2,936996, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,936997): trusts(_, A) :- knows(A, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955470 (regressionFit = 2,955469, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,947202 (regressionFit = 2,947200, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 38,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,956380 (regressionFit = 2,956378, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 206,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,953843 (regressionFit = 2,953841, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 56,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,942241 (regressionFit = 2,942239, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 232,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955812 (regressionFit = 2,955810, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 12,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955812 (regressionFit = 2,955810, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 12,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 2,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,947202 (regressionFit = 2,947200, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 38,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,899493 (regressionFit = 2,899491, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 42,0/260,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,899493): trusts(A, B) :- knows(A, C), knows(C, B).  [covers 42,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,878008 (regressionFit = 2,878006, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,878008): trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,899493 (regressionFit = 2,899491, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 42,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,956380 (regressionFit = 2,956378, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 206,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,936998 (regressionFit = 2,936996, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 236,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 2,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,918093 (regressionFit = 2,918091, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 60,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,955471 (regressionFit = 2,955469, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 14,0/260,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 260,0/260,0 pos, 0,0/0,0 neg]
%     Score = -2,956563 (regressionFit = 2,956561, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 252,0/260,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,011.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]
Comparing variance: 0.00791202270845799 to score=0.0025 #egs=250.0
Comparing variance: 0.09 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 250,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,007912)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,007912) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,090000)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,090000) into position #1 in the search queue (new size=3).

% Time for loop #9: 352 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, _).  [covers 250,0/260,0 pos, 0,0/0,0 neg]
% This clause covers 250 positive examples, of which 250 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(A, Anon33465), knows(Anon33465, Anon33807))
Created a leaf under (trusts(A, B) :- knows(B, A))
Created a leaf under (trusts(A, B) :- knows(A, Anon33465), knows(Anon33465, Anon33807))

%%%%%  WILL-Produced Tree #8 @ 19:16:38 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.17388620426732404;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(A, C), knows(C, C) )
%   | then if ( knows(B, C) )
%   | | then return 0.1565554848760374;  // std dev = 2,223, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.1317132013119006;  // std dev = 4,690, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else return 0.16531154963425473;  // std dev = 0,192, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.1513213872436984;  // std dev = 5,189, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else if ( knows(B, G) )
%   | | | | then return 0.1747451126140717;  // std dev = 1,985, 304,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=300 */
%   | | | | else return 0.14461609553355276;  // std dev = 1,680, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else if ( knows(A, H), knows(H, I) )
%   | | | then return 0.17855390423173834;  // std dev = 0,089, 250,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=248 */
%   | | | else return 0.08744091084885572;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */


% Clauses:

trusts(A, B, 0.17388620426732404) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.1565554848760374) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.1317132013119006) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.16531154963425473) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #4.

trusts(A, B, 0.1513213872436984) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #5.

trusts(A, B, 0.1747451126140717) :- 
     knows(C, A), 
     knows(D, C), 
     knows(B, E), 
     !. // Clause #6.

trusts(A, B, 0.14461609553355276) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.17855390423173834) :- 
     knows(A, C), 
     knows(C, D), 
     !. // Clause #8.

trusts(A, B, 0.08744091084885572) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.17388620426732404) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.1565554848760374) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar55),
   knows(uniqueVar55, uniqueVar55),
   knows(b, uniqueVar55),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.1317132013119006) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar56),
   knows(uniqueVar56, uniqueVar56),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.16531154963425473) :-  /* #neg=1 #pos=25 */ 
   knows(a, uniqueVar57),
   knows(uniqueVar57, uniqueVar57),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.1513213872436984) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar58, a),
   knows(uniqueVar59, uniqueVar58),
   knows(uniqueVar59, a),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.1747451126140717) :-  /* #neg=4 #pos=300 */ 
   knows(uniqueVar60, a),
   knows(underscore, uniqueVar60),
   knows(b, underscore),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.14461609553355276) :-  /* #neg=3 #pos=47 */ 
   knows(uniqueVar61, a),
   knows(underscore, uniqueVar61),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.17855390423173834) :-  /* #neg=2 #pos=248 */ 
   knows(a, uniqueVar62),
   knows(uniqueVar62, underscore),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.08744091084885572) :-  /* #neg=1 #pos=9 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar56)
%   knows(a, uniqueVar57)
%   knows(underscore, uniqueVar60)
%   knows(uniqueVar60, a)
%   knows(uniqueVar56, uniqueVar56)
%   knows(underscore, uniqueVar61)
%   knows(uniqueVar62, underscore)
%   knows(a, uniqueVar55)
%   knows(uniqueVar57, uniqueVar57)
%   knows(uniqueVar55, uniqueVar55)
%   knows(b, a)
%   knows(uniqueVar61, a)
%   knows(uniqueVar59, a)
%   knows(uniqueVar59, uniqueVar58)
%   knows(b, uniqueVar55)
%   knows(a, uniqueVar62)
%   knows(uniqueVar58, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 8 trees is 1 minutes and 20,291 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01137626360884236
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.035326100953647833
Set score:0.0025

% Have these 7 positive seeds: 389 784 1009 1316 1516 1522 1569

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829494 (regressionFit = 70,829493, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,829494): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932474 (regressionFit = 70,932473, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905041 (regressionFit = 70,905040, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,927695 (regressionFit = 70,927693, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,929039 (regressionFit = 70,929037, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,918400 (regressionFit = 70,918398, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,916315 (regressionFit = 70,916313, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,898443 (regressionFit = 70,898440, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,929039 (regressionFit = 70,929037, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,852030 (regressionFit = 70,852028, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,931458 (regressionFit = 70,931456, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,926322 (regressionFit = 70,926320, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,918400 (regressionFit = 70,918398, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,927695 (regressionFit = 70,927693, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914278 (regressionFit = 70,914276, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,920177 (regressionFit = 70,920175, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,914278 (regressionFit = 70,914276, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,829495 (regressionFit = 70,829493, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,852030 (regressionFit = 70,852028, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932475 (regressionFit = 70,932473, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,916315 (regressionFit = 70,916313, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,932723 (regressionFit = 70,932721, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,905042 (regressionFit = 70,905040, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,930235 (regressionFit = 70,930233, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.0101119241010128 to score=0.0025 #egs=584.0
Comparing variance: 0.0455927875195935 to score=0.0025 #egs=1424.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010112)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010112) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.424,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,045593)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,045593) into position #1 in the search queue (new size=2).

% Time for loop #1: 3,291 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 584 positive examples, of which 584 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 51 179 233 361 877 1080 1107 1145 1167 1331

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923901 (regressionFit = 64,923900, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,923901): trusts(_, A) :- knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856357 (regressionFit = 64,856356, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,856357): trusts(A, _) :- knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,880527 (regressionFit = 64,880525, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923335 (regressionFit = 64,923333, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,863682 (regressionFit = 64,863680, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,912511 (regressionFit = 64,912509, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,711140 (regressionFit = 64,711138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,711140): trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,844500 (regressionFit = 64,844497, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.152,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,898363 (regressionFit = 64,898361, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923335 (regressionFit = 64,923333, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 248,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,884456 (regressionFit = 64,884454, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923376 (regressionFit = 64,923374, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.244,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,863682 (regressionFit = 64,863680, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.018,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,898363 (regressionFit = 64,898361, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 538,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,880527 (regressionFit = 64,880525, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 974,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,914808 (regressionFit = 64,914806, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,789975 (regressionFit = 64,789973, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,913375 (regressionFit = 64,913373, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.410,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,914808 (regressionFit = 64,914806, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 590,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,884456 (regressionFit = 64,884454, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.060,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,923902 (regressionFit = 64,923900, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.254,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,912511 (regressionFit = 64,912509, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 476,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,915450 (regressionFit = 64,915448, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 332,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,856358 (regressionFit = 64,856356, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.166,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.424,0/1.424,0 pos, 0,0/0,0 neg]
%     Score = -64,917591 (regressionFit = 64,917589, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.416,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,046.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
Comparing variance: 0.10131043389032139 to score=0.0025 #egs=140.0
Comparing variance: 0.039351773278698765 to score=0.0025 #egs=1284.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 140,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,101310)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,101310) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.284,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,039352)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,039352) into position #2 in the search queue (new size=3).

% Time for loop #2: 2,243 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/1.424,0 pos, 0,0/0,0 neg]
% This clause covers 140 positive examples, of which 140 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]'
%     Score = -64,711140 (regressionFit = 64,711138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 14 16 17 19 21 52 83 93 98 104
%     Score = -14,138628 (regressionFit = 14,138625, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,138628): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, A).  [covers 18,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,009802 (regressionFit = 14,009799, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,009802): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 84,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,182352 (regressionFit = 14,182349, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 130,0/140,0 pos, 0,0/0,0 neg]
%     Score = -14,002636 (regressionFit = 14,002633, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,002636): trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,101.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
Comparing variance: 0.03222578933480594 to score=0.0025 #egs=30.0
Comparing variance: 0.11850781080711387 to score=0.0025 #egs=110.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 110,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,118508)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/140,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,118508) into position #1 in the search queue (new size=3).

% Time for loop #3: 144 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(C, B).  [covers 30,0/140,0 pos, 0,0/0,0 neg]
% This clause covers 30 positive examples, of which 30 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 140,0/110,0 pos, 0,0/0,0 neg]'
%     Score = -64,711140 (regressionFit = 64,711138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 7 34 40 43 46 49 64 70 80 100
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,878512 (regressionFit = 12,878509, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,878512): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 60,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -12,591605 (regressionFit = 12,591602, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,591605): trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,022416 (regressionFit = 13,022413, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 8,0/110,0 pos, 0,0/0,0 neg]
%     Score = -13,035170 (regressionFit = 13,035167, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 102,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,119.
% Will extend: trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
Comparing variance: 0.25002430293097494 to score=0.0025 #egs=6.0
Comparing variance: 0.10664861508739265 to score=0.0025 #egs=104.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 104,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,106649)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/110,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,106649) into position #1 in the search queue (new size=3).

% Time for loop #4: 110 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(C, A), knows(C, C), knows(B, B).  [covers 6,0/110,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(B, B).  [covers 110,0/104,0 pos, 0,0/0,0 neg]'
%     Score = -64,711140 (regressionFit = 64,711138, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 15 19 32 38 40 44 50 52 55 60
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(A, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,974883 (regressionFit = 10,974881, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -10,974883): trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(A, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -10,987314 (regressionFit = 10,987311, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, C).  [covers 6,0/104,0 pos, 0,0/0,0 neg]
%     Score = -11,086374 (regressionFit = 11,086371, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(B, _).  [covers 96,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(B, _).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, A).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, C), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B), knows(_, B).  [covers 104,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,107.
% Will extend: trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 114 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(B, B), knows(A, B).  [covers 58,0/104,0 pos, 0,0/0,0 neg]
% This clause covers 58 positive examples, of which 58 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 46 84 87 353 496 560 702 784 845 897

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527677 (regressionFit = 50,527676, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,527677): trusts(_, A) :- knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491210 (regressionFit = 50,491209, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,491210): trusts(A, _) :- knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,518695 (regressionFit = 50,518693, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,502532 (regressionFit = 50,502530, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,493456 (regressionFit = 50,493454, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,492791 (regressionFit = 50,492789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,483211 (regressionFit = 50,483209, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,483211): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.012,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491933 (regressionFit = 50,491932, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,502532 (regressionFit = 50,502530, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 184,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,464627 (regressionFit = 50,464625, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,464627): trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,518747 (regressionFit = 50,518745, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,525558 (regressionFit = 50,525556, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.114,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,493456 (regressionFit = 50,493454, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 888,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491933 (regressionFit = 50,491932, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 462,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,518695 (regressionFit = 50,518693, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 836,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527299 (regressionFit = 50,527297, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,507854 (regressionFit = 50,507852, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 222,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,513527 (regressionFit = 50,513525, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.270,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527299 (regressionFit = 50,527297, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 504,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,464627 (regressionFit = 50,464625, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,527678 (regressionFit = 50,527676, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.124,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,492791 (regressionFit = 50,492789, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 376,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,485384 (regressionFit = 50,485382, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 268,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,491211 (regressionFit = 50,491209, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.026,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.284,0/1.284,0 pos, 0,0/0,0 neg]
%     Score = -50,522857 (regressionFit = 50,522855, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.276,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% The best node found: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,039.
% Will extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
Comparing variance: 0.033805397035335465 to score=0.0025 #egs=950.0
Comparing variance: 0.05493861723129786 to score=0.0025 #egs=334.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 950,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,033805)
%         ILP node to extend: trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,033805) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 334,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,054939)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,054939) into position #1 in the search queue (new size=3).

% Time for loop #6: 1,965 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(_, A) :- knows(A, B), knows(B, A).  [covers 950,0/1.284,0 pos, 0,0/0,0 neg]
% This clause covers 950 positive examples, of which 950 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 42 44 82 101 128 259 273 307

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,306098): trusts(_, A) :- knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328863 (regressionFit = 18,328861, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,346553 (regressionFit = 18,346551, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 38,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306099 (regressionFit = 18,306096, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,324319 (regressionFit = 18,324317, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 164,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,249463 (regressionFit = 18,249461, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -18,249463): trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306099 (regressionFit = 18,306096, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328863 (regressionFit = 18,328861, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,343852 (regressionFit = 18,343850, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,249463 (regressionFit = 18,249461, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,296386 (regressionFit = 18,296384, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,319775 (regressionFit = 18,319773, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 280,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328863 (regressionFit = 18,328861, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,346553 (regressionFit = 18,346551, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 38,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306098 (regressionFit = 18,306096, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,343852 (regressionFit = 18,343850, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 234,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,285036 (regressionFit = 18,285034, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,265292 (regressionFit = 18,265290, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 50,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,343770 (regressionFit = 18,343768, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 320,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,285036 (regressionFit = 18,285034, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 72,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,306099 (regressionFit = 18,306096, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 174,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,296386 (regressionFit = 18,296384, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 54,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,328864 (regressionFit = 18,328861, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 286,0/334,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 334,0/334,0 pos, 0,0/0,0 neg]
%     Score = -18,338705 (regressionFit = 18,338703, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 326,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,055.
% Will extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07799168260078182 to score=0.0025 #egs=148.0
Comparing variance: 0.03605748264987319 to score=0.0025 #egs=186.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 148,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,077992)
%         ILP node to extend: trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,077992) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 186,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,036057)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0,036057) into position #2 in the search queue (new size=4).

% Time for loop #7: 403 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/334,0 pos, 0,0/0,0 neg]
% This clause covers 148 positive examples, of which 148 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]'
%     Score = -18,249463 (regressionFit = 18,249461, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 10 33 37 41 44 45 52 72 92 93
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,539226 (regressionFit = 11,539223, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,539226): trusts(A, B) :- knows(B, C), knows(_, A), knows(A, C).  [covers 36,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,523260 (regressionFit = 11,523257, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,523260): trusts(A, B) :- knows(B, _), knows(C, A), knows(A, C).  [covers 124,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(A, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(B, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,519313 (regressionFit = 11,519310, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 32,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,519313): trusts(A, B) :- knows(B, C), knows(D, A), knows(C, D).  [covers 32,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,502587 (regressionFit = 11,502584, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 142,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,502587): trusts(A, B) :- knows(B, C), knows(_, A), knows(C, _).  [covers 142,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,526761 (regressionFit = 11,526758, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, B).  [covers 28,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,387102 (regressionFit = 11,387099, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,387102): trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(C, _).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, A).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A), knows(_, B).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, C), knows(_, A), knows(_, C).  [covers 148,0/148,0 pos, 0,0/0,0 neg]
%     Score = -11,527467 (regressionFit = 11,527464, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(B, _), knows(C, A), knows(_, C).  [covers 144,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,078.
% Will extend: trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #8: 99 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, B) :- knows(B, C), knows(D, A), knows(D, C).  [covers 56,0/148,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(B, Anon37387), knows(Anon37455, A))
Created a leaf under (trusts(A, B) :- knows(B, Anon36579), knows(Anon36579, B))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #9 @ 19:16:48 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(B, A) )
%   then return 0.14918266693185214;  // std dev = 0,101, 584,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=578 */
%   else if ( knows(C, A), knows(C, C) )
%   | then if ( knows(C, B) )
%   | | then return 0.16501655480080582;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( knows(B, B) )
%   | | | then return -0.18715352473189603;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( knows(A, C) )
%   | | | | then return 0.12251011277150362;  // std dev = 2,131, 58,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | | else return 0.05509964580044642;  // std dev = 2,537, 46,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | else if ( knows(B, D), knows(D, B) )
%   | | then return 0.14142940514369073;  // std dev = 0,184, 950,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=916 */
%   | | else if ( knows(B, E), knows(F, A) )
%   | | | then if ( knows(F, E) )
%   | | | | then return 0.06448552805655879;  // std dev = 2,603, 56,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=48 */
%   | | | | else return 0.1313576102550545;  // std dev = 2,147, 92,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | | | else return 0.14089376679722643;  // std dev = 0,190, 186,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=179 */


% Clauses:

trusts(A, B, 0.14918266693185214) :- 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.16501655480080582) :- 
     knows(C, A), 
     knows(C, C), 
     knows(C, B), 
     !. // Clause #2.

trusts(A, B, -0.18715352473189603) :- 
     knows(C, A), 
     knows(C, C), 
     knows(B, B), 
     !. // Clause #3.

trusts(A, B, 0.12251011277150362) :- 
     knows(C, A), 
     knows(C, C), 
     knows(A, C), 
     !. // Clause #4.

trusts(A, B, 0.05509964580044642) :- 
     knows(C, A), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.14142940514369073) :- 
     knows(B, C), 
     knows(C, B), 
     !. // Clause #6.

trusts(A, B, 0.06448552805655879) :- 
     knows(B, C), 
     knows(D, A), 
     knows(D, C), 
     !. // Clause #7.

trusts(A, B, 0.1313576102550545) :- 
     knows(B, C), 
     knows(D, A), 
     !. // Clause #8.

trusts(A, B, 0.14089376679722643) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.14918266693185214) :-  /* #neg=6 #pos=578 */ 
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.16501655480080582) :-  /* #neg=1 #pos=29 */ 
   knows(uniqueVar63, a),
   knows(uniqueVar63, uniqueVar63),
   knows(uniqueVar63, b),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, -0.18715352473189603) :-  /* #neg=3 #pos=3 */ 
   knows(uniqueVar64, a),
   knows(uniqueVar64, uniqueVar64),
   knows(b, b),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.12251011277150362) :-  /* #neg=5 #pos=53 */ 
   knows(uniqueVar65, a),
   knows(uniqueVar65, uniqueVar65),
   knows(a, uniqueVar65),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.05509964580044642) :-  /* #neg=8 #pos=38 */ 
   knows(uniqueVar66, a),
   knows(uniqueVar66, uniqueVar66),
   !. // Flattened version of clause #5.

flattened_trusts(underscore, a, 0.14142940514369073) :-  /* #neg=34 #pos=916 */ 
   knows(a, uniqueVar67),
   knows(uniqueVar67, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, b, 0.06448552805655879) :-  /* #neg=8 #pos=48 */ 
   knows(b, uniqueVar68),
   knows(uniqueVar69, a),
   knows(uniqueVar69, uniqueVar68),
   !. // Flattened version of clause #7.

flattened_trusts(a, b, 0.1313576102550545) :-  /* #neg=5 #pos=87 */ 
   knows(b, underscore),
   knows(underscore, a),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.14089376679722643) :-  /* #neg=7 #pos=179 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(uniqueVar64, a)
%   knows(uniqueVar65, uniqueVar65)
%   knows(uniqueVar69, a)
%   knows(a, uniqueVar65)
%   knows(uniqueVar66, uniqueVar66)
%   knows(uniqueVar69, uniqueVar68)
%   knows(uniqueVar63, a)
%   knows(a, uniqueVar67)
%   knows(uniqueVar67, a)
%   knows(b, a)
%   knows(b, b)
%   knows(uniqueVar63, b)
%   knows(uniqueVar65, a)
%   knows(b, uniqueVar68)
%   knows(underscore, a)
%   knows(uniqueVar63, uniqueVar63)
%   knows(uniqueVar64, uniqueVar64)
%   knows(uniqueVar66, a)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Time taken to learn 9 trees is 1 minutes and 30,711 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07799168260078182
Set score:0.0025
% Kept 1.931 of the 1.931 positive examples.
% Kept 77 of the 77 negative examples.
% Dataset size: 2.008
Computing probabilities
prob time:2 seconds
No hidden examples for : trusts
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.03517169367957121
Set score:0.0025

% Have these 10 positive seeds: 150 247 292 407 441 932 1146 1234 1258 1389

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522335 (regressionFit = 70,522334, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,522335): trusts(A, B) :- knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592358 (regressionFit = 70,592357, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,616814 (regressionFit = 70,616811, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,617702 (regressionFit = 70,617700, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,608665 (regressionFit = 70,608662, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,606606 (regressionFit = 70,606604, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,568535 (regressionFit = 70,568533, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 246,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,585220 (regressionFit = 70,585218, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.736,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,552883 (regressionFit = 70,552881, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621268 (regressionFit = 70,621265, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,617702 (regressionFit = 70,617700, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 570,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,554710 (regressionFit = 70,554708, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,620757 (regressionFit = 70,620755, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 474,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,614199 (regressionFit = 70,614197, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.828,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,608665 (regressionFit = 70,608662, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.602,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621268 (regressionFit = 70,621265, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,552883 (regressionFit = 70,552881, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 934,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621267 (regressionFit = 70,621265, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,616814 (regressionFit = 70,616811, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.558,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,606178 (regressionFit = 70,606176, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,480738 (regressionFit = 70,480735, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,480738): trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,609421 (regressionFit = 70,609419, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.994,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,606178 (regressionFit = 70,606176, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 914,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,522336 (regressionFit = 70,522334, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 584,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,554710 (regressionFit = 70,554708, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.644,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,621268 (regressionFit = 70,621265, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.838,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,606606 (regressionFit = 70,606604, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 810,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,622672 (regressionFit = 70,622670, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 454,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,592359 (regressionFit = 70,592357, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.750,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 2.008,0/2.008,0 pos, 0,0/0,0 neg]
%     Score = -70,619940 (regressionFit = 70,619938, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 2.000,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06461435592699034 to score=0.0025 #egs=490.0
Comparing variance: 0.025572925604370685 to score=0.0025 #egs=1518.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 490,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,064614)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,064614) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.518,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,025573)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,025573) into the LAST position (#2) in the search queue.

% Time for loop #1: 2,072 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/2.008,0 pos, 0,0/0,0 neg]
% This clause covers 490 positive examples, of which 490 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]'
%     Score = -70,480738 (regressionFit = 70,480735, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 16 28 164 168 173 190 287 376
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,592389 (regressionFit = 31,592386, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,592389): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,650254 (regressionFit = 31,650251, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 56,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,628732 (regressionFit = 31,628729, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,652946 (regressionFit = 31,652943, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 464,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,607675 (regressionFit = 31,607672, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 162,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,654535 (regressionFit = 31,654532, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 120,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -31,660600 (regressionFit = 31,660597, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 478,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,065.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
Comparing variance: 0.024383595142701654 to score=0.0025 #egs=160.0
Comparing variance: 0.08391215388960911 to score=0.0025 #egs=330.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 330,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,083912)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/490,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,083912) into position #1 in the search queue (new size=2).

% Time for loop #2: 368 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, A).  [covers 160,0/490,0 pos, 0,0/0,0 neg]
% This clause covers 160 positive examples, of which 160 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 490,0/330,0 pos, 0,0/0,0 neg]'
%     Score = -70,480738 (regressionFit = 70,480735, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 33 255 256 268 282 305 311
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,688649 (regressionFit = 27,688646, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,688649): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, B).  [covers 38,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,662129 (regressionFit = 27,662126, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -27,662129): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,672792 (regressionFit = 27,672789, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 304,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,680960 (regressionFit = 27,680957, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 84,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,686187 (regressionFit = 27,686184, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 76,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -27,690949 (regressionFit = 27,690946, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 318,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,084.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
Comparing variance: 0.06586710783134347 to score=0.0025 #egs=72.0
Comparing variance: 0.08883602294239153 to score=0.0025 #egs=258.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 258,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,088836)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/330,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,088836) into position #1 in the search queue (new size=2).

% Time for loop #3: 271 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, C).  [covers 72,0/330,0 pos, 0,0/0,0 neg]
% This clause covers 72 positive examples, of which 72 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 330,0/258,0 pos, 0,0/0,0 neg]'
%     Score = -70,480738 (regressionFit = 70,480735, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 19 49 54 143 159 214 239 240 247
%     Score = -22,905662 (regressionFit = 22,905659, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,905662): trusts(A, _) :- knows(A, B), knows(B, B), knows(A, A).  [covers 18,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,893062 (regressionFit = 22,893059, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -22,893062): trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,900452 (regressionFit = 22,900449, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 74,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,919316 (regressionFit = 22,919313, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(C, B).  [covers 24,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -22,889984 (regressionFit = 22,889981, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 252,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,089.
% Will extend: trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
Comparing variance: 0.09452028727888286 to score=0.0025 #egs=232.0
Comparing variance: 0.037090467687200916 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,037090)
%         ILP node to extend: trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/258,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,037090) into position #1 in the search queue (new size=2).

% Time for loop #4: 202 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      trusts(A, B) :- knows(A, C), knows(C, C), knows(B, _).  [covers 232,0/258,0 pos, 0,0/0,0 neg]
% This clause covers 232 positive examples, of which 232 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(A, B), knows(B, B).  [covers 258,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -70,480738 (regressionFit = 70,480735, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 4 6 7 9 12 19 20 21 23
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(A, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -0,960469 (regressionFit = 0,960466, penalties=2.9300000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,960469): trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(B, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, A).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, C), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, B), knows(_, B).  [covers 26,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,037.
% Will extend: trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 4 >= 4

% Time for loop #5: 41 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      trusts(A, _) :- knows(A, B), knows(B, B), knows(B, A).  [covers 6,0/26,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 22 186 301 375 395 464 617 751 843 886

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763661 (regressionFit = 38,763660, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -38,763661): trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802688 (regressionFit = 38,802687, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804572 (regressionFit = 38,804571, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(A, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(B, _).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, A), knows(_, B).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,796042 (regressionFit = 38,796040, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,797269 (regressionFit = 38,797267, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,764173 (regressionFit = 38,764171, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,813418 (regressionFit = 38,813416, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, B).  [covers 286,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,782297 (regressionFit = 38,782295, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 1.366,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,817923 (regressionFit = 38,817921, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,809188 (regressionFit = 38,809186, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,797269 (regressionFit = 38,797267, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 358,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,817923 (regressionFit = 38,817921, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 1.150,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,767201 (regressionFit = 38,767199, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,818637 (regressionFit = 38,818635, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, B).  [covers 46,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,800222 (regressionFit = 38,800220, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 1.258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=1.9200000000000003E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,796042 (regressionFit = 38,796040, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 594,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,809188 (regressionFit = 38,809186, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 1.104,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,819517 (regressionFit = 38,819515, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,799513 (regressionFit = 38,799511, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.504,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,819517 (regressionFit = 38,819515, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 586,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,763662 (regressionFit = 38,763660, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,764173 (regressionFit = 38,764171, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 1.222,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,802689 (regressionFit = 38,802687, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 1.374,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,767201 (regressionFit = 38,767199, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 524,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,819638 (regressionFit = 38,819636, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 258,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,804573 (regressionFit = 38,804571, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 1.272,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.518,0/1.518,0 pos, 0,0/0,0 neg]
%     Score = -38,816584 (regressionFit = 38,816582, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.510,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,026.
% Will extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
Comparing variance: 0.004689467447302863 to score=0.0025 #egs=424.0
Comparing variance: 0.03361547139674269 to score=0.0025 #egs=1094.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 424,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004689)
%         ILP node to extend: trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,004689) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.094,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,033615)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,033615) into position #1 in the search queue (new size=2).

% Time for loop #6: 2,311 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      trusts(A, B) :- knows(B, A).  [covers 424,0/1.518,0 pos, 0,0/0,0 neg]
% This clause covers 424 positive examples, of which 424 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 39 539 750 801 929 934 954 1042 1043 1066

% target           = trusts(A, B)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
% Most-general root: trusts(_, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]  score = -Infinity
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  trusts(A, B) :- knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768193 (regressionFit = 36,768192, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,768193): trusts(_, A) :- knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737194 (regressionFit = 36,737192, penalties=1.23E-6) for clause:  trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,737194): trusts(A, _) :- knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  trusts(_, A) :- knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737194 (regressionFit = 36,737192, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, A), knows(A, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775151 (regressionFit = 36,775149, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(A, B).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(A, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775117 (regressionFit = 36,775115, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(B, C).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,757330 (regressionFit = 36,757328, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(B, _).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,748599 (regressionFit = 36,748597, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, A), knows(C, B).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(B, _).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(_, A), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, A), knows(_, B).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,728939 (regressionFit = 36,728937, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -36,728939): trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,774231 (regressionFit = 36,774229, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(A, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775117 (regressionFit = 36,775115, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(B, C), knows(C, A).  [covers 152,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,745965 (regressionFit = 36,745962, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, A).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,753584 (regressionFit = 36,753581, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(B, _).  [covers 942,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,757330 (regressionFit = 36,757328, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(B, _), knows(_, A).  [covers 726,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(A, _), knows(_, A).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(A, B), knows(_, B).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737194 (regressionFit = 36,737192, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(A, _), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,774231 (regressionFit = 36,774229, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(B, C).  [covers 334,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(B, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775151 (regressionFit = 36,775149, penalties=2.0300000000000005E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, A).  [covers 680,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,769676 (regressionFit = 36,769674, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(A, C), knows(C, B).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,758917 (regressionFit = 36,758915, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(B, _).  [covers 1.080,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.24E-6) for clause:  trusts(A, _) :- knows(A, _), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(A, _), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(A, B), knows(_, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, B).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,769676 (regressionFit = 36,769674, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(A, C).  [covers 380,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(A, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,745965 (regressionFit = 36,745962, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(A, B).  [covers 798,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,768194 (regressionFit = 36,768192, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(A, _).  [covers 950,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,748599 (regressionFit = 36,748597, penalties=1.93E-6) for clause:  trusts(A, B) :- knows(C, B), knows(C, A).  [covers 308,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,775282 (regressionFit = 36,775280, penalties=2.0300000000000005E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, B).  [covers 202,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(B, _).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,737195 (regressionFit = 36,737192, penalties=2.1400000000000003E-6) for clause:  trusts(A, B) :- knows(_, B), knows(_, A).  [covers 848,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  trusts(_, A) :- knows(_, A), knows(_, A).  [covers 1.094,0/1.094,0 pos, 0,0/0,0 neg]
%     Score = -36,770886 (regressionFit = 36,770884, penalties=2.1400000000000003E-6) for clause:  trusts(_, A) :- knows(B, A), knows(_, B).  [covers 1.086,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,034.
% Will extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
Comparing variance: 0.040514115425368355 to score=0.0025 #egs=834.0
Comparing variance: 0.011308326911948104 to score=0.0025 #egs=260.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 834,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,040514)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,040514) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 260,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,011308) into position #2 in the search queue (new size=3).

% Time for loop #7: 1,675 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/1.094,0 pos, 0,0/0,0 neg]
% This clause covers 834 positive examples, of which 834 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]'
%     Score = -36,728939 (regressionFit = 36,728937, penalties=2.1400000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 132 186 231 269 309 656 762 811 829
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(A, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,731332 (regressionFit = 33,731329, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,731332): trusts(A, _) :- knows(B, A), knows(_, B), knows(A, B).  [covers 680,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,776849 (regressionFit = 33,776846, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(A, C).  [covers 556,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(A, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,784618 (regressionFit = 33,784615, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, C).  [covers 152,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,779072 (regressionFit = 33,779069, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(B, D).  [covers 340,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,788343 (regressionFit = 33,788340, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(B, _).  [covers 714,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,735798 (regressionFit = 33,735795, penalties=2.9400000000000002E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(C, B).  [covers 300,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,787733 (regressionFit = 33,787730, penalties=3.0400000000000005E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, B).  [covers 32,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,781113 (regressionFit = 33,781110, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(B, C).  [covers 826,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(B, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,714124 (regressionFit = 33,714122, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -33,714124): trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,788539 (regressionFit = 33,788536, penalties=2.8400000000000003E-6) for clause:  trusts(A, B) :- knows(C, A), knows(D, C), knows(D, B).  [covers 744,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,766854 (regressionFit = 33,766851, penalties=2.9400000000000002E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, C).  [covers 302,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(C, _).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, A).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  trusts(A, B) :- knows(C, A), knows(_, C), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  trusts(A, _) :- knows(B, A), knows(_, B), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%     Score = -33,786125 (regressionFit = 33,786122, penalties=3.0500000000000004E-6) for clause:  trusts(A, _) :- knows(B, A), knows(C, B), knows(_, C).  [covers 830,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% The best node found: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,041.
% Will extend: trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
Comparing variance: 0.05605919925980198 to score=0.0025 #egs=480.0
Comparing variance: 0.019225157871597544 to score=0.0025 #egs=354.0
%   Creating a TRUE-branch leaf because length = 4 > 3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 354,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,019225)
%         ILP node to extend: trusts(A, _) :- knows(B, A), knows(_, B).  [covers 834,0/834,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,019225) into position #1 in the search queue (new size=3).

% Time for loop #8: 1,243 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 3
% Max tree depth in nodes  = 4
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      trusts(A, _) :- knows(B, A), knows(C, B), knows(C, A).  [covers 480,0/834,0 pos, 0,0/0,0 neg]
% This clause covers 480 positive examples, of which 480 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (trusts(A, B) :- knows(Anon41303, A))
Created a leaf under (trusts(A, B) :- knows(Anon41231, A), knows(Anon41303, Anon41231))
Created a leaf under (trusts(A, B) :- knows(B, A))

%%%%%  WILL-Produced Tree #10 @ 19:16:58 10/21/22.  %%%%%


% FOR trusts(A, B):
%   if ( knows(A, C), knows(C, C) )
%   then if ( knows(B, A) )
%   | then return 0.12112951232738707;  // std dev = 1,975, 160,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( knows(B, C) )
%   | | then return 0.11359931404546758;  // std dev = 2,178, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( knows(B, D) )
%   | | | then return 0.08754530826340734;  // std dev = 4,683, 232,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=207 */
%   | | | else if ( knows(C, A) )
%   | | | | then return 0.1436199518838244;  // std dev = 0,014, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else return 0.11460121494718936;  // std dev = 0,980, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( knows(B, A) )
%   | then return 0.13360894162326578;  // std dev = 0,068, 424,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=422 */
%   | else if ( knows(E, A), knows(F, E) )
%   | | then if ( knows(F, A) )
%   | | | then return 0.10830582906630946;  // std dev = 5,187, 480,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=451 */
%   | | | else return 0.12744741049890873;  // std dev = 0,139, 354,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=347 */
%   | | else return 0.13172899768816063;  // std dev = 0,106, 260,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=257 */


% Clauses:

trusts(A, B, 0.12112951232738707) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, A), 
     !. // Clause #1.

trusts(A, B, 0.11359931404546758) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, C), 
     !. // Clause #2.

trusts(A, B, 0.08754530826340734) :- 
     knows(A, C), 
     knows(C, C), 
     knows(B, D), 
     !. // Clause #3.

trusts(A, B, 0.1436199518838244) :- 
     knows(A, C), 
     knows(C, C), 
     knows(C, A), 
     !. // Clause #4.

trusts(A, B, 0.11460121494718936) :- 
     knows(A, C), 
     knows(C, C), 
     !. // Clause #5.

trusts(A, B, 0.13360894162326578) :- 
     knows(B, A), 
     !. // Clause #6.

trusts(A, B, 0.10830582906630946) :- 
     knows(C, A), 
     knows(D, C), 
     knows(D, A), 
     !. // Clause #7.

trusts(A, B, 0.12744741049890873) :- 
     knows(C, A), 
     knows(D, C), 
     !. // Clause #8.

trusts(A, B, 0.13172899768816063) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_trusts(a, b, 0.12112951232738707) :-  /* #neg=4 #pos=156 */ 
   knows(a, uniqueVar70),
   knows(uniqueVar70, uniqueVar70),
   knows(b, a),
   !. // Flattened version of clause #1.

flattened_trusts(a, b, 0.11359931404546758) :-  /* #neg=6 #pos=66 */ 
   knows(a, uniqueVar71),
   knows(uniqueVar71, uniqueVar71),
   knows(b, uniqueVar71),
   !. // Flattened version of clause #2.

flattened_trusts(a, b, 0.08754530826340734) :-  /* #neg=25 #pos=207 */ 
   knows(a, uniqueVar72),
   knows(uniqueVar72, uniqueVar72),
   knows(b, underscore),
   !. // Flattened version of clause #3.

flattened_trusts(a, underscore, 0.1436199518838244) :-  /* #pos=6 */ 
   knows(a, uniqueVar73),
   knows(uniqueVar73, uniqueVar73),
   knows(uniqueVar73, a),
   !. // Flattened version of clause #4.

flattened_trusts(a, underscore, 0.11460121494718936) :-  /* #neg=1 #pos=19 */ 
   knows(a, uniqueVar74),
   knows(uniqueVar74, uniqueVar74),
   !. // Flattened version of clause #5.

flattened_trusts(a, b, 0.13360894162326578) :-  /* #neg=2 #pos=422 */ 
   knows(b, a),
   !. // Flattened version of clause #6.

flattened_trusts(a, underscore, 0.10830582906630946) :-  /* #neg=29 #pos=451 */ 
   knows(uniqueVar75, a),
   knows(uniqueVar76, uniqueVar75),
   knows(uniqueVar76, a),
   !. // Flattened version of clause #7.

flattened_trusts(a, underscore, 0.12744741049890873) :-  /* #neg=7 #pos=347 */ 
   knows(uniqueVar77, a),
   knows(underscore, uniqueVar77),
   !. // Flattened version of clause #8.

flattened_trusts(underscore, underscore, 0.13172899768816063) :-  /* #neg=3 #pos=257 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   knows(a, uniqueVar70)
%   knows(uniqueVar73, a)
%   knows(a, uniqueVar74)
%   knows(uniqueVar70, uniqueVar70)
%   knows(a, uniqueVar71)
%   knows(a, uniqueVar73)
%   knows(uniqueVar77, a)
%   knows(uniqueVar72, uniqueVar72)
%   knows(uniqueVar73, uniqueVar73)
%   knows(underscore, uniqueVar77)
%   knows(uniqueVar74, uniqueVar74)
%   knows(b, a)
%   knows(uniqueVar76, a)
%   knows(uniqueVar75, a)
%   knows(b, uniqueVar71)
%   knows(uniqueVar76, uniqueVar75)
%   knows(uniqueVar71, uniqueVar71)
%   knows(a, uniqueVar72)
%   knows(b, underscore)

% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model.ckpt
% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for trusts.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
trusts(A, B, Total) :- // A general accessor. 
   trusts(A, B, 1000000, Total), !.
trusts(A, B, Total) :- waitHere("This should not fail", trusts(A, B, Total)).

trusts(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_trusts_tree1(A, B, TreesToUse, Total1),
   getScore_trusts_tree2(A, B, TreesToUse, Total2),
   getScore_trusts_tree3(A, B, TreesToUse, Total3),
   getScore_trusts_tree4(A, B, TreesToUse, Total4),
   getScore_trusts_tree5(A, B, TreesToUse, Total5),
   getScore_trusts_tree6(A, B, TreesToUse, Total6),
   getScore_trusts_tree7(A, B, TreesToUse, Total7),
   getScore_trusts_tree8(A, B, TreesToUse, Total8),
   getScore_trusts_tree9(A, B, TreesToUse, Total9),
   getScore_trusts_tree10(A, B, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
trusts(A, B, TreesToUse, Total) :- waitHere("This should not fail", trusts(A, B, TreesToUse, Total)).

getScore_trusts_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_trusts_tree1(A, B, TreesToUse, Total1) :- trusts_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_trusts_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_trusts_tree2(A, B, TreesToUse, Total2) :- trusts_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_trusts_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_trusts_tree3(A, B, TreesToUse, Total3) :- trusts_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_trusts_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_trusts_tree4(A, B, TreesToUse, Total4) :- trusts_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_trusts_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_trusts_tree5(A, B, TreesToUse, Total5) :- trusts_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_trusts_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_trusts_tree6(A, B, TreesToUse, Total6) :- trusts_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_trusts_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_trusts_tree7(A, B, TreesToUse, Total7) :- trusts_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_trusts_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_trusts_tree8(A, B, TreesToUse, Total8) :- trusts_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_trusts_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_trusts_tree9(A, B, TreesToUse, Total9) :- trusts_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_trusts_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_trusts_tree10(A, B, TreesToUse, Total10) :- trusts_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(trusts, 167, [
   knows(uniqueVar37, a),
   knows(underscore, uniqueVar54),
   knows(a, uniqueVar51),
   knows(a, uniqueVar74),
   knows(uniqueVar29, uniqueVar28),
   knows(uniqueVar17, a),
   knows(uniqueVar26, a),
   knows(a, uniqueVar55),
   knows(uniqueVar48, uniqueVar48),
   knows(uniqueVar72, uniqueVar72),
   knows(uniqueVar49, uniqueVar49),
   knows(uniqueVar74, uniqueVar74),
   knows(uniqueVar14, a),
   knows(uniqueVar63, b),
   knows(uniqueVar7, a),
   knows(underscore, a),
   knows(a, uniqueVar62),
   knows(uniqueVar4, uniqueVar4),
   knows(uniqueVar50, a),
   knows(uniqueVar71, uniqueVar71),
   knows(b, uniqueVar48),
   knows(a, uniqueVar3),
   knows(uniqueVar3, uniqueVar3),
   knows(uniqueVar65, uniqueVar65),
   knows(uniqueVar19, a),
   knows(a, uniqueVar15),
   knows(underscore, uniqueVar22),
   knows(underscore, uniqueVar8),
   knows(uniqueVar63, a),
   knows(uniqueVar77, a),
   knows(uniqueVar38, b),
   knows(uniqueVar47, uniqueVar47),
   knows(uniqueVar36, uniqueVar36),
   knows(b, a),
   knows(uniqueVar59, a),
   knows(a, uniqueVar34),
   knows(uniqueVar76, a),
   knows(a, uniqueVar56),
   knows(uniqueVar42, a),
   knows(a, uniqueVar10),
   knows(a, uniqueVar36),
   knows(uniqueVar60, a),
   knows(uniqueVar41, uniqueVar41),
   knows(uniqueVar54, a),
   knows(uniqueVar35, a),
   knows(uniqueVar12, uniqueVar12),
   knows(a, uniqueVar67),
   knows(uniqueVar5, a),
   knows(uniqueVar25, uniqueVar25),
   knows(uniqueVar46, a),
   knows(uniqueVar11, uniqueVar11),
   knows(uniqueVar53, uniqueVar52),
   knows(uniqueVar59, uniqueVar58),
   knows(uniqueVar40, uniqueVar40),
   knows(uniqueVar75, a),
   knows(uniqueVar9, a),
   knows(uniqueVar29, a),
   knows(uniqueVar76, uniqueVar75),
   knows(uniqueVar63, uniqueVar63),
   knows(underscore, uniqueVar23),
   knows(b, underscore),
   knows(b, uniqueVar38),
   knows(a, uniqueVar27),
   knows(uniqueVar69, a),
   knows(uniqueVar23, a),
   knows(uniqueVar39, b),
   knows(a, uniqueVar71),
   knows(uniqueVar1, uniqueVar1),
   knows(uniqueVar31, a),
   knows(uniqueVar37, b),
   knows(uniqueVar41, a),
   knows(uniqueVar51, uniqueVar51),
   knows(uniqueVar69, uniqueVar68),
   knows(a, uniqueVar38),
   knows(uniqueVar20, a),
   knows(uniqueVar21, uniqueVar20),
   knows(uniqueVar57, uniqueVar57),
   knows(a, uniqueVar13),
   knows(a, uniqueVar39),
   knows(b, b),
   knows(a, uniqueVar17),
   knows(a, uniqueVar44),
   knows(a, uniqueVar26),
   knows(b, uniqueVar71),
   knows(a, uniqueVar2),
   knows(uniqueVar8, a),
   knows(uniqueVar53, a),
   knows(a, uniqueVar9),
   knows(uniqueVar27, uniqueVar27),
   knows(a, uniqueVar73),
   knows(a, uniqueVar1),
   knows(uniqueVar67, a),
   knows(underscore, uniqueVar7),
   knows(uniqueVar17, uniqueVar17),
   knows(uniqueVar33, uniqueVar33),
   knows(uniqueVar65, a),
   knows(a, uniqueVar12),
   knows(a, uniqueVar49),
   knows(uniqueVar66, a),
   knows(a, uniqueVar33),
   knows(uniqueVar46, uniqueVar45),
   knows(uniqueVar34, uniqueVar34),
   knows(a, uniqueVar35),
   knows(uniqueVar22, a),
   knows(uniqueVar15, uniqueVar15),
   knows(uniqueVar66, uniqueVar66),
   knows(b, uniqueVar33),
   knows(uniqueVar43, a),
   knows(a, uniqueVar48),
   knows(uniqueVar62, underscore),
   knows(uniqueVar26, uniqueVar26),
   knows(uniqueVar73, uniqueVar73),
   knows(underscore, uniqueVar77),
   knows(a, uniqueVar24),
   knows(a, uniqueVar50),
   knows(uniqueVar61, a),
   knows(uniqueVar18, b),
   knows(b, uniqueVar68),
   knows(a, uniqueVar72),
   knows(uniqueVar64, a),
   knows(uniqueVar3, a),
   knows(uniqueVar32, uniqueVar32),
   knows(a, uniqueVar57),
   knows(uniqueVar10, uniqueVar10),
   knows(uniqueVar13, a),
   knows(underscore, uniqueVar31),
   knows(uniqueVar73, a),
   knows(uniqueVar70, uniqueVar70),
   knows(uniqueVar56, uniqueVar56),
   knows(underscore, uniqueVar61),
   knows(uniqueVar30, a),
   knows(uniqueVar50, uniqueVar50),
   knows(a, uniqueVar4),
   knows(uniqueVar43, uniqueVar43),
   knows(uniqueVar6, uniqueVar5),
   knows(uniqueVar18, a),
   knows(a, uniqueVar32),
   knows(uniqueVar55, uniqueVar55),
   knows(underscore, uniqueVar30),
   knows(uniqueVar16, a),
   knows(uniqueVar40, a),
   knows(b, uniqueVar55),
   knows(uniqueVar35, uniqueVar35),
   knows(uniqueVar14, uniqueVar14),
   knows(uniqueVar42, uniqueVar42),
   knows(a, uniqueVar42),
   knows(uniqueVar6, a),
   knows(underscore, uniqueVar60),
   knows(a, uniqueVar70),
   knows(a, uniqueVar65),
   knows(uniqueVar52, a),
   knows(a, uniqueVar11),
   knows(uniqueVar40, b),
   knows(uniqueVar18, uniqueVar18),
   knows(uniqueVar9, uniqueVar9),
   knows(uniqueVar19, uniqueVar19),
   knows(a, uniqueVar25),
   knows(a, uniqueVar47),
   knows(uniqueVar2, uniqueVar2),
   knows(uniqueVar21, a),
   knows(uniqueVar24, uniqueVar24),
   knows(uniqueVar28, a),
   knows(b, uniqueVar45),
   knows(uniqueVar64, uniqueVar64),
   knows(uniqueVar16, uniqueVar16),
   knows(uniqueVar58, a),
   knows(uniqueVar44, a)]).
% Time taken to learn model for 'trusts': 1 minutes and 41,040 seconds.
% Saving model in: SRLBoost/data/trust/train/models/bRDNs/trusts.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 1 minutes and 43,076 seconds.
